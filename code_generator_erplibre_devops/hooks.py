import logging
import os

from odoo import SUPERUSER_ID, _, api, fields, models

_logger = logging.getLogger(__name__)

MODULE_NAME = "erplibre_devops"


def post_init_hook(cr, e):
    with api.Environment.manage():
        env = api.Environment(cr, SUPERUSER_ID, {})

        # The path of the actual file
        path_module_generate = "addons/ERPLibre_erplibre_addons"

        short_name = MODULE_NAME.replace("_", " ").title()

        # Add code generator
        categ_id = env["ir.module.category"].search(
            [("name", "=", "Tools")], limit=1
        )
        value = {
            "shortdesc": "ERPLibre DevOps",
            "name": MODULE_NAME,
            "header_manifest": """
# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).
            """,
            "license": "AGPL-3",
            "category_id": categ_id.id,
            "summary": (
                "ERPLibre DevOps manage workspace to create new ERPLibre"
            ),
            "author": "Mathieu Benoit",
            "website": "https://erplibre.ca",
            "application": True,
            "enable_sync_code": True,
            "path_sync_code": path_module_generate,
            "icon": os.path.join(
                os.path.dirname(__file__),
                "static",
                "description",
                "code_generator_icon.png",
            ),
        }

        # TODO HUMAN: enable your functionality to generate
        value["enable_sync_template"] = True
        value["ignore_fields"] = ""
        value["post_init_hook_show"] = False
        value["uninstall_hook_show"] = False
        value["post_init_hook_feature_code_generator"] = False
        value["uninstall_hook_feature_code_generator"] = False

        value["hook_constant_code"] = f'MODULE_NAME = "{MODULE_NAME}"'

        code_generator_id = env["code.generator.module"].create(value)

        # Add dependencies
        lst_depend_module = [
            "code_generator",
            "code_generator_cron",
            "code_generator_db_servers",
            "code_generator_geoengine",
            "code_generator_hook",
            "code_generator_portal",
            "code_generator_theme_website",
            "code_generator_website_leaflet",
            "code_generator_website_snippet",
            "mail",
            "multi_step_wizard",
        ]
        code_generator_id.add_module_dependency(lst_depend_module)

        # Add/Update Devops Cg
        model_model = "devops.cg"
        model_name = "devops_cg"
        dct_model = {
            "description": "devops_cg",
        }
        dct_field = {
            "default_workspace_master": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 4,
                "comment_before": (
                    "TODO create boolean cache with default workspace to work"
                    " for the other"
                ),
                "field_description": "DevOps Workspace default",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "devops_workspace_ids": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 13,
                "comment_before": (
                    "TODO if share result, do a command to copy file all and"
                    " recreate it like a mirror on other workspace"
                ),
                "field_description": "DevOps Workspace",
                "force_widget": "many2many_tags",
                "relation": "devops.workspace",
                "ttype": "many2many",
            },
            "force_clean_before_generate": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Force Clean Before Generate",
                "help": "Will remove all modules to generate news.",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_cg = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import json

from odoo import _, api, exceptions, fields, models""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_cg.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """r = super().create(vals_list)
w_ids = self.env.context.get("default_devops_workspace_ids")
if w_ids:
    for cg_id in r:
        if not cg_id.default_workspace_master:
            cg_id.default_workspace_master = w_ids[0]

        if not cg_id.devops_workspace_ids:
            cg_id.devops_workspace_ids = [6, 0, w_ids]
        for module_id in cg_id.module_ids:
            if not module_id.devops_workspace_ids:
                module_id.devops_workspace_ids = [
                    (
                        6,
                        0,
                        w_ids,
                    )
                ]
            for model_id in module_id.model_ids:
                if not model_id.devops_workspace_ids:
                    model_id.devops_workspace_ids = [
                        (
                            6,
                            0,
                            w_ids,
                        )
                    ]
                for field_id in model_id.field_ids:
                    if not field_id.devops_workspace_ids:
                        field_id.devops_workspace_ids = [
                            (
                                6,
                                0,
                                w_ids,
                            )
                        ]
return r""",
                    "name": "create",
                    "decorator": "@api.model_create_multi",
                    "param": "self, vals_list",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Cg Field
        model_model = "devops.cg.field"
        model_name = "devops_cg_field"
        dct_model = {
            "description": "devops_cg_field",
        }
        dct_field = {
            "devops_workspace_ids": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 12,
                "code_generator_tree_view_sequence": 19,
                "comment_before": "TODO remove this association",
                "field_description": "DevOps Workspace",
                "force_widget": "many2many_tags",
                "relation": "devops.workspace",
                "ttype": "many2many",
            },
            "field_relation": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 16,
                "field_description": "Inverse field",
                "force_domain": "[('model_id', '=', relation)]",
                "help": (
                    "inverse_name - Need for one2many to associate with"
                    " many2one."
                ),
                "relation": "devops.cg.field",
                "ttype": "many2one",
            },
            "field_relation_manual": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 10,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Inverse field manual",
                "help": (
                    "inverse_name - Need for one2many to associate with"
                    " many2one, manual entry."
                ),
                "ttype": "char",
            },
            "has_error": {
                "code_generator_compute": "_compute_has_error",
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Has Error",
                "store": True,
                "ttype": "boolean",
            },
            "help": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 18,
                "field_description": "Help",
                "ttype": "char",
            },
            "model_id": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Model",
                "on_delete": "cascade",
                "relation": "devops.cg.model",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Name",
                "ttype": "char",
            },
            "relation": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 7,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Comodel",
                "help": (
                    "comodel - Create relation for many2one, many2many,"
                    " one2many"
                ),
                "relation": "devops.cg.model",
                "ttype": "many2one",
            },
            "relation_manual": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Comodel manual",
                "help": (
                    "comodel - Create relation for many2one, many2many,"
                    " one2many. Manual entry by pass relation field."
                ),
                "ttype": "char",
            },
            "type": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 13,
                "default": "char",
                "field_description": "Type",
                "required": True,
                "selection": (
                    "[('char', 'char'), ('boolean', 'boolean'), ('integer',"
                    " 'integer'), ('float', 'float'), ('text', 'text'),"
                    " ('html', 'html'), ('datetime', 'datetime'), ('date',"
                    " 'date'), ('many2one', 'many2one'), ('many2many',"
                    " 'many2many'), ('one2many', 'one2many')]"
                ),
                "ttype": "selection",
            },
            "widget": {
                "code_generator_sequence": 11,
                "field_description": "Widget",
                "selection": (
                    "[('image', 'image'), ('many2many_tags',"
                    " 'many2many_tags'), ('priority', 'priority'),"
                    " ('selection', 'selection'), ('mail_followers',"
                    " 'mail_followers'), ('mail_activity', 'mail_activity'),"
                    " ('mail_thread', 'mail_thread')]"
                ),
                "ttype": "selection",
            },
        }
        model_devops_cg_field = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code model
            lst_value = [
                {
                    "code": """for rec in self:
    # Disable all error
    rec.has_error = False
    if rec.type in ("many2many", "many2one", "one2many"):
        has_relation = rec.relation or rec.relation_manual
        has_field_relation = True
        if rec.type == "one2many":
            has_field_relation = (
                rec.field_relation or rec.field_relation_manual
            )
        rec.has_error = not has_relation or not has_field_relation""",
                    "name": "_compute_has_error",
                    "decorator": (
                        '@api.depends("type", "relation", "relation_manual",'
                        ' "field_relation", "field_relation_manual")'
                    ),
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_field.id,
                },
                {
                    "code": """self.ensure_one()
dct_field = {"ttype": self.type}
if self.type in ["many2many", "many2one", "one2many"]:
    if self.relation:
        dct_field["relation"] = self.relation.name
    elif self.relation_manual:
        dct_field["relation"] = self.relation_manual
    # TODO support one2many with "inverse_field" and "inverse_field_manual"
    # TODO support many2many with different relation
if self.help:
    dct_field["help"] = self.help
return dct_field""",
                    "name": "get_dct",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_field.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Cg Model
        model_model = "devops.cg.model"
        model_name = "devops_cg_model"
        dct_model = {
            "description": "devops_cg_model",
        }
        dct_field = {
            "description": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Description",
                "ttype": "char",
            },
            "devops_workspace_ids": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 14,
                "field_description": "DevOps Workspace",
                "force_widget": "many2many_tags",
                "relation": "devops.workspace",
                "ttype": "many2many",
            },
            "module_id": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Module",
                "on_delete": "cascade",
                "relation": "devops.cg.module",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_cg_model = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code model
            lst_value = [
                {
                    "code": """self.ensure_one()
dct_model = {}
for field_id in self.field_ids:
    dct_model[field_id.name] = field_id.get_dct()
return dct_model""",
                    "name": "get_field_dct",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_model.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Cg Module
        model_model = "devops.cg.module"
        model_name = "devops_cg_module"
        dct_model = {
            "description": "devops_cg_module",
        }
        dct_field = {
            "code_generator": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Project",
                "on_delete": "cascade",
                "relation": "devops.cg",
                "ttype": "many2one",
            },
            "devops_workspace_ids": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 13,
                "field_description": "DevOps Workspace",
                "force_widget": "many2many_tags",
                "relation": "devops.workspace",
                "ttype": "many2many",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_cg_module = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Devops Cg New Project
        model_model = "devops.cg.new_project"
        model_name = "devops_cg_new_project"
        dct_model = {
            "description": "Create new project for CG project",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "active_coverage": {
                "code_generator_form_simple_view_sequence": 45,
                "code_generator_sequence": 37,
                "field_description": "Active Coverage",
                "help": "Will enable coverage output file.",
                "ttype": "boolean",
            },
            "bd_name_demo": {
                "code_generator_form_simple_view_sequence": 41,
                "code_generator_sequence": 91,
                "field_description": "Bd Name Demo",
                "help": "BD name for uc0",
                "ttype": "char",
            },
            "bd_name_generator": {
                "code_generator_form_simple_view_sequence": 43,
                "code_generator_sequence": 93,
                "field_description": "Bd Name Generator",
                "help": "BD name for ucB",
                "ttype": "char",
            },
            "bd_name_template": {
                "code_generator_form_simple_view_sequence": 42,
                "code_generator_sequence": 92,
                "field_description": "Bd Name Template",
                "help": "BD name for ucA",
                "ttype": "char",
            },
            "breakpoint_Uc0_cg_Uc0": {
                "code_generator_form_simple_view_sequence": 83,
                "code_generator_sequence": 60,
                "field_description": "Uc0 cg Uc0",
                "help": (
                    "Breakpoint dans la section génération de code du Uc0."
                ),
                "ttype": "boolean",
            },
            "breakpoint_Uc0_first_line_hook": {
                "code_generator_form_simple_view_sequence": 84,
                "code_generator_sequence": 43,
                "field_description": "Uc0 First line hook",
                "help": "Breakpoint first line hook file uc0.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_module_create_cg_model_code": {
                "code_generator_form_simple_view_sequence": 101,
                "code_generator_sequence": 76,
                "field_description": "UcA Extract module create cg model code",
                "help": (
                    "Breakpoint UcA when extract module before create"
                    " code.generator.model.code ."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_module_get_min_max_crop": {
                "code_generator_form_simple_view_sequence": 99,
                "code_generator_sequence": 87,
                "field_description": "UcA Extract module get min/max crop",
                "help": (
                    "Breakpoint UcA to diagnostic warning when extract view."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_python_controller_warning": {
                "code_generator_form_simple_view_sequence": 96,
                "code_generator_sequence": 62,
                "field_description": "UcA Extract Python controller WARNING",
                "help": (
                    "Breakpoint UcA to diagnostic warning when extract python"
                    " controller."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_python_detect_field": {
                "code_generator_form_simple_view_sequence": 100,
                "code_generator_sequence": 65,
                "field_description": "UcA Extract Python detect field",
                "help": "Breakpoint UcA when extract Python field of model.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_python_module_file_warning": {
                "code_generator_form_simple_view_sequence": 98,
                "code_generator_sequence": 64,
                "field_description": "UcA Extract Python module file WARNING",
                "help": (
                    "Breakpoint UcA to diagnostic warning when extract python"
                    " module file."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_python_module_warning": {
                "code_generator_form_simple_view_sequence": 97,
                "code_generator_sequence": 63,
                "field_description": "UcA Extract Python module WARNING",
                "help": (
                    "Breakpoint UcA to diagnostic warning when extract python"
                    " module."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_view_first_line": {
                "code_generator_form_simple_view_sequence": 88,
                "code_generator_sequence": 69,
                "field_description": "UcA Extract view first line",
                "help": "Breakpoint UcA to diagnostic when extract view.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_view_warning": {
                "code_generator_form_simple_view_sequence": 95,
                "code_generator_sequence": 68,
                "field_description": "UcA Extract view WARNING",
                "help": (
                    "Breakpoint UcA to diagnostic warning when extract view."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_xml_act_window": {
                "code_generator_form_simple_view_sequence": 93,
                "code_generator_sequence": 74,
                "field_description": "UcA Extract XML Act Window",
                "help": "Breakpoint UcA gc breakpoint extract xml act window.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_xml_button": {
                "code_generator_form_simple_view_sequence": 89,
                "code_generator_sequence": 70,
                "field_description": "UcA Extract XML button",
                "help": "Breakpoint UcA gc breakpoint extract xml button.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_xml_div_container": {
                "code_generator_form_simple_view_sequence": 94,
                "code_generator_sequence": 75,
                "field_description": "UcA Extract XML div container",
                "help": (
                    "Breakpoint UcA gc breakpoint extract xml div container."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_xml_header": {
                "code_generator_form_simple_view_sequence": 90,
                "code_generator_sequence": 71,
                "field_description": "UcA Extract XML header",
                "help": "Breakpoint UcA gc breakpoint extract xml header.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_xml_title": {
                "code_generator_form_simple_view_sequence": 91,
                "code_generator_sequence": 72,
                "field_description": "UcA Extract XML title",
                "help": "Breakpoint UcA gc breakpoint extract xml title.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_extract_xml_view_item": {
                "code_generator_form_simple_view_sequence": 92,
                "code_generator_sequence": 73,
                "field_description": "UcA Extract XML view item",
                "help": "Breakpoint UcA gc breakpoint extract xml item.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_first_line_hook": {
                "code_generator_form_simple_view_sequence": 87,
                "code_generator_sequence": 58,
                "field_description": "UcA First line hook",
                "help": "Breakpoint first line hook file ucA.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_write_hook_code": {
                "code_generator_form_simple_view_sequence": 102,
                "code_generator_sequence": 77,
                "field_description": "UcA Write hook code",
                "help": "Breakpoint UcA when write code into hooks.",
                "ttype": "boolean",
            },
            "breakpoint_UcA_write_hook_model": {
                "code_generator_form_simple_view_sequence": 103,
                "code_generator_sequence": 78,
                "field_description": "UcA Write hook model",
                "help": "Breakpoint UcA when write model into hooks.",
                "ttype": "boolean",
            },
            "breakpoint_UcB_first_line_hook": {
                "code_generator_form_simple_view_sequence": 106,
                "code_generator_sequence": 59,
                "field_description": "UcB First line hook",
                "help": "Breakpoint first line hook file ucB.",
                "ttype": "boolean",
            },
            "breakpoint_UcB_generate_view_specific_form_item": {
                "code_generator_form_simple_view_sequence": 107,
                "code_generator_sequence": 83,
                "field_description": "UcB Generate view specific form item",
                "help": "Breakpoint UcB to generate specific form view item.",
                "ttype": "boolean",
            },
            "breakpoint_UcB_generate_view_warning": {
                "code_generator_form_simple_view_sequence": 109,
                "code_generator_sequence": 82,
                "field_description": "UcB Generate view WARNING",
                "help": (
                    "Breakpoint UcB to diagnostic warning when generate view."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcB_generate_xml_view_object": {
                "code_generator_form_simple_view_sequence": 108,
                "code_generator_sequence": 84,
                "field_description": "UcB Generate view xml view object",
                "help": "Breakpoint UcB to generate xml view object.",
                "ttype": "boolean",
            },
            "breakpoint_UcB_write_act_window": {
                "code_generator_form_simple_view_sequence": 113,
                "code_generator_sequence": 80,
                "field_description": "UcB Write act_window with xml_writer",
                "help": (
                    "Breakpoint UcB when write act_window with xml_writer."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcB_write_code_model_field": {
                "code_generator_form_simple_view_sequence": 110,
                "code_generator_sequence": 85,
                "field_description": "UcB Write code model field",
                "help": (
                    "Breakpoint UcB generate code - write model field module."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcB_write_code_model_field_prepare_field": {
                "code_generator_form_simple_view_sequence": 111,
                "code_generator_sequence": 86,
                "field_description": (
                    "UcB Write code model field prepare field"
                ),
                "help": (
                    "Breakpoint UcB generate code - prepare set of data for"
                    " field to generate field."
                ),
                "ttype": "boolean",
            },
            "breakpoint_UcB_write_code_with_cw": {
                "code_generator_form_simple_view_sequence": 112,
                "code_generator_sequence": 79,
                "field_description": "UcB Write code with CodeWriter",
                "help": "Breakpoint UcB when write code with code_writer.",
                "ttype": "boolean",
            },
            "breakpoint_UcB_write_data": {
                "code_generator_form_simple_view_sequence": 114,
                "code_generator_sequence": 81,
                "field_description": "UcB Write xml data",
                "help": "Breakpoint UcB when generate data to xml_data.",
                "ttype": "boolean",
            },
            "breakpoint_all_before_sync_code": {
                "code_generator_form_simple_view_sequence": 77,
                "code_generator_sequence": 67,
                "field_description": "ALL Before sync module",
                "help": "Breakpoint before sync module in writing code.",
                "ttype": "boolean",
            },
            "breakpoint_all_begin_generate_file": {
                "code_generator_form_simple_view_sequence": 105,
                "code_generator_sequence": 61,
                "field_description": "ALL Begin generate file",
                "help": "Breakpoint dans la section génération de code.",
                "ttype": "boolean",
            },
            "breakpoint_all_prepare_data_before_write": {
                "code_generator_form_simple_view_sequence": 81,
                "code_generator_sequence": 66,
                "field_description": "ALL Prepare data before write",
                "help": (
                    "Breakpoint all prepare set of data before write code."
                ),
                "ttype": "boolean",
            },
            "breakpoint_all_write_hook_before_model": {
                "code_generator_form_simple_view_sequence": 79,
                "code_generator_sequence": 45,
                "field_description": "ALL Write hook before model",
                "help": (
                    "Breakpoint general when write hook before write"
                    " model/fields into hook."
                ),
                "ttype": "boolean",
            },
            "breakpoint_all_write_hook_begin": {
                "code_generator_form_simple_view_sequence": 78,
                "code_generator_sequence": 44,
                "field_description": "ALL Write hook file at begin",
                "help": "Breakpoint general when write hook.",
                "ttype": "boolean",
            },
            "breakpoint_all_write_hook_model_write_field": {
                "code_generator_form_simple_view_sequence": 80,
                "code_generator_sequence": 46,
                "field_description": "ALL Write hook model write field",
                "help": (
                    "Breakpoint general when write hook while writing model,"
                    " before write field."
                ),
                "ttype": "boolean",
            },
            "breakpoint_condition_field_attribute_name": {
                "code_generator_form_simple_view_sequence": 67,
                "code_generator_sequence": 49,
                "field_description": "Field attribute name",
                "help": (
                    "General breakpoint condition with field attribute name."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_field_name": {
                "code_generator_form_simple_view_sequence": 66,
                "code_generator_sequence": 48,
                "field_description": "Field name",
                "help": "General breakpoint condition with field name.",
                "ttype": "char",
            },
            "breakpoint_condition_item_type_view_item": {
                "code_generator_form_simple_view_sequence": 74,
                "code_generator_sequence": 56,
                "field_description": "Item type view item",
                "help": (
                    "View breakpoint condition to diagnostic module. The item"
                    " type of view item."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_method_name": {
                "code_generator_form_simple_view_sequence": 68,
                "code_generator_sequence": 50,
                "field_description": "Method name",
                "help": "General breakpoint condition to diagnostic method.",
                "ttype": "char",
            },
            "breakpoint_condition_model_name": {
                "code_generator_form_simple_view_sequence": 65,
                "code_generator_sequence": 47,
                "field_description": "Model name",
                "help": "General breakpoint condition with model name.",
                "ttype": "char",
            },
            "breakpoint_condition_module_name": {
                "code_generator_form_simple_view_sequence": 69,
                "code_generator_sequence": 51,
                "field_description": "Module name",
                "help": (
                    "General breakpoint condition to diagnostic module. It's"
                    " generally the name of the generated module."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_name_view_item": {
                "code_generator_form_simple_view_sequence": 73,
                "code_generator_sequence": 55,
                "field_description": "Name view item",
                "help": (
                    "View breakpoint condition to diagnostic module. The name"
                    " of view item."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_short_xml_id": {
                "code_generator_form_simple_view_sequence": 71,
                "code_generator_sequence": 53,
                "field_description": "Xml Short ID",
                "help": (
                    "View breakpoint condition to diagnostic module. XML_id is"
                    " the identifiant of view, without the module name."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_value_label_view_item": {
                "code_generator_form_simple_view_sequence": 72,
                "code_generator_sequence": 54,
                "field_description": "String view item",
                "help": (
                    "View breakpoint condition to diagnostic module. The"
                    " string of view item."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_view_name": {
                "code_generator_form_simple_view_sequence": 75,
                "code_generator_sequence": 57,
                "field_description": "View name",
                "help": (
                    "View breakpoint condition to diagnostic module. The id of"
                    " the view."
                ),
                "ttype": "char",
            },
            "breakpoint_condition_xml_id": {
                "code_generator_form_simple_view_sequence": 70,
                "code_generator_sequence": 52,
                "field_description": "Xml ID",
                "help": (
                    "View breakpoint condition to diagnostic module. XML_id is"
                    " the identifiant of view."
                ),
                "ttype": "char",
            },
            "can_setup_ide": {
                "code_generator_compute": "_compute_can_setup_ide",
                "code_generator_form_simple_view_sequence": 76,
                "code_generator_sequence": 39,
                "field_description": "Can Setup Ide",
                "store": True,
                "ttype": "boolean",
            },
            "cg_hooks_py": {
                "code_generator_form_simple_view_sequence": 61,
                "code_generator_sequence": 88,
                "comment_before": """TODO need to support related field
devops_exec_error_ids = fields.One2many(
related=\"devops_exec_bundle_id.devops_exec_parent_error_ids\"
)""",
                "field_description": "Cg Hooks Py",
                "help": "Path of hooks python file.",
                "ttype": "char",
            },
            "cg_path": {
                "code_generator_form_simple_view_sequence": 60,
                "code_generator_sequence": 99,
                "field_description": "Cg Path",
                "help": "Path of the code generator.",
                "ttype": "char",
            },
            "code_generator_demo_hooks_py": {
                "code_generator_form_simple_view_sequence": 59,
                "code_generator_sequence": 94,
                "field_description": "Code Generator Demo Hooks Py",
                "help": "Path of code_generator hooks python file.",
                "ttype": "char",
            },
            "code_generator_demo_path": {
                "code_generator_form_simple_view_sequence": 57,
                "code_generator_sequence": 100,
                "field_description": "Code Generator Demo Path",
                "help": "Path of the uc0.",
                "ttype": "char",
            },
            "code_generator_hooks_path_relative": {
                "code_generator_form_simple_view_sequence": 58,
                "code_generator_sequence": 95,
                "field_description": "Code Generator Hooks Path Relative",
                "help": (
                    "Path of code_generator hooks python file relative path."
                ),
                "ttype": "char",
            },
            "code_generator_name": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 32,
                "field_description": "Code Generator Name",
                "ttype": "char",
            },
            "config": {
                "code_generator_form_simple_view_sequence": 32,
                "code_generator_sequence": 30,
                "field_description": "Config",
                "ttype": "char",
            },
            "config_debug_Uc0": {
                "code_generator_form_simple_view_sequence": 82,
                "code_generator_sequence": 40,
                "field_description": "Config Debug Uc0",
                "help": "Debug Uc0.",
                "ttype": "boolean",
            },
            "config_debug_UcA": {
                "code_generator_form_simple_view_sequence": 85,
                "code_generator_sequence": 41,
                "field_description": "Config Debug Uca",
                "help": "Debug UcA.",
                "ttype": "boolean",
            },
            "config_debug_UcB": {
                "code_generator_form_simple_view_sequence": 104,
                "code_generator_sequence": 42,
                "field_description": "Config Debug Ucb",
                "help": "Debug UcB.",
                "ttype": "boolean",
            },
            "config_path": {
                "code_generator_form_simple_view_sequence": 56,
                "code_generator_sequence": 96,
                "field_description": "Config Path",
                "help": "Path of temporary configuration file for execution.",
                "ttype": "char",
            },
            "config_uca_enable_export_data": {
                "code_generator_form_simple_view_sequence": 47,
                "code_generator_sequence": 9,
                "default": True,
                "field_description": "Config Uca Enable Export Data",
                "help": (
                    "Will enable option nonmenclator in CG to export data"
                    " associate to models."
                ),
                "ttype": "boolean",
            },
            "devops_exec_bundle_id": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 101,
                "field_description": "Devops Exec Bundle",
                "relation": "devops.exec.bundle",
                "ttype": "many2one",
            },
            "devops_workspace": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 102,
                "field_description": "Devops Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "directory": {
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 27,
                "field_description": "Directory",
                "required": True,
                "ttype": "char",
            },
            "directory_cg": {
                "code_generator_form_simple_view_sequence": 30,
                "code_generator_sequence": 28,
                "field_description": "Directory Cg",
                "help": "Specify cg generator directory, or use directory.",
                "ttype": "char",
            },
            "directory_template": {
                "code_generator_form_simple_view_sequence": 31,
                "code_generator_sequence": 29,
                "field_description": "Directory Template",
                "help": "Specify template directory, or use directory.",
                "ttype": "char",
            },
            "exec_start_date": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 17,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Execution start date",
                "ttype": "datetime",
            },
            "exec_stop_date": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 18,
                "field_description": "Execution stop date",
                "ttype": "datetime",
            },
            "exec_time_duration": {
                "code_generator_compute": "_compute_exec_time_duration",
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 19,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Execution time duration",
                "store": True,
                "ttype": "float",
            },
            "execution_finish": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 24,
                "field_description": "Execution Finish",
                "help": "Will be True when execution finish correctly.",
                "readonly": True,
                "ttype": "boolean",
            },
            "force": {
                "code_generator_form_simple_view_sequence": 46,
                "code_generator_sequence": 36,
                "field_description": "Force",
                "ttype": "boolean",
            },
            "has_error": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 4,
                "field_description": "Has Error",
                "help": (
                    "Will be True if got error into execution of new project."
                ),
                "readonly": True,
                "ttype": "boolean",
            },
            "has_warning": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 5,
                "field_description": "Has Warning",
                "help": (
                    "Will be True if got warning into execution of new"
                    " project."
                ),
                "readonly": True,
                "ttype": "boolean",
            },
            "is_pause": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 25,
                "field_description": "Is Pause",
                "help": (
                    "Is pause is True when debug is execute and set at pause"
                    " to run outside."
                ),
                "readonly": True,
                "ttype": "boolean",
            },
            "keep_bd_alive": {
                "code_generator_form_simple_view_sequence": 40,
                "code_generator_sequence": 38,
                "field_description": "Keep Bd Alive",
                "ttype": "boolean",
            },
            "last_new_project": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 16,
                "field_description": "Last new project",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
            "mode_view": {
                "code_generator_form_simple_view_sequence": 48,
                "code_generator_sequence": 8,
                "default": "same_view",
                "field_description": "Mode View",
                "help": (
                    "Mode view, enable rebuild same view or create new view."
                ),
                "selection": (
                    "[('no_view', 'No view'), ('same_view', 'Autopoiesis'),"
                    " ('new_view', 'New')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet": {
                "code_generator_form_simple_view_sequence": 49,
                "code_generator_sequence": 10,
                "default": "no_snippet",
                "field_description": "Mode View Snippet",
                "help": "Will active feature to generate snippet",
                "selection": (
                    "[('no_snippet', 'No snippet'), ('enable_snippet', 'Enable"
                    " snippet')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet_enable_template_website_snippet_view": {
                "code_generator_form_simple_view_sequence": 50,
                "code_generator_sequence": 11,
                "default": True,
                "field_description": (
                    "Mode View Snippet Enable Template Website Snippet View"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "boolean",
            },
            "mode_view_snippet_template_generate_website_enable_javascript": {
                "code_generator_form_simple_view_sequence": 53,
                "code_generator_sequence": 14,
                "default": True,
                "field_description": (
                    "Mode View Snippet Template Generate Website Enable"
                    " Javascript"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "boolean",
            },
            "mode_view_snippet_template_generate_website_snippet_ctrl_featur": {
                "code_generator_form_simple_view_sequence": 52,
                "code_generator_sequence": 13,
                "default": "model_show_item_individual",
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet Ctrl"
                    " Featur"
                ),
                "help": "Feature for mode_view_snippet",
                "selection": (
                    "[('helloworld', 'helloworld'),"
                    " ('model_show_item_individual', 'Model show item"
                    " individual'), ('model_show_item_list', 'Model show item"
                    " list')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet_template_generate_website_snippet_generic_mdl": {
                "code_generator_form_simple_view_sequence": 51,
                "code_generator_sequence": 12,
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet"
                    " Generic Mdl"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "char",
            },
            "mode_view_snippet_template_generate_website_snippet_type": {
                "code_generator_form_simple_view_sequence": 54,
                "code_generator_sequence": 15,
                "default": "effect",
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet Type"
                ),
                "help": "Feature for mode_view_snippet",
                "selection": (
                    "[('content', 'Content'), ('effect', 'Effect'),"
                    " ('feature', 'Feature'), ('structure', 'Structure')]"
                ),
                "ttype": "selection",
            },
            "model_to_remove": {
                "code_generator_form_simple_view_sequence": 33,
                "code_generator_sequence": 31,
                "field_description": "Model To Remove",
                "help": "Separate model by ; to remove to CG.",
                "ttype": "char",
            },
            "module": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 26,
                "field_description": "Module",
                "required": True,
                "ttype": "char",
            },
            "module_path": {
                "code_generator_form_simple_view_sequence": 55,
                "code_generator_sequence": 97,
                "field_description": "Module Path",
                "help": "Path of the module.",
                "ttype": "char",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "new_project_with_code_generator": {
                "code_generator_form_simple_view_sequence": 39,
                "code_generator_sequence": 107,
                "default": True,
                "field_description": "New Project With Code Generator",
                "help": (
                    "Need to enable this feature if the goal is to do"
                    " new_project with the code generator. Because by default,"
                    " it will be installed. Not working how I assume, its take"
                    " 40 seconds more. Stay it at default = True."
                ),
                "ttype": "boolean",
            },
            "odoo_config": {
                "code_generator_form_simple_view_sequence": 34,
                "code_generator_sequence": 34,
                "default": "./config.conf",
                "field_description": "Odoo Config",
                "ttype": "char",
            },
            "project_type": {
                "code_generator_sequence": 7,
                "field_description": "Project Type",
                "selection": (
                    "[('self', 'Self generate'), ('cg', 'Code generator')]"
                ),
                "ttype": "selection",
            },
            "stage_id": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 11,
                "default_lambda": "lambda s: s.default_stage_id()",
                "field_description": "Stage",
                "force_widget": "statusbar",
                "relation": "devops.cg.new_project.stage",
                "ttype": "many2one",
            },
            "stop_execution_if_env_not_clean": {
                "code_generator_form_simple_view_sequence": 44,
                "code_generator_sequence": 35,
                "default": True,
                "field_description": "Stop Execution If Env Not Clean",
                "ttype": "boolean",
            },
            "template_hooks_py": {
                "code_generator_form_simple_view_sequence": 63,
                "code_generator_sequence": 89,
                "field_description": "Template Hooks Py",
                "help": "Path of template hooks python file.",
                "ttype": "char",
            },
            "template_manifest_py": {
                "code_generator_form_simple_view_sequence": 64,
                "code_generator_sequence": 90,
                "field_description": "Template Manifest Py",
                "help": "Path of template manifest python file.",
                "ttype": "char",
            },
            "template_name": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 33,
                "field_description": "Template Name",
                "ttype": "char",
            },
            "template_path": {
                "code_generator_form_simple_view_sequence": 62,
                "code_generator_sequence": 98,
                "field_description": "Template Path",
                "help": "Path of the template.",
                "ttype": "char",
            },
            "uca_option_with_inherit": {
                "code_generator_form_simple_view_sequence": 37,
                "code_generator_sequence": 22,
                "field_description": "Uca Option With Inherit",
                "help": "UCA configuration - with inherit",
                "ttype": "boolean",
            },
            "use_existing_meta_module": {
                "code_generator_form_simple_view_sequence": 35,
                "code_generator_sequence": 20,
                "field_description": "Use Existing Meta Module",
                "help": "If False, will create new meta file from uc0.",
                "ttype": "boolean",
            },
            "use_existing_meta_module_uca_only": {
                "code_generator_form_simple_view_sequence": 36,
                "code_generator_sequence": 21,
                "field_description": "Use Existing Meta Module Uca Only",
                "help": "Force UcA only from feature use_existing_meta_module",
                "ttype": "boolean",
            },
            "use_existing_meta_module_ucb_only": {
                "code_generator_form_simple_view_sequence": 38,
                "code_generator_sequence": 23,
                "field_description": "Use Existing Meta Module Ucb Only",
                "help": "Force UcB only from feature use_existing_meta_module",
                "ttype": "boolean",
            },
        }
        model_devops_cg_new_project = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import configparser
import json
import logging
import os
import tempfile
import uuid

from git import Repo
from git.exc import InvalidGitRepositoryError, NoSuchPathError

from odoo import _, api, exceptions, fields, models, tools

CODE_GENERATOR_DIRECTORY = "./addons/TechnoLibre_odoo-code-generator-template/"
CODE_GENERATOR_DEMO_NAME = "code_generator_demo"
KEY_REPLACE_CODE_GENERATOR_DEMO = 'MODULE_NAME = "%s"'
_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_cg_new_project.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """return self.env.ref("erplibre_devops.devops_cg_new_project_stage_init")""",
                    "name": "default_stage_id",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": '''for rec in self:
    if not isinstance(rec.id, models.NewId):
        rec.name = f"{rec.id}: "
    else:
        rec.name = ""
    rec.name += f"{rec.devops_workspace.name} - {rec.module}"
    if rec.exec_stop_date:
        rec.name += (
            f" - finish {rec.exec_stop_date} duration"
            f" {rec.exec_time_duration}"
        )
    elif rec.exec_start_date:
        rec.name += f" - start {rec.exec_start_date}"''',
                    "name": "_compute_name",
                    "decorator": (
                        '@api.depends("devops_workspace", "module",'
                        ' "exec_start_date", "exec_stop_date",'
                        ' "exec_time_duration")'
                    ),
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    rec.can_setup_ide = (
        rec.config_debug_Uc0
        + rec.config_debug_UcA
        + rec.config_debug_UcB
        + rec.breakpoint_all_write_hook_begin
        + rec.breakpoint_all_write_hook_before_model
        + rec.breakpoint_all_write_hook_model_write_field
        + rec.breakpoint_all_prepare_data_before_write
        + rec.breakpoint_all_before_sync_code
        + rec.breakpoint_Uc0_first_line_hook
        + rec.breakpoint_UcA_first_line_hook
        + rec.breakpoint_UcB_first_line_hook
        + rec.breakpoint_Uc0_cg_Uc0
        + rec.breakpoint_all_begin_generate_file
        + rec.breakpoint_UcA_extract_view_warning
        + rec.breakpoint_UcA_extract_python_controller_warning
        + rec.breakpoint_UcA_extract_python_module_warning
        + rec.breakpoint_UcA_extract_python_module_file_warning
        + rec.breakpoint_UcA_extract_python_detect_field
        + rec.breakpoint_UcA_extract_module_create_cg_model_code
        + rec.breakpoint_UcA_write_hook_code
        + rec.breakpoint_UcA_write_hook_model
        + rec.breakpoint_UcB_write_code_with_cw
        + rec.breakpoint_UcB_write_act_window
        + rec.breakpoint_UcB_write_data
        + rec.breakpoint_UcA_extract_module_get_min_max_crop
        + rec.breakpoint_UcA_extract_view_first_line
        + rec.breakpoint_UcA_extract_xml_button
        + rec.breakpoint_UcA_extract_xml_header
        + rec.breakpoint_UcA_extract_xml_title
        + rec.breakpoint_UcA_extract_xml_view_item
        + rec.breakpoint_UcA_extract_xml_act_window
        + rec.breakpoint_UcA_extract_xml_div_container
        + rec.breakpoint_UcB_generate_view_warning
        + rec.breakpoint_UcB_generate_view_specific_form_item
        + rec.breakpoint_UcB_generate_xml_view_object
        + rec.breakpoint_UcB_write_code_model_field
    )""",
                    "name": "_compute_can_setup_ide",
                    "decorator": (
                        '@api.depends("config_debug_Uc0", "config_debug_UcA",'
                        ' "config_debug_UcB",'
                        ' "breakpoint_all_write_hook_begin",'
                        ' "breakpoint_all_write_hook_before_model",'
                        ' "breakpoint_all_write_hook_model_write_field",'
                        ' "breakpoint_all_prepare_data_before_write",'
                        ' "breakpoint_all_before_sync_code",'
                        ' "breakpoint_Uc0_first_line_hook",'
                        ' "breakpoint_UcA_first_line_hook",'
                        ' "breakpoint_UcB_first_line_hook",'
                        ' "breakpoint_Uc0_cg_Uc0",'
                        ' "breakpoint_all_begin_generate_file",'
                        ' "breakpoint_UcA_extract_view_warning",'
                        ' "breakpoint_UcA_extract_python_controller_warning",'
                        ' "breakpoint_UcA_extract_python_module_warning",'
                        ' "breakpoint_UcA_extract_python_module_file_warning",'
                        ' "breakpoint_UcA_extract_python_detect_field",'
                        ' "breakpoint_UcA_extract_module_create_cg_model_code",'
                        ' "breakpoint_UcA_write_hook_code",'
                        ' "breakpoint_UcA_write_hook_model",'
                        ' "breakpoint_UcB_write_code_with_cw",'
                        ' "breakpoint_UcB_write_act_window",'
                        ' "breakpoint_UcB_write_data",'
                        ' "breakpoint_UcA_extract_module_get_min_max_crop",'
                        ' "breakpoint_UcA_extract_view_first_line",'
                        ' "breakpoint_UcA_extract_xml_button",'
                        ' "breakpoint_UcA_extract_xml_header",'
                        ' "breakpoint_UcA_extract_xml_title",'
                        ' "breakpoint_UcA_extract_xml_view_item",'
                        ' "breakpoint_UcA_extract_xml_act_window",'
                        ' "breakpoint_UcA_extract_xml_div_container",'
                        ' "breakpoint_UcB_generate_view_warning",'
                        ' "breakpoint_UcB_generate_view_specific_form_item",'
                        ' "breakpoint_UcB_generate_xml_view_object",'
                        ' "breakpoint_UcB_write_code_model_field")'
                    ),
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "New project clear pause",
        devops_cg_new_project=rec.id,
        ctx=ctx,
    ) as rec_ws:
        rec.is_pause = False
        rec.config_debug_Uc0 = False
        rec.config_debug_UcA = False
        rec.config_debug_UcB = False
        rec.breakpoint_all_write_hook_begin = False
        rec.breakpoint_all_write_hook_before_model = False
        rec.breakpoint_all_write_hook_model_write_field = False
        rec.breakpoint_all_prepare_data_before_write = False
        rec.breakpoint_all_before_sync_code = False
        rec.breakpoint_Uc0_first_line_hook = False
        rec.breakpoint_UcA_first_line_hook = False
        rec.breakpoint_UcB_first_line_hook = False
        rec.breakpoint_Uc0_cg_Uc0 = False
        rec.breakpoint_all_begin_generate_file = False
        rec.breakpoint_UcA_extract_python_controller_warning = False
        rec.breakpoint_UcA_extract_python_module_warning = False
        rec.breakpoint_UcA_extract_python_module_file_warning = False
        rec.breakpoint_UcA_extract_python_detect_field = False
        rec.breakpoint_UcA_extract_module_create_cg_model_code = False
        rec.breakpoint_UcA_write_hook_code = False
        rec.breakpoint_UcA_write_hook_model = False
        rec.breakpoint_UcB_write_code_with_cw = False
        rec.breakpoint_UcB_write_act_window = False
        rec.breakpoint_UcB_write_data = False
        rec.breakpoint_UcA_extract_view_warning = False
        rec.breakpoint_UcA_extract_module_get_min_max_crop = False
        rec.breakpoint_UcA_extract_view_first_line = False
        rec.breakpoint_UcA_extract_xml_button = False
        rec.breakpoint_UcA_extract_xml_header = False
        rec.breakpoint_UcA_extract_xml_title = False
        rec.breakpoint_UcA_extract_xml_view_item = False
        rec.breakpoint_UcA_extract_xml_act_window = False
        rec.breakpoint_UcA_extract_xml_div_container = False
        rec.breakpoint_UcB_generate_view_warning = False
        rec.breakpoint_UcB_generate_view_specific_form_item = False
        rec.breakpoint_UcB_generate_xml_view_object = False
        rec.breakpoint_UcB_write_code_model_field = False""",
                    "name": "action_new_project_clear_pause",
                    "param": "self, ctx=None",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    if rec.exec_start_date and rec.exec_stop_date:
        rec.exec_time_duration = (
            rec.exec_stop_date - rec.exec_start_date
        ).total_seconds()
    else:
        rec.exec_time_duration = None""",
                    "name": "_compute_exec_time_duration",
                    "decorator": (
                        '@api.depends("exec_start_date", "exec_stop_date")'
                    ),
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "New project debug", devops_cg_new_project=rec.id, ctx=ctx
    ) as rec_ws:
        has_debug = False
        stage_Uc0 = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_Uc0"
        )
        if rec.stage_id == stage_Uc0:
            rec.config_debug_Uc0 = True
            has_debug = True
        stage_uca = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_uca"
        )
        if rec.stage_id == stage_uca:
            rec.config_debug_UcA = True
            has_debug = True
        stage_ucb = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_ucb"
        )
        if rec.stage_id == stage_ucb:
            rec.config_debug_UcB = True
            has_debug = True
        if has_debug:
            rec.with_context(rec_ws._context).action_new_project()
        else:
            raise exceptions.Warning(
                "Cannot support debug for this stage"
            )""",
                    "name": "action_new_project_debug",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "New project setup IDE", devops_cg_new_project=rec.id, ctx=ctx
    ) as rec_ws:
        if not rec.can_setup_ide:
            continue
        has_bp = rec_ws._context.get(
            "new_project_with_breakpoint", True
        )
        if has_bp:
            lst_name = []
            dct_condition = {}
            # Create breakpoint data
            for field_name, field_value in rec._fields.items():
                if not (
                    field_name.startswith("breakpoint_")
                    and field_value.type == "boolean"
                ):
                    continue
                field_id = getattr(rec, field_name)
                if not field_id:
                    continue
                lst_name.append(field_name)
            if lst_name:
                bp_ids = (
                    self.env["devops.ide.breakpoint"]
                    .search([("name", "in", lst_name)])
                    .exists()
                )
                if len(bp_ids) != len(lst_name):
                    # error, missing breakpoint, search it
                    for name in lst_name:
                        find_it = bp_ids.filtered(
                            lambda a: a.name == name
                        )
                        if not find_it:
                            raise Exception(
                                "Cannot find breakpoint name"
                                f" '{name}'."
                            )
                if bp_ids:
                    rec.add_breakpoint(bp_ids=bp_ids)
        if conf_add_mode:
            rec_ws.ide_pycharm.add_configuration(
                conf_add_mode=conf_add_mode,
                conf_add_db=conf_add_db,
                conf_add_module=conf_add_module,
                conf_add_config_path=conf_add_config_path,
            )""",
                    "name": "action_new_project_setup_IDE",
                    "decorator": "@api.multi",
                    "param": (
                        "self, ctx=None, conf_add_mode=None, conf_add_db=None,"
                        " conf_add_module=None,"
                        " conf_add_config_path='config.conf'"
                    ),
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "Generate new project with CG",
        devops_cg_new_project=rec.id,
        ctx=ctx,
    ) as rec_ws:
        rec.is_pause = False
        rec.exec_start_date = fields.Datetime.now(self)
        rec.has_error = False
        rec.has_warning = False
        stop_exec = False
        count_stage_execute = 0
        id_exec_bundle = rec_ws._context.get("devops_exec_bundle")
        one_stage_only = rec_ws._context.get("one_stage_only", False)
        exec_bundle_parent_id = self.env["devops.exec.bundle"].browse(
            id_exec_bundle
        )
        stage_init_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_init"
        )
        stage_uc0_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_Uc0"
        )
        stage_uca_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_uca"
        )
        stage_ucb_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_ucb"
        )
        # stage_terminate_id = self.env.ref(
        #     "erplibre_devops.devops_cg_new_project_stage_generate_terminate"
        # )

        # Stage INIT
        if rec.stage_id == stage_init_id:
            rec.action_init(rec_ws=rec_ws)
            count_stage_execute += 1

        if one_stage_only and count_stage_execute > 0:
            stop_exec = True
        elif exec_bundle_parent_id.devops_exec_parent_error_ids:
            rec.has_error = True
            stop_exec = True

        # Check if create/update UcA or only run it
        if (
            rec.use_existing_meta_module
            and (
                rec.use_existing_meta_module_uca_only
                or rec.use_existing_meta_module_ucb_only
            )
            # and rec_ws.os_path_exists(
            #     rec.template_path, to_instance=True
            # )
        ):
            if rec.use_existing_meta_module_uca_only:
                rec.stage_id = self.env.ref(
                    "erplibre_devops.devops_cg_new_project_stage_generate_uca"
                )
            elif rec.use_existing_meta_module_ucb_only:
                rec.stage_id = self.env.ref(
                    "erplibre_devops.devops_cg_new_project_stage_generate_ucb"
                )

        # Stage Uc0
        # This stage will create a new UcA or update it
        if not stop_exec and rec.stage_id == stage_uc0_id:
            rec.action_generate_Uc0(rec_ws=rec_ws)
            count_stage_execute += 1

        if one_stage_only and count_stage_execute > 0:
            stop_exec = True
        elif exec_bundle_parent_id.devops_exec_parent_error_ids:
            rec.has_error = True
            stop_exec = True

        # Stage UcA
        if not stop_exec and rec.stage_id == stage_uca_id:
            rec.action_generate_uca(rec_ws=rec_ws)
            count_stage_execute += 1

        if one_stage_only and count_stage_execute > 0:
            stop_exec = True
        elif exec_bundle_parent_id.devops_exec_parent_error_ids:
            rec.has_error = True
            stop_exec = True

        # Stage UcB
        if (
            not rec.use_existing_meta_module_uca_only
            and not stop_exec
            and rec.stage_id == stage_ucb_id
        ):
            rec.action_generate_ucb(rec_ws=rec_ws)
            count_stage_execute += 1

        rec.exec_stop_date = fields.Datetime.now(self)
        rec.execution_finish = True
        if rec.log_error_ids:
            rec.has_error = True
        if rec.log_warning_ids:
            rec.has_warning = True""",
                    "name": "action_new_project",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    ws_param = rec_ws if rec_ws else rec.devops_workspace
    with ws_param.devops_create_exec_bundle(
        "New project generate 1.init", devops_cg_new_project=rec.id
    ) as ws:
        rec.stage_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_init"
        )
        if not ws.os_path_exists(rec.directory, to_instance=True):
            msg_error = f"Path directory '{rec.directory}' not exist."
            raise Exception(msg_error)

        if not rec.directory_cg:
            rec.directory_cg = rec.directory
        if not ws.os_path_exists(rec.directory_cg, to_instance=True):
            msg_error = (
                f"Path cg directory '{rec.directory_cg}' not exist."
            )
            raise Exception(msg_error)

        if not rec.directory_template:
            rec.directory_template = rec.directory
        if not ws.os_path_exists(
            rec.directory_template, to_instance=True
        ):
            msg_error = (
                f"Path template directory '{rec.directory_template}'"
                " not exist."
            )
            raise Exception(msg_error)

        if not rec.module:
            msg_error = "Module name is missing."
            raise Exception(msg_error)

        # Get code_generator name
        if not rec.code_generator_name:
            rec.code_generator_name = f"code_generator_{rec.module}"

        # Get template name
        if not rec.template_name:
            rec.template_name = f"code_generator_template_{rec.module}"

        # TODO copy directory in temp workspace file before update it
        rec.module_path = os.path.join(rec.directory, rec.module)
        is_over = rec.validate_path_ready_to_be_override(
            rec.module, rec.directory, ws, path=rec.module_path
        )
        if not rec.force and not is_over:
            msg_error = (
                f"Cannot generate on module path '{rec.module_path}'"
            )
            raise Exception(msg_error)

        rec.cg_path = os.path.join(
            rec.directory_cg, rec.code_generator_name
        )
        rec.cg_hooks_py = os.path.join(rec.cg_path, "hooks.py")
        if (
            not rec.force
            and not rec.validate_path_ready_to_be_override(
                rec.code_generator_name,
                rec.directory_cg,
                ws,
                path=rec.cg_path,
            )
        ):
            msg_error = f"Cannot generate on cg path '{rec.cg_path}'"
            raise Exception(msg_error)

        rec.template_path = os.path.join(
            rec.directory_template, rec.template_name
        )
        rec.template_hooks_py = os.path.join(
            rec.template_path, "hooks.py"
        )
        rec.template_manifest_py = os.path.join(
            rec.template_path, "__manifest__.py"
        )
        if (
            not rec.force
            and not rec.validate_path_ready_to_be_override(
                rec.template_name,
                rec.directory_template,
                ws,
                path=rec.template_path,
            )
        ):
            msg_error = (
                "Cannot generate on template path"
                f" '{rec.template_path}'"
            )
            raise Exception(msg_error)

        # Validate code_generator_demo
        rec.code_generator_demo_path = os.path.join(
            CODE_GENERATOR_DIRECTORY, CODE_GENERATOR_DEMO_NAME
        )
        rec.code_generator_demo_hooks_py = os.path.join(
            rec.code_generator_demo_path, "hooks.py"
        )
        rec.code_generator_hooks_path_relative = os.path.join(
            CODE_GENERATOR_DEMO_NAME, "hooks.py"
        )
        if not ws.os_path_exists(
            rec.code_generator_demo_path, to_instance=True
        ):
            msg_error = (
                "code_generator_demo is not accessible"
                f" '{rec.code_generator_demo_path}'"
            )
            raise Exception(msg_error)

        # Update configuration
        config = configparser.ConfigParser()
        config.read(rec.odoo_config)
        addons_path = config.get("options", "addons_path")
        lst_addons_path = addons_path.split(",")
        lst_directory = list(
            {
                rec.directory_cg,
                rec.directory,
                rec.directory_template,
            }
        )
        has_change = False
        for new_addons_path in lst_directory:
            for actual_addons_path in lst_addons_path:
                if not actual_addons_path:
                    continue
                # Validate if not existing and valide is different path
                relative_actual_addons_path = os.path.relpath(
                    actual_addons_path
                )
                relative_new_addons_path = os.path.relpath(
                    new_addons_path
                )
                if (
                    relative_actual_addons_path
                    == relative_new_addons_path
                ):
                    break
            else:
                lst_addons_path.insert(0, new_addons_path)
                has_change = True
        if has_change:
            config.set(
                "options", "addons_path", ",".join(lst_addons_path)
            )
        temp_file = tempfile.mktemp()
        with open(temp_file, "w") as configfile:
            config.write(configfile)
        _logger.info(f"Create temporary config file: {temp_file}")
        rec.config_path = temp_file

        rec.stage_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_Uc0"
        )""",
                    "name": "action_init",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, rec_ws=None",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    ws_param = rec_ws if rec_ws else rec.devops_workspace
    with ws_param.devops_create_exec_bundle(
        "New project generate 2.Uc0", devops_cg_new_project=rec.id
    ) as ws:
        rec.stage_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_Uc0"
        )

        v_dct_log_error = {
            "new_project_id": rec.id,
        }

        if not (
            rec.validate_path_ready_to_be_override(
                CODE_GENERATOR_DEMO_NAME, CODE_GENERATOR_DIRECTORY, ws
            )
            and self.search_and_replace_file(
                rec.code_generator_demo_hooks_py,
                [
                    (
                        KEY_REPLACE_CODE_GENERATOR_DEMO
                        % CODE_GENERATOR_DEMO_NAME,
                        KEY_REPLACE_CODE_GENERATOR_DEMO
                        % rec.template_name,
                    ),
                    (
                        'value["enable_sync_template"] = False',
                        'value["enable_sync_template"] = True',
                    ),
                    (
                        "# path_module_generate ="
                        " os.path.normpath(os.path.join(os.path.dirname(__file__),"
                        " '..'))",
                        "path_module_generate ="
                        f' "{rec.directory_template}"',
                    ),
                    (
                        '# "path_sync_code": path_module_generate,',
                        '"path_sync_code": path_module_generate,',
                    ),
                    (
                        '# value["template_module_path_generated_extension"]'
                        ' = "."',
                        'value["template_module_path_generated_extension"]'
                        f' = "{rec.directory_cg}"',
                    ),
                ],
                v_dct_log_error=v_dct_log_error,
            )
        ):
            # TODO create a variable in CG to change path of module generated from uc0
            return False

        if not rec.bd_name_demo:
            rec.bd_name_demo = (
                f"new_project_code_generator_demo_{uuid.uuid4()}"[:63]
            )

        if rec.new_project_with_code_generator:
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.bd_name_demo}"
            )
        else:
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.bd_name_demo} --restore_image"
                " addons_install_code_generator_basic"
            )
        _logger.info(cmd)
        exec_id = ws.execute(cmd=cmd, to_instance=True)
        rec.has_error = bool(exec_id.devops_exec_error_ids.exists())
        if rec.has_error:
            _logger.info("Exit new project")
            continue

        # TODO need pause if ask? and continue if ask
        if rec.can_setup_ide:
            _logger.info(
                "========= Ask stop, setup pycharm and exit ========="
            )
            rec.is_pause = True
            # rec.config_path is a temporary file, it will not work. Use default config instead
            rec.action_new_project_setup_IDE(
                conf_add_mode="install",
                conf_add_db=rec.bd_name_demo,
                conf_add_module="code_generator_demo",
                # conf_add_config_path=rec.config_path,
            )
            continue

        _logger.info(
            "========= GENERATE code_generator_demo ========="
        )

        if rec.active_coverage:
            cmd = (
                "./script/addons/coverage_install_addons_dev.sh"
                f" {rec.bd_name_demo} code_generator_demo"
                f" {rec.config_path}"
            )
        else:
            cmd = (
                "./script/addons/install_addons_dev.sh"
                f" {rec.bd_name_demo} code_generator_demo"
                f" {rec.config_path}"
            )
        exec_id = ws.with_context(
            devops_cg_new_project=rec.id
        ).execute(cmd=cmd, to_instance=True)
        rec.has_error = bool(exec_id.devops_exec_error_ids.exists())
        if rec.has_error:
            _logger.info("Exit new project")
            continue

        if not self.keep_bd_alive:
            cmd = (
                "./.venv/bin/python3 ./odoo/odoo-bin db --drop"
                f" --database {rec.bd_name_demo}"
            )
            _logger.info(cmd)
            ws.execute(cmd=cmd, to_instance=True)

        # Revert code_generator_demo
        self.restore_git_code_generator_demo(
            CODE_GENERATOR_DIRECTORY,
            rec.code_generator_hooks_path_relative,
        )

        # Validate
        if not ws.os_path_exists(rec.template_path, to_instance=True):
            raise Exception(
                f"Module template not exists '{rec.template_path}'"
            )
        else:
            _logger.info(
                f"Module template exists '{rec.template_path}'"
            )
        if not rec.has_error:
            rec.stage_id = self.env.ref(
                "erplibre_devops.devops_cg_new_project_stage_generate_uca"
            )""",
                    "name": "action_generate_Uc0",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, rec_ws=None",
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    ws_param = rec_ws if rec_ws else rec.devops_workspace
    with ws_param.devops_create_exec_bundle(
        "New project generate 3.UcA", devops_cg_new_project=rec.id
    ) as ws:
        rec.stage_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_uca"
        )
        v_dct_log_error = {
            "new_project_id": rec.id,
        }
        # Execute all
        if not rec.bd_name_template:
            rec.bd_name_template = (
                f"new_project_code_generator_template_{uuid.uuid4()}"[
                    :63
                ]
            )

        if rec.new_project_with_code_generator:
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.bd_name_template}"
            )
        else:
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.bd_name_template} --restore_image"
                " addons_install_code_generator_basic"
            )
        exec_id = ws.with_context(
            devops_cg_new_project=rec.id
        ).execute(cmd=cmd, to_instance=True)
        rec.has_error = bool(exec_id.devops_exec_error_ids.exists())
        if rec.has_error:
            _logger.info("Exit new project")
            continue
        _logger.info(cmd)
        _logger.info(
            f"========= GENERATE {rec.template_name} ========="
        )
        # TODO maybe the module exist somewhere else
        if ws.os_path_exists(rec.module_path, to_instance=True):
            # Install module before running code generator
            cmd = (
                "./script/code_generator/search_class_model.py"
                f" --quiet -d {rec.module_path} -t {rec.template_path}"
            )
            if rec.uca_option_with_inherit:
                cmd += " --with_inherit"
            _logger.info(cmd)
            exec_id = ws.with_context(
                devops_cg_new_project=rec.id
            ).execute(cmd=cmd, to_instance=True)
            rec.has_error = bool(
                exec_id.devops_exec_error_ids.exists()
            )
            if rec.has_error:
                _logger.info("Exit new project")
                continue

        lst_template_hooks_py_replace = []
        lst_template_manifest_py_replace = []
        # Extract module dependency
        # ir_module_id = self.env["ir.module.module"].search(
        #     [("name", "=", rec.module)], limit=1
        # )
        # if ir_module_id:
        #     lst_depend_module = [
        #         a.name for a in ir_module_id.dependencies_id
        #     ]
        # else:
        #     lst_depend_module = []
        lst_depend_module = []
        if rec.mode_view in ["same_view", "new_view"]:
            lst_template_hooks_py_replace.append(
                (
                    'value["enable_template_wizard_view"] = False',
                    'value["enable_template_wizard_view"] = True',
                )
            )
            if rec.mode_view == "new_view":
                lst_template_hooks_py_replace.append(
                    (
                        'value["force_generic_template_wizard_view"] ='
                        " False",
                        'value["force_generic_template_wizard_view"] ='
                        " True",
                    )
                )
        if rec.config_uca_enable_export_data:
            lst_template_hooks_py_replace.append(
                (
                    'value["enable_template_website_snippet_view"] ='
                    " False",
                    f'value["enable_template_website_snippet_view"] ='
                    f" False\\n       "
                    f' value["template_auto_export_data"] = True\\n    '
                    f'    value["template_auto_export_data_exclude_model"]'
                    f" = 'devops.db.image; devops.exec;"
                    f" devops.exec.bundle; devops.ide.pycharm;"
                    f" devops.log.makefile.target;"
                    f" devops.workspace.terminal; devops.workspace;"
                    f" devops.test.case; devops.test.plan;"
                    f" erplibre.mode; erplibre.mode.env;"
                    f" erplibre.mode.exec; erplibre.mode.source;"
                    f" erplibre.mode.version.base;"
                    f" erplibre.mode.version.erplibre;"
                    f" ir.actions.act_url; ir.actions.act_window;"
                    f" ir.actions.report; ir.actions.server;"
                    f" ir.actions.todo; ir.model; ir.model.constraint;"
                    f" ir.model.fields; ir.model.server_constrain;"
                    f" ir.module.module; ir.ui.menu; ir.ui.view;"
                    f" res.groups'",
                )
            )
        else:
            lst_template_hooks_py_replace.append(
                (
                    'value["enable_template_website_snippet_view"] ='
                    " False",
                    f'value["enable_template_website_snippet_view"] ='
                    f" False\\n       "
                    f' value["template_ignore_export_data"] ='
                    f" True",
                )
            )
        if rec.mode_view_snippet in ["enable_snippet"]:
            lst_template_hooks_py_replace.append(
                (
                    'value["enable_template_website_snippet_view"] ='
                    " False",
                    'value["enable_template_website_snippet_view"] ='
                    f" {rec.mode_view_snippet_enable_template_website_snippet_view}\\n"
                    "       "
                    ' value["template_generate_website_snippet_generic_model"]'
                    f' = "{rec.mode_view_snippet_template_generate_website_snippet_generic_mdl}"\\n'
                    "       "
                    ' value["template_generate_website_snippet_controller_feature"]'
                    f' = "{rec.mode_view_snippet_template_generate_website_snippet_ctrl_featur}"\\n'
                    "       "
                    ' value["template_generate_website_enable_javascript"]'
                    f" = {rec.mode_view_snippet_template_generate_website_enable_javascript}\\n"
                    "       "
                    ' value["template_generate_website_snippet_type"]'
                    f' = "{rec.mode_view_snippet_template_generate_website_snippet_type}"',
                )
            )

            lst_template_manifest_py_replace.append(
                (
                    '"depends": [',
                    '"depends": [\\n       '
                    ' "code_generator_website_snippet",',
                )
            )

            lst_depend_module.append("code_generator_website_snippet")

        if lst_depend_module:
            l_d = [f'"{a}"' for a in lst_depend_module]
            lst_template_hooks_py_replace.append(
                (
                    "code_generator_id.add_module_dependency(lst_depend_module)",
                    f'lst_depend_module.extend([{", ".join(l_d)}])\\n'
                    "       "
                    " code_generator_id.add_module_dependency(lst_depend_module)",
                )
            )

        # Add model from config
        if self.config:
            config = json.loads(self.config)
            config_lst_model = config.get("model")
            str_lst_model = "; ".join(
                [a.get("name") for a in config_lst_model]
            )

            has_error = False
            try:
                self.env[
                    "devops.ide.breakpoint"
                ].get_no_line_breakpoint(
                    'value\["template_model_name"\] =',
                    rec.template_hooks_py,
                    ws,
                )
            except Exception:
                _logger.warning(
                    "Cannot find template_model_name"
                    f" configuration into {rec.template_hooks_py}"
                )
                has_error = True
            if not has_error and str_lst_model:
                old_str = 'value["template_model_name"] ='
                new_str = (
                    'value["template_model_name"] ='
                    f' "{str_lst_model};"\\n       '
                    ' value["template_model_name"] +='
                )
                lst_template_hooks_py_replace.append(
                    (old_str, new_str)
                )
            if not has_error and rec.model_to_remove:
                for (
                    model_to_remove
                ) in rec.model_to_remove.strip().split(";"):
                    old_str = f"{model_to_remove};"
                    new_str = ""
                    lst_template_hooks_py_replace.append(
                        (old_str, new_str)
                    )

        if lst_template_hooks_py_replace:
            self.search_and_replace_file(
                rec.template_hooks_py,
                lst_template_hooks_py_replace,
                v_dct_log_error=v_dct_log_error,
            )
        if lst_template_manifest_py_replace:
            self.search_and_replace_file(
                rec.template_manifest_py,
                lst_template_manifest_py_replace,
                v_dct_log_error=v_dct_log_error,
            )

        # TODO maybe the module exist somewhere else
        if ws.os_path_exists(rec.module_path, to_instance=True):
            # TODO do we need to diagnostic installing module?

            if rec.active_coverage:
                cmd = (
                    "./script/addons/coverage_install_addons_dev.sh"
                    f" {rec.bd_name_template} {rec.module} {rec.config_path}"
                )
            else:
                cmd = (
                    "./script/addons/install_addons_dev.sh"
                    f" {rec.bd_name_template} {rec.module} {rec.config_path}"
                )
            _logger.info(cmd)
            exec_id = ws.with_context(
                devops_cg_new_project=rec.id
            ).execute(cmd=cmd, to_instance=True)
            rec.has_error = bool(
                exec_id.devops_exec_error_ids.exists()
            )
            if rec.has_error:
                _logger.info("Exit new project")
                continue

        # TODO need pause if ask? and continue if ask
        if rec.can_setup_ide:
            _logger.info(
                "========= Ask stop, setup pycharm and exit ========="
            )
            rec.is_pause = True
            # rec.config_path is a temporary file, it will not work. Use default config instead
            rec.action_new_project_setup_IDE(
                conf_add_mode="install",
                conf_add_db=rec.bd_name_template,
                conf_add_module=rec.template_name,
                # conf_add_config_path=rec.config_path,
            )
            continue

        if rec.active_coverage:
            cmd = (
                "./script/addons/coverage_install_addons_dev.sh"
                f" {rec.bd_name_template} {rec.template_name} {rec.config_path}"
            )
        else:
            cmd = (
                "./script/addons/install_addons_dev.sh"
                f" {rec.bd_name_template}"
                f" {rec.template_name} {rec.config_path}"
            )
        _logger.info(cmd)
        exec_id = ws.with_context(
            devops_cg_new_project=rec.id
        ).execute(cmd=cmd, to_instance=True)

        rec.has_error = bool(exec_id.devops_exec_error_ids.exists())

        if not self.keep_bd_alive:
            cmd = (
                "./.venv/bin/python3 ./odoo/odoo-bin db --drop"
                f" --database {rec.bd_name_template}"
            )
            _logger.info(cmd)
            ws.execute(cmd=cmd, to_instance=True)

        # Validate
        if not ws.os_path_exists(rec.cg_path, to_instance=True):
            raise Exception(f"Module cg not exists '{rec.cg_path}'")
        else:
            _logger.info(f"Module cg exists '{rec.cg_path}'")

        if not rec.has_error:
            rec.stage_id = self.env.ref(
                "erplibre_devops.devops_cg_new_project_stage_generate_ucb"
            )""",
                    "name": "action_generate_uca",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, rec_ws=None",
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": '''for rec in self:
    ws_param = rec_ws if rec_ws else rec.devops_workspace
    with ws_param.devops_create_exec_bundle(
        "New project generate 4.UcB", devops_cg_new_project=rec.id
    ) as ws:
        rec.stage_id = self.env.ref(
            "erplibre_devops.devops_cg_new_project_stage_generate_ucb"
        )
        v_dct_log_error = {
            "new_project_id": rec.id,
        }
        if not rec.bd_name_generator:
            rec.bd_name_generator = (
                f"new_project_code_generator_{uuid.uuid4()}"[:63]
            )

        if rec.new_project_with_code_generator:
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.bd_name_generator}"
            )
        else:
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.bd_name_generator} --restore_image"
                " addons_install_code_generator_basic"
            )
        _logger.info(cmd)
        exec_id = ws.with_context(
            devops_cg_new_project=rec.id
        ).execute(cmd=cmd, to_instance=True)
        _logger.info(
            f"========= GENERATE {rec.code_generator_name} ========="
        )

        rec.has_error = bool(exec_id.devops_exec_error_ids.exists())
        if rec.has_error:
            _logger.info("Exit new project")
            continue

        # Add field from config
        if self.config:
            lst_update_cg = []
            config = json.loads(self.config)
            config_lst_model = config.get("model")
            for model in config_lst_model:
                model_name = model.get("name")
                dct_field = {}
                # TODO add here nomenclator to each model
                for a in model.get("fields"):
                    dct_value = {"ttype": a.get("type")}
                    if "relation" in a.keys():
                        dct_value["relation"] = a["relation"]
                    if "relation_field" in a.keys():
                        dct_value["relation_field"] = a[
                            "relation_field"
                        ]
                    if "description" in a.keys():
                        dct_value["field_description"] = a[
                            "description"
                        ]
                    dct_field[a.get("name")] = dct_value
                if "name" not in dct_field.keys():
                    dct_field["name"] = {"ttype": "char"}
                old_str = (
                    f'model_model = "{model_name}"\\n       '
                    " code_generator_id.add_update_model(model_model)"
                )
                new_str = (
                    f'model_model = "{model_name}"\\n        dct_field'
                    f" = {dct_field}\\n       "
                    " code_generator_id.add_update_model(model_model,"
                    " dct_field=dct_field)"
                )
                lst_update_cg.append((old_str, new_str))

            # Force add menu and access
            # if rec.mode_view in ["same_view", "new_view"]:
            #     lst_update_cg.append(
            #         ('"disable_generate_menu": True,', "")
            #     )
            # lst_update_cg.append(
            #     ('"disable_generate_access": True,', "")
            # )
            #             # TODO add option nomenclature
            #             if True:
            #                 # Add option "nomenclature", this will export data from all generated model
            #                 #  This is a mess when inherit another model
            #                 txt_replace = 'env["code.generator.writer"].create(value)'
            #                 txt_replace_to = f"""        values = {
            #     "s_data2export": "nomenclator",
            # }
            # event_config = env["res.config.settings"].sudo().create(values)
            # event_config.execute()\\n        """ + txt_replace
            #                 lst_update_cg.append((txt_replace, txt_replace_to))
            self.search_and_replace_file(
                rec.cg_hooks_py,
                lst_update_cg,
                v_dct_log_error=v_dct_log_error,
            )

        # TODO need pause if ask? and continue if ask
        if rec.can_setup_ide:
            _logger.info(
                "========= Ask stop, setup pycharm and exit ========="
            )
            rec.is_pause = True
            # rec.config_path is a temporary file, it will not work. Use default config instead
            rec.action_new_project_setup_IDE(
                conf_add_mode="install",
                conf_add_db=rec.bd_name_generator,
                conf_add_module=rec.code_generator_name,
                # conf_add_config_path=rec.config_path,
            )
            continue

        if rec.active_coverage:
            cmd = (
                "./script/addons/coverage_install_addons_dev.sh"
                f" {rec.bd_name_generator} {rec.code_generator_name} {rec.config_path}"
            )
        else:
            cmd = (
                "./script/addons/install_addons_dev.sh"
                f" {rec.bd_name_generator} {rec.code_generator_name} {rec.config_path}"
            )
        _logger.info(cmd)
        exec_id = ws.with_context(
            devops_cg_new_project=rec.id
        ).execute(
            cmd=cmd,
            to_instance=True,
        )

        rec.has_error = bool(exec_id.devops_exec_error_ids.exists())

        if not self.keep_bd_alive:
            cmd = (
                "./.venv/bin/python3 ./odoo/odoo-bin db --drop"
                f" --database {rec.bd_name_generator}"
            )
            _logger.info(cmd)
            ws.execute(cmd=cmd, to_instance=True)

        # Validate
        if not ws.os_path_exists(rec.module_path, to_instance=True):
            raise Exception(f"Module not exists '{rec.module_path}'")
        else:
            _logger.info(f"Module exists '{rec.module_path}'")

        if not rec.has_error:
            rec.stage_id = rec.env.ref(
                "erplibre_devops.devops_cg_new_project_stage_generate_terminate"
            )''',
                    "name": "action_generate_ucb",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, rec_ws=None",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """if not path:
    path = os.path.join(directory, name)
if not ws.os_path_exists(path, to_instance=True):
    return True
# Check if in git
# TODO complete me, need to check into instance
try:
    git_repo = Repo(directory)
except NoSuchPathError:
    raise Exception(f"Directory not existing '{directory}'")
except InvalidGitRepositoryError:
    raise Exception(
        f"The path '{path}' exist, but no git repo, use force to"
        " ignore it."
    )

if self.stop_execution_if_env_not_clean:
    status = git_repo.git.status(name, porcelain=True)
    if status:
        msg = (
            f"The directory '{path}' has git difference, use force to"
            " ignore it."
        )
        raise Exception(msg)
return True""",
                    "name": "validate_path_ready_to_be_override",
                    "decorator": "@api.model",
                    "param": "self, name, directory, ws, path=''",
                    "sequence": 12,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """# TODO support to remote
try:
    git_repo = Repo(code_generator_demo_path)
except NoSuchPathError:
    raise Exception(
        f"Directory not existing '{code_generator_demo_path}'"
    )
except InvalidGitRepositoryError:
    raise Exception(
        f"The path '{code_generator_demo_path}' exist, but no git repo"
    )

git_repo.git.restore(relative_path)""",
                    "name": "restore_git_code_generator_demo",
                    "decorator": "@staticmethod",
                    "param": "code_generator_demo_path, relative_path",
                    "sequence": 13,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """# lst_bp_id is deprecated
# bp_id is deprecated, use instead bp_ids
for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "New project add breakpoint", devops_cg_new_project=rec.id
    ) as rec_ws:
        lst_no_line = []
        if bp_ids:
            for rec_bp_id in bp_ids:
                result = rec_bp_id.get_breakpoint_info(
                    rec_ws, new_project_id=rec, condition=condition
                )
                lst_no_line.extend(result)
        elif lst_bp_id:
            for rec_bp_id, s_cond in lst_bp_id:
                result = rec_bp_id.get_breakpoint_info(
                    rec_ws, new_project_id=rec, condition=s_cond
                )
                lst_no_line.extend(result)
        elif bp_id:
            lst_no_line = bp_id.get_breakpoint_info(
                rec_ws, new_project_id=rec, condition=condition
            )
        elif file:
            file_path = os.path.normpath(
                os.path.join(
                    rec_ws.folder,
                    file,
                )
            )
            if key:
                lst_no_line = (
                    file_path,
                    self.env[
                        "devops.ide.breakpoint"
                    ].get_no_line_breakpoint(key, file_path, rec_ws),
                    condition,
                )
            elif no_line:
                lst_no_line = [(file_path, int(no_line), condition)]

        if lst_no_line:
            for filename, lst_line, s_cond in lst_no_line:
                rec_ws.ide_pycharm.add_breakpoint(
                    filename,
                    lst_line,
                    condition=s_cond,
                    minus_1_line=True,
                )
        else:
            _logger.warning(
                "Missing no_line to method add_breakpoint. Or specify"
                " a key to research from file."
            )""",
                    "name": "add_breakpoint",
                    "decorator": "@api.multi",
                    "param": (
                        "self, bp_id=None, bp_ids=None, lst_bp_id=None,"
                        " file=None, key=None, no_line=None, condition=None"
                    ),
                    "sequence": 14,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": '''"""
lst_search_and_replace is a list of tuple, first item is search, second is replace
"""
# TODO open file from workspace and not from this execution
# TODO validate file exist before try to open it
with open(filepath, "r") as file:
    txt = file.read()
    for search, replace in lst_search_and_replace:
        if search not in txt:
            msg_error = f"Cannot find '{search}' in file '{filepath}'"
            v_dct_log_error["name"] = msg_error
            self.env["devops.log.error"].create(v_dct_log_error)
            continue
            # raise Exception(msg_error)
        txt = txt.replace(search, replace)
with open(filepath, "w") as file:
    file.write(txt)
return True''',
                    "name": "search_and_replace_file",
                    "param": (
                        "self, filepath, lst_search_and_replace,"
                        " v_dct_log_error"
                    ),
                    "sequence": 15,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "New project kill PyCharm", devops_cg_new_project=rec.id
    ) as rec_ws:
        rec_ws.ide_pycharm.action_kill_pycharm()""",
                    "name": "action_kill_pycharm",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 16,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "New project start PyCharm", devops_cg_new_project=rec.id
    ) as rec_ws:
        rec_ws.ide_pycharm.action_start_pycharm(
            ctx=ctx, new_project_id=self
        )""",
                    "name": "action_start_pycharm",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 17,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_cg_new_project.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Cg New Project Stage
        model_model = "devops.cg.new_project.stage"
        model_name = "devops_cg_new_project_stage"
        dct_model = {
            "description": "Stage new project for CG project",
            "order": "sequence, name, id",
        }
        dct_field = {
            "description": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "field_description": "Description",
                "ttype": "char",
            },
            "fold": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 6,
                "field_description": "Folded in Pipeline",
                "help": (
                    "This stage is folded in the kanban view when there are no"
                    " records in that stage to display."
                ),
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Name",
                "ttype": "char",
            },
            "sequence": {
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 10,
                "default": 10,
                "field_description": "Sequence",
                "force_widget": "handle",
                "help": "Used to order new project stages. Lower is better.",
                "ttype": "integer",
            },
        }
        model_devops_cg_new_project_stage = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import logging

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_cg_new_project_stage.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Cg Test Case
        model_model = "devops.cg.test.case"
        model_name = "devops_cg_test_case"
        dct_model = {
            "description": "devops_cg_test_case",
        }
        dct_field = {
            "file_to_restore": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 16,
                "field_description": "File To Restore",
                "ttype": "char",
            },
            "file_to_restore_origin": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 14,
                "field_description": "File To Restore Origin",
                "ttype": "boolean",
            },
            "generated_path": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "field_description": "Generated Path",
                "ttype": "char",
            },
            "install_path": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Install Path",
                "ttype": "char",
            },
            "module_generated": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Module Generated",
                "relation": "devops.cg.module",
                "ttype": "many2many",
            },
            "module_init_ids": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Module Init",
                "relation": "devops.cg.module",
                "ttype": "many2many",
            },
            "module_search_class": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 7,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Module Search Class",
                "relation": "devops.cg.module",
                "ttype": "many2many",
            },
            "module_tested": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Module Tested",
                "relation": "devops.cg.module",
                "ttype": "many2many",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "note": {
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 22,
                "field_description": "Note",
                "ttype": "text",
            },
            "path_generated": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 11,
                "field_description": "Path Generated",
                "ttype": "char",
            },
            "path_meta": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 10,
                "field_description": "Path Meta",
                "ttype": "char",
            },
            "path_module_check": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 16,
                "field_description": "Path Module Check",
                "ttype": "char",
            },
            "restore_db_image_name": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 13,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Restore Db Image Name",
                "help": "TODO use many2one from image db.",
                "ttype": "char",
            },
            "run_mode": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 19,
                "default": "command",
                "field_description": "Run Mode",
                "help": (
                    "Option 'command' to run a script or 'test_exec' to run"
                    " test script."
                ),
                "selection": (
                    "[('command', 'Run command'), ('test_exec', 'Run test"
                    " exec')]"
                ),
                "ttype": "selection",
            },
            "script_after_init_check": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 15,
                "code_generator_tree_view_sequence": 18,
                "field_description": "Script After Init Check",
                "ttype": "char",
            },
            "script_path": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 18,
                "field_description": "Script Path",
                "help": "For run_mode command",
                "ttype": "char",
            },
            "search_class_module": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 12,
                "field_description": "Search Class Module",
                "ttype": "char",
            },
            "sequence_test": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 21,
                "field_description": "Sequence Test",
                "help": "Can change sequence order to run test.",
                "ttype": "integer",
            },
            "test_name": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 17,
                "code_generator_tree_view_sequence": 19,
                "field_description": "Test Name",
                "ttype": "char",
            },
            "type_test": {
                "code_generator_sequence": 20,
                "default": "run_c",
                "field_description": "Type Test",
                "help": (
                    "Type of test to run. gen_uca : Execute a template to"
                    " generate a code generator module.gen_ucb : Execute code"
                    " generator to generate a module.run_c : Run module to"
                    " check to execution error."
                ),
                "selection": (
                    "[('gen_ucb', 'Generate UcB'), ('gen_uca', 'Generate"
                    " UcA'), ('run_c', 'Run module')]"
                ),
                "ttype": "selection",
            },
        }
        model_devops_cg_test_case = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import asyncio
import configparser
import os
import sys
# import git
# from colorama import Fore
import tempfile
import time
import uuid
from typing import Any, Coroutine, Tuple

import aioshutil

from odoo import _, api, fields, models

# TODO use system instead
# Get root of ERPLibre
new_path = os.path.normpath(
    os.path.join(os.path.dirname(__file__), "..", "..", "..", "..")
)
sys.path.append(new_path)

from script import lib_asyncio

lst_ignore_warning = [
    "have the same label:",
    "odoo.addons.code_generator.extractor_module_file: Ignore next error about"
    " ALTER TABLE DROP CONSTRAINT.",
]

lst_ignore_error = [
    "fetchmail_notify_error_to_sender",
    'odoo.sql_db: bad query: ALTER TABLE "db_backup" DROP CONSTRAINT'
    ' "db_backup_db_backup_name_unique"',
    'ERROR: constraint "db_backup_db_backup_name_unique" of relation'
    ' "db_backup" does not exist',
    'odoo.sql_db: bad query: ALTER TABLE "db_backup" DROP CONSTRAINT'
    ' "db_backup_db_backup_days_to_keep_positive"',
    'ERROR: constraint "db_backup_db_backup_days_to_keep_positive" of relation'
    ' "db_backup" does not exist',
    "odoo.addons.code_generator.extractor_module_file: Ignore next error about"
    " ALTER TABLE DROP CONSTRAINT.",
]""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_cg_test_case.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Code Todo
        model_model = "devops.code.todo"
        model_name = "devops_code_todo"
        dct_model = {
            "description": "Associate to a TODO into a file code.",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "filename": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Filename",
                "ttype": "char",
            },
            "ide_breakpoint": {
                "code_generator_sequence": 11,
                "field_description": "Ide Breakpoint",
                "help": "Associate a breakpoint to this execution.",
                "relation": "devops.ide.breakpoint",
                "ttype": "many2one",
            },
            "lineno": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Lineno",
                "ttype": "integer",
            },
            "module_id": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Module",
                "relation": "devops.cg.module",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Name",
                "ttype": "char",
            },
            "path_absolute": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 7,
                "field_description": "Path Absolute",
                "ttype": "char",
            },
            "path_module": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Path Module",
                "ttype": "char",
            },
            "sequence": {
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 10,
                "default": 10,
                "field_description": "Sequence",
                "force_widget": "handle",
                "ttype": "integer",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 10,
                "code_generator_tree_view_sequence": 16,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
        }
        model_devops_code_todo = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import os

from odoo import _, api, fields, models""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_code_todo.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """ws_id = self.env["devops.workspace"].search(
    [("is_me", "=", True)], limit=1
)
if not ws_id:
    return
for o_rec in self:
    with ws_id.devops_create_exec_bundle("Open file IDE") as rec_ws:
        if o_rec.ide_breakpoint:
            id_ide_breakpoint = o_rec.ide_breakpoint.id
        else:
            bp_filename = os.path.join(
                o_rec.path_module, o_rec.filename
            )
            bp_value = {
                "name": "breakpoint_exec",
                "description": "TODO",
                "filename": bp_filename,
                "no_line": o_rec.lineno,
                "keyword": o_rec.name,
                "ignore_test": True,
                "generated_by_execution": True,
            }
            # TODO maybe check if already exist?
            ide_breakpoint = self.env["devops.ide.breakpoint"].create(
                bp_value
            )
            id_ide_breakpoint = ide_breakpoint.id

        rec_ws.with_context(
            breakpoint_id=id_ide_breakpoint
        ).ide_pycharm.action_start_pycharm()""",
                    "name": "open_file_ide",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_code_todo.id,
                },
                {
                    "code": """self.env["devops.code.todo"].search([]).write({"active": False})
cg_module_ids = self.env["devops.cg.module"].search([])
for cg_module in cg_module_ids:
    exec_id = wp_id.execute(
        cmd=(
            "./script/addons/check_addons_exist.py --output_path -m"
            f" {cg_module.name}"
        ),
        run_into_workspace=True,
    )
    path_absolute = exec_id.log_all.strip()
    path_module = (
        path_absolute[len(wp_id.folder) + 1 :]
        if path_absolute.startswith(wp_id.folder)
        else path_absolute
    )
    cmd = (
        'grep -IE "# ?TODO" --color=never -rn'
        ' --exclude-dir={.git,__pycache__} --exclude="*.pyc"'
        f' {path_absolute}|egrep -v "TODO HUMAN"'
    )
    exec_id = wp_id.execute(
        cmd=cmd,
        run_into_workspace=True,
        error_on_status=False,
    )
    if exec_id.exec_status == 2:
        raise Exception(exec_id.log_all)
    if exec_id.exec_status == 1:
        # Cannot found
        continue
    for todo_line in exec_id.log_all.strip().split("\\n"):
        split_result = todo_line.split(":", maxsplit=2)
        if len(split_result) != 3:
            raise Exception(
                "Cannot extract filename and line number from todo"
                f" log : {todo_line}"
            )
        path_abs_file_name, lineno, name = split_result
        lineno = int(lineno)
        filename = (
            path_abs_file_name[len(path_absolute) + 1 :]
            if path_abs_file_name.startswith(path_absolute)
            else todo_line
        )
        todo_value = {
            "name": name,
            "filename": filename,
            "lineno": lineno,
            "path_absolute": path_absolute,
            "path_module": path_module,
            "workspace_id": wp_id.id,
            "module_id": cg_module.id,
        }
        todo_id = self.env["devops.code.todo"].create(todo_value)""",
                    "name": "parse_workspace",
                    "decorator": "@api.multi",
                    "param": "self, wp_id",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_code_todo.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Db Image
        model_model = "devops.db.image"
        model_name = "devops_db_image"
        dct_model = {
            "description": "DB image fast restoration",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "path": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Path",
                "ttype": "char",
            },
        }
        model_devops_db_image = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """from odoo import _, api, exceptions, fields, models, tools""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_db_image.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Deploy Vm
        model_model = "devops.deploy.vm"
        model_name = "devops_deploy_vm"
        dct_model = {
            "description": "devops_deploy_vm",
        }
        dct_field = {
            "has_vm_exec_running": {
                "code_generator_compute": "_compute_has_vm_exec_running",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 11,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Has Vm Exec Running",
                "store": True,
                "ttype": "boolean",
            },
            "identifiant": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Identifiant",
                "ttype": "char",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Name",
                "ttype": "char",
            },
            "os": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 7,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Os",
                "ttype": "char",
            },
            "provider": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Provider",
                "ttype": "char",
            },
            "system_id": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 16,
                "field_description": "System",
                "relation": "devops.system",
                "ttype": "many2one",
            },
            "vm_description_json": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 6,
                "field_description": "Vm Description Json",
                "ttype": "char",
            },
            "vm_exec_last_id": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 12,
                "code_generator_tree_view_sequence": 11,
                "field_description": "VM last exec",
                "relation": "devops.deploy.vm.exec",
                "ttype": "many2one",
            },
            "vm_info": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 5,
                "field_description": "Vm Info",
                "ttype": "char",
            },
            "vm_ssh_host": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 4,
                "field_description": "Vm Ssh Host",
                "ttype": "char",
            },
            "workspace_ids": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 10,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Workspaces",
                "relation": "devops.workspace",
                "ttype": "many2many",
            },
        }
        model_devops_deploy_vm = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import logging
import time

from odoo import _, api, fields, models

_logger = logging.getLogger(__name__)
try:
    import paramiko
except ImportError:  # pragma: no cover
    _logger.debug("Cannot import paramiko")""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_deploy_vm.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """for rec in self:
    rec.has_vm_exec_running = (
        rec.vm_exec_last_id and rec.vm_exec_last_id.is_running
    )""",
                    "name": "_compute_has_vm_exec_running",
                    "decorator": (
                        '@api.depends("vm_exec_last_id",'
                        ' "vm_exec_last_id.is_running")'
                    ),
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_deploy_vm.id,
                },
                {
                    "code": """for rec in self:
    # TODO use default workspace from system for contexte dev
    if not rec.system_id:
        _logger.warning(
            f"Missing system_id into devops.deploy.vm id {rec.id}"
        )
        continue
    cmd = f"vboxmanage startvm {rec.identifiant} --type gui"
    out, status = rec.system_id.execute_with_result(
        cmd, None, return_status=True
    )
    if status != 0:
        # TODO raise error execution
        _logger.error(f"Problem to start vm {rec.identifiant} : {out}")
    else:
        _logger.info(f"VM start: {out}")
        value = {
            "vm_id": rec.id,
            "is_running": True,
        }
        vm_exec_id = self.env["devops.deploy.vm.exec"].create(value)
        rec.vm_exec_last_id = vm_exec_id.id
        # Find associate system if exist
        # TODO use one2many instead? Not existing, crash with CG
        system_vm_id = self.env["devops.system"].search(
            [("devops_deploy_vm_id", "=", rec.id)], limit=1
        )
        if system_vm_id:
            max_timeout_total = 60
            max_timeout_system = 5
            max_timeout = max_timeout_total - max_timeout_system
            _logger.info(
                "Waiting system ssh connection test, max"
                f" {max_timeout_total} seconds."
            )
            # Sleep to give time to start network bridge
            time.sleep(max_timeout_system)
            # Start a SSH test
            try:
                # Just open and close the connection
                with system_vm_id.ssh_connection(timeout=max_timeout):
                    _logger.info(
                        "Succeed to open system name"
                        f" {system_vm_id.name}"
                    )
            except paramiko.AuthenticationException as e:
                _logger.error(
                    f"Fail to open system name {system_vm_id.name},"
                    " need good authentification."
                )
                _logger.error(e)
            except Exception as e:
                _logger.error(
                    f"Fail to open system name {system_vm_id.name}"
                )
                _logger.error(e)""",
                    "name": "action_start_vm",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_deploy_vm.id,
                },
                {
                    "code": """for rec in self:
    # TODO use default workspace from system for contexte dev
    if not rec.system_id:
        _logger.warning(
            f"Missing system_id into devops.deploy.vm id {rec.id}"
        )
        continue
    cmd = f"vboxmanage controlvm {rec.identifiant} poweroff"
    out, status = rec.system_id.execute_with_result(
        cmd, None, return_status=True
    )
    if status != 0:
        # TODO raise error execution
        # TODO validate before status before launch poweroff
        # Since note validate before status, believe it's stopped
        if rec.vm_exec_last_id:
            rec.vm_exec_last_id.is_running = False
        _logger.error(f"Problem to stop vm {rec.identifiant} : {out}")
    else:
        _logger.info(f"VM stop: {out}")
        if rec.vm_exec_last_id:
            rec.vm_exec_last_id.is_running = False
        # Find associate system if exist
        # TODO use one2many instead? Not existing, crash with CG
        system_vm_id = self.env["devops.system"].search(
            [("devops_deploy_vm_id", "=", rec.id)], limit=1
        )
        if system_vm_id:
            system_vm_id.ssh_connection_status = False""",
                    "name": "action_stop_vm",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_deploy_vm.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Deploy Vm Exec
        model_model = "devops.deploy.vm.exec"
        model_name = "devops_deploy_vm_exec"
        dct_model = {
            "description": "devops_deploy_vm_exec",
        }
        dct_field = {
            "is_running": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Is Running",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Name",
                "ttype": "char",
            },
            "stage_id": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Stage",
                "relation": "devops.deploy.vm.exec.stage",
                "ttype": "many2one",
            },
            "vm_id": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Vm",
                "relation": "devops.deploy.vm",
                "ttype": "many2one",
            },
        }
        model_devops_deploy_vm_exec = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Devops Deploy Vm Exec Stage
        model_model = "devops.deploy.vm.exec.stage"
        model_name = "devops_deploy_vm_exec_stage"
        dct_model = {
            "description": "devops_deploy_vm_exec_stage",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_deploy_vm_exec_stage = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Devops Deploy Vm Snapshot
        model_model = "devops.deploy.vm.snapshot"
        model_name = "devops_deploy_vm_snapshot"
        dct_model = {
            "description": "devops_deploy_vm_snapshot",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_deploy_vm_snapshot = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Devops Exec
        model_model = "devops.exec"
        model_name = "devops_exec"
        dct_model = {
            "description": "Execution process",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "cmd": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Cmd",
                "ttype": "char",
            },
            "devops_exec_bundle_id": {
                "code_generator_sequence": 22,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Devops Exec Bundle",
                "relation": "devops.exec.bundle",
                "ttype": "many2one",
            },
            "devops_workspace": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 18,
                "code_generator_tree_view_sequence": 16,
                "field_description": "Devops Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "exec_filename": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 9,
                "field_description": "Execution filename",
                "help": "Execution information, where it's called.",
                "ttype": "char",
            },
            "exec_keyword": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 10,
                "field_description": "Execution keyword",
                "help": "Execution information, where it's called.",
                "ttype": "char",
            },
            "exec_line_number": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 11,
                "field_description": "Execution line number",
                "help": "Execution information, where it's called.",
                "ttype": "integer",
            },
            "exec_start_date": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 12,
                "default_lambda": "fields.Datetime.now",
                "field_description": "Execution start date",
                "ttype": "datetime",
            },
            "exec_status": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 5,
                "field_description": "Exec Status",
                "help": "Return status of execution. 0=success",
                "ttype": "integer",
            },
            "exec_stop_date": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 7,
                "field_description": "Execution stop date",
                "ttype": "datetime",
            },
            "exec_time_duration": {
                "code_generator_compute": "_compute_exec_time_duration",
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 8,
                "field_description": "Execution time duration",
                "help": "Time in second, duration of execution",
                "store": True,
                "ttype": "integer",
            },
            "execution_finish": {
                "code_generator_compute": "_compute_execution_finish",
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 15,
                "field_description": "Execution Finish",
                "store": True,
                "ttype": "boolean",
            },
            "folder": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 12,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Folder",
                "ttype": "char",
            },
            "ide_breakpoint": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 13,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Ide Breakpoint",
                "help": "Associate a breakpoint to this execution.",
                "relation": "devops.ide.breakpoint",
                "ttype": "many2one",
            },
            "log_all": {
                "code_generator_compute": "_compute_log_all",
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 26,
                "field_description": "Log All",
                "store": True,
                "ttype": "text",
            },
            "log_stderr": {
                "code_generator_form_simple_view_sequence": 31,
                "code_generator_sequence": 25,
                "field_description": "Log Stderr",
                "ttype": "text",
            },
            "log_stdin": {
                "code_generator_form_simple_view_sequence": 32,
                "code_generator_sequence": 23,
                "field_description": "Log Stdin",
                "ttype": "text",
            },
            "log_stdout": {
                "code_generator_form_simple_view_sequence": 30,
                "code_generator_sequence": 24,
                "field_description": "Log Stdout",
                "ttype": "text",
            },
            "module": {
                "code_generator_sequence": 16,
                "field_description": "Module",
                "ttype": "char",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "new_project_id": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 17,
                "field_description": "New Project",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
            "time_duration_result": {
                "code_generator_compute": "_compute_time_duration_result",
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 14,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Time Duration Result",
                "store": True,
                "ttype": "char",
            },
        }
        model_devops_exec = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import logging
from datetime import timedelta

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_exec.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": '''for rec in self:
    if not isinstance(rec.id, models.NewId):
        rec.name = f"{rec.id}: "
    else:
        rec.name = ""
    rec.name += f"workspace {rec.devops_workspace.id}"
    if rec.module:
        rec.name += f" - {rec.module}"''',
                    "name": "_compute_name",
                    "decorator": (
                        '@api.depends("devops_workspace", "module",'
                        ' "time_duration_result", "execution_finish")'
                    ),
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
                {
                    "code": """for rec in self:
    if rec.exec_start_date and rec.exec_stop_date:
        rec.exec_time_duration = (
            rec.exec_stop_date - rec.exec_start_date
        ).total_seconds()
    else:
        rec.exec_time_duration = False""",
                    "name": "_compute_exec_time_duration",
                    "decorator": (
                        '@api.depends("exec_start_date", "exec_stop_date")'
                    ),
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
                {
                    "code": """for rec in self:
    rec.log_all = ""
    if rec.log_stdout:
        rec.log_all += rec.log_stdout
    if rec.log_stderr:
        rec.log_all += rec.log_stderr""",
                    "name": "_compute_log_all",
                    "decorator": '@api.depends("log_stdout", "log_stderr")',
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
                {
                    "code": """for rec in self:
    # extract error/warning
    # TODO maybe need to fix «has no access rules, consider adding one.»
    lst_item_ignore_error = [
        "fetchmail_notify_error_to_sender",
        'odoo.sql_db: bad query: ALTER TABLE "db_backup" DROP'
        ' CONSTRAINT "db_backup_db_backup_name_unique"',
        'ERROR: constraint "db_backup_db_backup_name_unique" of'
        ' relation "db_backup" does not exist',
        'odoo.sql_db: bad query: ALTER TABLE "db_backup" DROP'
        ' CONSTRAINT "db_backup_db_backup_days_to_keep_positive"',
        'ERROR: constraint "db_backup_db_backup_days_to_keep_positive"'
        ' of relation "db_backup" does not exist',
        "odoo.addons.code_generator.extractor_module_file: Ignore next"
        " error about ALTER TABLE DROP CONSTRAINT.",
        "has no access rules, consider adding one.",
        "Failed to load registry",
    ]
    keyword_error_to_remove = [
        "devops.cg.field.has_error",
        "devops.exec.error.name",
        "devops.workspace.devops_exec_error_count",
        "views/devops_exec_error.xml",
        "devops_exec_error.py",
        "devops_log_error.py",
    ]
    lst_item_ignore_warning = [
        "have the same label:",
        "odoo.addons.code_generator.extractor_module_file: Ignore next"
        " error about ALTER TABLE DROP CONSTRAINT.",
    ]
    keyword_warning_to_remove = [
        "devops_log_warning.py",
    ]
    lst_warning_key = [
        "WARNING",
        "warning:",
    ]
    lst_error_key = ["ERROR", "error:"]
    for line in rec.log_all.split("\\n"):
        # line_fix = line.lower()
        line_fix = line
        for key_to_remove in keyword_error_to_remove:
            line_fix = line_fix.replace(key_to_remove, "")
        for key_to_remove in keyword_warning_to_remove:
            line_fix = line_fix.replace(key_to_remove, "")

        # Search error or warning
        for key in lst_error_key:
            if key in line_fix:
                has_error = True
                break
        else:
            has_error = False
        for key in lst_warning_key:
            if key in line_fix:
                has_warning = True
                break
        else:
            has_warning = False

        if has_error:
            for ignore_item in lst_item_ignore_error:
                if ignore_item in line:
                    break
            else:
                v = {
                    "name": line.strip(),
                    "exec_id": rec.id,
                }
                if rec.new_project_id:
                    v["new_project_id"] = rec.new_project_id.id
                self.env["devops.log.error"].create(v)

        if has_warning:
            for ignore_item in lst_item_ignore_warning:
                if ignore_item in line:
                    break
            else:
                v = {
                    "name": line.strip(),
                    "exec_id": rec.id,
                }
                if rec.new_project_id:
                    v["new_project_id"] = rec.new_project_id.id
                self.env["devops.log.warning"].create(v)""",
                    "name": "compute_error",
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
                {
                    "code": """for rec in self:
    rec.execution_finish = bool(rec.exec_stop_date)""",
                    "name": "_compute_execution_finish",
                    "decorator": '@api.depends("exec_stop_date")',
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
                {
                    "code": """for rec in self:
    rec.time_duration_result = (
        f" {'{:0>8}'.format(str(timedelta(seconds=rec.exec_time_duration)))}"
    )""",
                    "name": "_compute_time_duration_result",
                    "decorator": '@api.depends("exec_time_duration")',
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
                {
                    "code": """ws_id = self.env["devops.workspace"].search(
    [("is_me", "=", True)], limit=1
)
if not ws_id:
    return
for o_rec in self:
    with ws_id.devops_create_exec_bundle("Open file IDE") as rec_ws:
        rec_ws.with_context(
            breakpoint_id=o_rec.ide_breakpoint.id
        ).ide_pycharm.action_start_pycharm()""",
                    "name": "open_file_ide",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Exec Bundle
        model_model = "devops.exec.bundle"
        model_name = "devops_exec_bundle"
        dct_model = {
            "description": (
                "Bundle of execution process, package of multiple process to"
                " regroup it."
            ),
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 6,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "description": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 3,
                "field_description": "Description",
                "ttype": "char",
            },
            "devops_workspace": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 12,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Devops Workspace",
                "readonly": True,
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "exec_start_date": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 7,
                "code_generator_tree_view_sequence": 12,
                "default_lambda": "fields.Datetime.now",
                "field_description": "Execution start date",
                "readonly": True,
                "ttype": "datetime",
            },
            "exec_stop_date": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Execution stop date",
                "readonly": True,
                "ttype": "datetime",
            },
            "exec_time_duration": {
                "code_generator_compute": "_compute_exec_time_duration",
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 9,
                "field_description": "Execution time duration",
                "help": "Time in second, duration of execution",
                "store": True,
                "ttype": "integer",
            },
            "execution_finish": {
                "code_generator_compute": "_compute_execution_finish",
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 11,
                "field_description": "Execution Finish",
                "store": True,
                "ttype": "boolean",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "parent_id": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 4,
                "field_description": "Parent bundle",
                "index": 1,
                "relation": "devops.exec.bundle",
                "ttype": "many2one",
            },
            "time_duration_result": {
                "code_generator_compute": "_compute_time_duration_result",
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 10,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Time Duration Result",
                "store": True,
                "ttype": "char",
            },
        }
        model_devops_exec_bundle = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import logging
from datetime import timedelta

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_exec_bundle.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """self.ensure_one()
if self.devops_exec_ids:
    return self.devops_exec_ids[-1]""",
                    "name": "get_last_exec",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_bundle.id,
                },
                {
                    "code": """rec = self
while rec.parent_id:
    rec = rec.parent_id
return rec""",
                    "name": "get_parent_root",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_bundle.id,
                },
                {
                    "code": '''for rec in self:
    if not isinstance(rec.id, models.NewId):
        rec.name = f"{rec.id:03d}"
    else:
        rec.name = ""
    # rec.name += f"workspace {rec.devops_workspace.id}"
    if rec.description:
        rec.name += f" '{rec.description}'"''',
                    "name": "_compute_name",
                    "decorator": (
                        '@api.depends("devops_workspace",'
                        ' "time_duration_result", "execution_finish",'
                        ' "description")'
                    ),
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_bundle.id,
                },
                {
                    "code": """for rec in self:
    if rec.exec_start_date and rec.exec_stop_date:
        rec.exec_time_duration = (
            rec.exec_stop_date - rec.exec_start_date
        ).total_seconds()
    else:
        rec.exec_time_duration = False""",
                    "name": "_compute_exec_time_duration",
                    "decorator": (
                        '@api.depends("exec_start_date", "exec_stop_date")'
                    ),
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_bundle.id,
                },
                {
                    "code": """for rec in self:
    rec.execution_finish = bool(rec.exec_stop_date)""",
                    "name": "_compute_execution_finish",
                    "decorator": '@api.depends("exec_stop_date")',
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_bundle.id,
                },
                {
                    "code": """for rec in self:
    rec.time_duration_result = (
        f" {'{:0>8}'.format(str(timedelta(seconds=rec.exec_time_duration)))}"
    )""",
                    "name": "_compute_time_duration_result",
                    "decorator": '@api.depends("exec_time_duration")',
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_bundle.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Exec Error
        model_model = "devops.exec.error"
        model_name = "devops_exec_error"
        lst_depend_model = ["mail.thread", "mail.activity.mixin"]
        dct_model = {
            "description": "Execution error",
            "enable_activity": True,
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 6,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "channel_ids": {
                "code_generator_sequence": 13,
                "field_description": "Channel",
                "relation": "mail.channel",
                "ttype": "many2many",
            },
            "description": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Description",
                "ttype": "char",
            },
            "devops_exec_bundle_id": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 17,
                "field_description": "Devops Exec Bundle",
                "readonly": True,
                "relation": "devops.exec.bundle",
                "ttype": "many2one",
            },
            "devops_exec_id": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 16,
                "field_description": "Devops Exec",
                "readonly": True,
                "relation": "devops.exec",
                "ttype": "many2one",
            },
            "devops_workspace": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 7,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Devops Workspace",
                "readonly": True,
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "diagnostic_idea": {
                "code_generator_form_simple_view_sequence": 30,
                "code_generator_sequence": 23,
                "field_description": "Diagnostic Idea",
                "help": "Auto correction try to diagnostic.",
                "ttype": "text",
            },
            "escaped_tb": {
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Escaped Tb",
                "help": "Traceback",
                "ttype": "text",
            },
            "exception_name": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 18,
                "field_description": "Name of exception",
                "ttype": "char",
            },
            "exec_filename": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 9,
                "field_description": "Execution filename",
                "help": "Execution information, where it's called.",
                "ttype": "char",
            },
            "exec_keyword": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 10,
                "field_description": "Execution keyword",
                "help": "Execution information, where it's called.",
                "ttype": "char",
            },
            "exec_line_number": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 11,
                "field_description": "Execution line number",
                "help": "Execution information, where it's called.",
                "ttype": "integer",
            },
            "find_resolution": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 22,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Find Resolution",
                "help": "If resolution to resolv the error was found.",
                "selection": (
                    "[('find', 'Find'), ('error', 'Error'), ('diagnostic',"
                    " 'Diagnostic')]"
                ),
                "ttype": "selection",
            },
            "ide_breakpoint": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 18,
                "field_description": "Ide Breakpoint",
                "help": "Associate a breakpoint to this execution.",
                "relation": "devops.ide.breakpoint",
                "ttype": "many2one",
            },
            "line_file_tb_detected": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 15,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Line File Tb Detected",
                "help": "Detected line to add breakpoint.",
                "ttype": "text",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "new_project_id": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 20,
                "field_description": "New projects",
                "readonly": True,
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
            "parent_root_exec_bundle_id": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 21,
                "field_description": "Parent Root Exec Bundle",
                "readonly": True,
                "relation": "devops.exec.bundle",
                "ttype": "many2one",
            },
            "partner_ids": {
                "code_generator_sequence": 12,
                "field_description": "Partner",
                "relation": "res.partner",
                "ttype": "many2many",
            },
            "stage_new_project_id": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 19,
                "field_description": "Stage",
                "readonly": True,
                "relation": "devops.cg.new_project.stage",
                "ttype": "many2one",
            },
            "type_error": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 14,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Type Error",
                "selection": (
                    "[('internal', 'Internal'), ('execution', 'Execution')]"
                ),
                "ttype": "selection",
            },
        }
        model_devops_exec_error = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
            lst_depend_model=lst_depend_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import logging
from datetime import timedelta

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_exec_error.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """result = super().create(vals_list)
for rec in result:
    # ERROR, cannot support error into error if generate error, each error will generate error
    # with rec.devops_workspace.devops_create_exec_bundle(
    #         "Create exec error"
    # ) as rec_ws:
    #     raise Exception("test error into error, no infinity")
    rec.message_post(  # pylint: disable=translation-required
        body="<p>%s</p><pre>%s</pre>"
        % (
            _("devops.workspace '%s' failed.") % rec.description,
            rec.escaped_tb,
        ),
        subtype=self.env.ref(
            "erplibre_devops.mail_message_subtype_failure"
        ),
        author_id=self.env.ref("base.user_root").partner_id.id,
        partner_ids=[(6, 0, rec.partner_ids.ids)],
        channel_ids=[(6, 0, rec.channel_ids.ids)],
    )
    rec.devops_workspace.ide_pycharm.action_cg_setup_pycharm_debug(
        log=rec.escaped_tb.replace("&quot;", '"'), exec_error_id=rec
    )
return result""",
                    "name": "create",
                    "decorator": "@api.model_create_multi",
                    "param": "self, vals_list",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": '''for rec in self:
    if not isinstance(rec.id, models.NewId):
        rec.name = f"{rec.id:03d}"
    else:
        rec.name = ""
    # rec.name += f"workspace {rec.devops_workspace.id}"
    if rec.description:
        rec.name += f" '{rec.description}'"''',
                    "name": "_compute_name",
                    "decorator": '@api.depends("devops_workspace")',
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """self.ensure_one()
self.devops_workspace.with_context(
    default_exec_reboot_process=True
).action_reboot()""",
                    "name": "action_reboot_force_os_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """self.ensure_one()
self.devops_workspace.action_stop()""",
                    "name": "action_kill_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """for rec in self:
    np_ids = (
        rec.parent_root_exec_bundle_id.devops_new_project_ids.exists()
    )
    if np_ids:
        np_id = np_ids[0]
    for np_id in np_ids:
        np_id.stage_id = rec.stage_new_project_id.id
        np_id.action_new_project_debug(ctx=None)""",
                    "name": "action_debug_new_project",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """self.ensure_one()
self.devops_workspace.ide_pycharm.action_kill_pycharm()""",
                    "name": "action_kill_pycharm",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """self.ensure_one()
self.devops_workspace.ide_pycharm.action_start_pycharm(ctx=ctx)""",
                    "name": "action_start_pycharm",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_workspace.devops_create_exec_bundle(
        "Set breakpoint on error"
    ) as rec:
        rec.ide_pycharm.action_cg_setup_pycharm_debug(
            log=rec_o.escaped_tb.replace("&quot;", '"'),
            exec_error_id=rec,
        )""",
                    "name": "action_set_breakpoint_pycharm",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
                {
                    "code": """ws_id = self.env["devops.workspace"].search(
    [("is_me", "=", True)], limit=1
)
if not ws_id:
    return
for o_rec in self:
    with ws_id.devops_create_exec_bundle("Open file IDE") as rec_ws:
        rec_ws.with_context(
            breakpoint_id=o_rec.ide_breakpoint.id
        ).ide_pycharm.action_start_pycharm()""",
                    "name": "open_file_ide",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_exec_error.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Ide Breakpoint
        model_model = "devops.ide.breakpoint"
        model_name = "devops_ide_breakpoint"
        dct_model = {
            "description": (
                "Breakpoint IDE. It's not associate to a workspace."
            ),
        }
        dct_field = {
            "condition_var_field_attr_name": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 13,
                "code_generator_tree_view_sequence": 21,
                "field_description": "Variable field attribute name",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the field attribute."
                ),
                "ttype": "char",
            },
            "condition_var_field_name": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 12,
                "code_generator_tree_view_sequence": 20,
                "field_description": "Variable field name",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the field name."
                ),
                "ttype": "char",
            },
            "condition_var_item_type_view_item": {
                "code_generator_sequence": 20,
                "field_description": "Variable item type view item",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the xml_id without the name view"
                    " item type view item."
                ),
                "ttype": "char",
            },
            "condition_var_label_view_item": {
                "code_generator_sequence": 18,
                "field_description": "Variable label view item",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the xml_id without the label view"
                    " item."
                ),
                "ttype": "char",
            },
            "condition_var_method_name": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 14,
                "code_generator_tree_view_sequence": 22,
                "field_description": "Variable method name",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the method name."
                ),
                "ttype": "char",
            },
            "condition_var_model_name": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 11,
                "code_generator_tree_view_sequence": 19,
                "field_description": "Variable model name",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the model name."
                ),
                "ttype": "char",
            },
            "condition_var_module_name": {
                "code_generator_sequence": 15,
                "field_description": "Variable module name",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the module name."
                ),
                "ttype": "char",
            },
            "condition_var_name_view_item": {
                "code_generator_sequence": 19,
                "field_description": "Variable name view item",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the xml_id without the name view"
                    " item."
                ),
                "ttype": "char",
            },
            "condition_var_short_xml_id": {
                "code_generator_sequence": 17,
                "field_description": "Variable short xml_id",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the xml_id without the module name."
                ),
                "ttype": "char",
            },
            "condition_var_view_name": {
                "code_generator_sequence": 21,
                "field_description": "Variable view name",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the xml_id without the name view"
                    " name."
                ),
                "ttype": "char",
            },
            "condition_var_xml_id": {
                "code_generator_sequence": 16,
                "field_description": "Variable xml_id",
                "help": (
                    "Will be a condition in the breakpoint, it contains the"
                    " variable name about the xml_id."
                ),
                "ttype": "char",
            },
            "description": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Description",
                "ttype": "char",
            },
            "filename": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Filename",
                "ttype": "char",
            },
            "filename_is_cg_hooks_py": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 16,
                "field_description": "Filename Is Cg Hooks Py",
                "ttype": "boolean",
            },
            "filename_is_code_generator_demo_hooks_py": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 6,
                "code_generator_tree_view_sequence": 14,
                "field_description": (
                    "Filename Is Code Generator Demo Hooks Py"
                ),
                "ttype": "boolean",
            },
            "filename_is_template_hooks_py": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 7,
                "code_generator_tree_view_sequence": 15,
                "field_description": "Filename Is Template Hooks Py",
                "ttype": "boolean",
            },
            "generated_by_execution": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 24,
                "code_generator_tree_view_sequence": 18,
                "field_description": "Generated By Execution",
                "help": (
                    "This breakpoint is generated by the software and not the"
                    " developer."
                ),
                "ttype": "boolean",
            },
            "ignore_test": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 22,
                "field_description": "Ignore Test",
                "help": (
                    "Will ignore this breakpoint when do test, because it will"
                    " fail for some reason."
                ),
                "ttype": "boolean",
            },
            "is_multiple": {
                "code_generator_sequence": 23,
                "field_description": "Is Multiple",
                "help": "Support multiple breakpoint for this file and key.",
                "ttype": "boolean",
            },
            "keyword": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 10,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Keyword",
                "ttype": "char",
            },
            "method": {
                "code_generator_sequence": 4,
                "field_description": "Method",
                "ttype": "char",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "no_line": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 11,
                "default": -1,
                "field_description": "No Line",
                "help": "Will be compute",
                "ttype": "integer",
            },
        }
        model_devops_ide_breakpoint = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import logging
import os

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_ide_breakpoint.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """with ws.devops_create_exec_bundle("Get no line breakpoint") as rec:
    key = key.replace('"', '\\"').replace("[", "\[").replace("]", "\]")
    cmd = f'grep -n "{key}" {file}'
    cmd += " | awk -F: '{print $1}'"
    result = rec.execute(to_instance=True, cmd=cmd, engine="sh")
    log_all = result.log_all.strip()
    if not log_all:
        raise Exception(
            f"Cannot find breakpoint into file '{file}' with key"
            f" '{key}'. Command : {cmd}"
        )
    if "No such file or directory" in log_all:
        raise exceptions.Warning(f"No such file '{file}'")
    if log_all:
        try:
            return [int(a) for a in log_all.split("\\n")]
        except:
            raise Exception(f"Wrong output command : {cmd}\\n{log_all}")""",
                    "name": "get_no_line_breakpoint",
                    "decorator": "@staticmethod",
                    "param": "key, file, ws",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_breakpoint.id,
                },
                {
                    "code": """for rec in self:
    with ws.devops_create_exec_bundle("Get breakpoint info") as rec_ws:
        rec = rec.with_context(rec_ws._context)
        lst_all_no_line = []
        if rec.filename_is_code_generator_demo_hooks_py:
            if not new_project_id:
                continue
            filename = new_project_id.code_generator_demo_hooks_py
        elif rec.filename_is_template_hooks_py:
            if not new_project_id:
                continue
            filename = new_project_id.template_hooks_py
        elif rec.filename_is_cg_hooks_py:
            if not new_project_id:
                continue
            filename = new_project_id.cg_hooks_py
        else:
            if not rec.filename:
                _logger.warning(
                    "Missing filename for breakpoint name"
                    f" '{rec.name}'"
                )
                continue
            filename = rec.filename

        filename = os.path.normpath(
            os.path.join(rec_ws.folder, filename)
        )
        lst_no_line = rec.get_no_line_breakpoint(
            rec.keyword, filename, rec_ws
        )
        if lst_no_line:
            s_cond = None
            if condition:
                s_cond = condition
            elif new_project_id:
                s_cond = rec.get_condition_str(
                    value_model=new_project_id.breakpoint_condition_model_name,
                    value_field=new_project_id.breakpoint_condition_field_name,
                    value_field_attr=new_project_id.breakpoint_condition_field_attribute_name,
                    value_method_name=new_project_id.breakpoint_condition_method_name,
                    value_module_name=new_project_id.breakpoint_condition_module_name,
                    value_xml_id=new_project_id.breakpoint_condition_xml_id,
                    value_short_xml_id=new_project_id.breakpoint_condition_short_xml_id,
                    value_label_view_item=new_project_id.breakpoint_condition_value_label_view_item,
                    value_name_view_item=new_project_id.breakpoint_condition_name_view_item,
                    value_item_type_view_item=new_project_id.breakpoint_condition_item_type_view_item,
                    value_view_name=new_project_id.breakpoint_condition_view_name,
                )
            tpl_info = (filename, lst_no_line, s_cond)
            lst_all_no_line.append(tpl_info)
return lst_all_no_line""",
                    "name": "get_breakpoint_info",
                    "decorator": "@api.multi",
                    "param": "self, ws, new_project_id=None, condition=None",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_breakpoint.id,
                },
                {
                    "code": """ws_id = self.env["devops.workspace"].search(
    [("is_me", "=", True)], limit=1
)
if not ws_id:
    return
for o_rec in self:
    with ws_id.devops_create_exec_bundle("Open file IDE") as rec_ws:
        rec_ws.with_context(
            breakpoint_id=o_rec.id
        ).ide_pycharm.action_start_pycharm()""",
                    "name": "open_file_ide",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_breakpoint.id,
                },
                {
                    "code": """lst_condition = []
for rec in self:
    if rec.condition_var_model_name and value_model is not False:
        lst_condition.append(
            f'{rec.condition_var_model_name}=="{value_model}"'
        )
    if rec.condition_var_field_name and value_field is not False:
        lst_condition.append(
            f'{rec.condition_var_field_name}=="{value_field}"'
        )
    if (
        rec.condition_var_field_attr_name
        and value_field_attr is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_field_attr_name}=="{value_field_attr}"'
        )
    if (
        rec.condition_var_method_name
        and value_method_name is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_method_name}=="{value_method_name}"'
        )
    if (
        rec.condition_var_module_name
        and value_module_name is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_module_name}=="{value_module_name}"'
        )
    if rec.condition_var_xml_id and value_xml_id is not False:
        lst_condition.append(
            f'{rec.condition_var_xml_id}=="{value_xml_id}"'
        )
    if (
        rec.condition_var_short_xml_id
        and value_short_xml_id is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_short_xml_id}=="{value_short_xml_id}"'
        )
    if (
        rec.condition_var_label_view_item
        and value_label_view_item is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_label_view_item}=="{value_label_view_item}"'
        )
    if (
        rec.condition_var_name_view_item
        and value_name_view_item is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_name_view_item}=="{value_name_view_item}"'
        )
    if (
        rec.condition_var_item_type_view_item
        and value_item_type_view_item is not False
    ):
        lst_condition.append(
            f'{rec.condition_var_item_type_view_item}=="{value_item_type_view_item}"'
        )
    if rec.condition_var_view_name and value_view_name is not False:
        lst_condition.append(
            f'{rec.condition_var_view_name}=="{value_view_name}"'
        )
return " and ".join(lst_condition)""",
                    "name": "get_condition_str",
                    "decorator": "@api.multi",
                    "param": (
                        "self, value_model=False, value_field=False,"
                        " value_field_attr=False, value_method_name=False,"
                        " value_module_name=False, value_xml_id=False,"
                        " value_short_xml_id=False,"
                        " value_label_view_item=False,"
                        " value_name_view_item=False,"
                        " value_item_type_view_item=False,"
                        " value_view_name=False"
                    ),
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_breakpoint.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Ide Pycharm
        model_model = "devops.ide.pycharm"
        model_name = "devops_ide_pycharm"
        dct_model = {
            "description": "Pycharm management for a workspace",
        }
        dct_field = {
            "devops_workspace": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "field_description": "Devops Workspace",
                "relation": "devops.workspace",
                "required": True,
                "ttype": "many2one",
            },
            "is_installed": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Is Installed",
                "help": "Will be true if project contain .idea",
                "ttype": "boolean",
            },
            "line_file_tb_detected": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 5,
                "field_description": "Line File Tb Detected",
                "help": "Detected line to add breakpoint.",
                "ttype": "text",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
        }
        model_devops_ide_pycharm = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).
import logging
import os
import re
import time
import uuid

import xmltodict

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_ide_pycharm.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """result = super().create(vals_list)
result.action_pycharm_check()
return result""",
                    "name": "create",
                    "decorator": "@api.model_create_multi",
                    "param": "self, vals_list",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": '''for rec in self:
    rec.name = f"{rec.devops_workspace.name}"''',
                    "name": "_compute_name",
                    "decorator": '@api.depends("devops_workspace.name")',
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """self.ensure_one()
with self.devops_workspace.devops_create_exec_bundle(
    "Kill PyCharm"
) as rec:
    cmd = (
        "pkill -f $(ps aux | grep pycharm | grep -v grep | grep"
        " bin/java | awk '{print $11}')"
    )
    rec.execute(cmd=cmd, engine="")""",
                    "name": "action_kill_pycharm",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """self.ensure_one()
with self.devops_workspace.devops_create_exec_bundle(
    "Start PyCharm", ctx=ctx
) as rec_ws:
    # TODO support diff "pycharm diff <path1> <path2> <path3>
    # TODO support merge "pycharm merge <path1> <path2> <path3>
    # TODO support format "pycharm format <path1> <path2> <path3>
    # TODO support inspect "pycharm inspect <path1> <path2> <path3>
    # TODO support inspect "pycharm inspect <path1> <path2> <path3>
    lst_line = []
    bp_id = None
    breakpoint_name = rec_ws._context.get("breakpoint_name")
    id_breakpoint = rec_ws._context.get("breakpoint_id")
    if id_breakpoint:
        bp_id = (
            self.env["devops.ide.breakpoint"]
            .browse(id_breakpoint)
            .exists()
        )
    elif breakpoint_name:
        bp_id = (
            self.env["devops.ide.breakpoint"]
            .search([("name", "=", breakpoint_name)], limit=1)
            .exists()
        )
    if bp_id:
        if bp_id.filename and bp_id.no_line >= 0:
            lst_line = [(bp_id.filename, [bp_id.no_line])]
        else:
            try:
                lst_line = bp_id.get_breakpoint_info(
                    rec_ws, new_project_id=new_project_id
                )
            except Exception as e:
                raise exceptions.Warning(
                    f"Breakpoint '{bp_id.name}' : {e}"
                )
    if lst_line:
        filename = lst_line[0][0]
        no_line = lst_line[0][1][0]
        add_line = f"--line {no_line}" if no_line > 0 else ""
        self.action_pycharm_open(
            rec_ws, filename=filename, pycharm_arg=add_line
        )
    else:
        self.action_pycharm_open(rec_ws, folder=rec_ws.folder)""",
                    "name": "action_start_pycharm",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, new_project_id=None",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """# TODO auto-search pycharm binary
cmd = "~/.local/share/JetBrains/Toolbox/scripts/pycharm"
# cmd = "/snap/bin/pycharm-community"
if pycharm_arg:
    cmd += f" {pycharm_arg}"
if folder:
    cmd += f" {folder}"
elif filename:
    cmd += f" {filename}"
rec_ws.execute(cmd=cmd, force_open_terminal=True, force_exit=True)""",
                    "name": "action_pycharm_open",
                    "decorator": "@staticmethod",
                    "param": (
                        "rec_ws, folder=None, filename=None, pycharm_arg=None"
                    ),
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "Pycharm configuration init", ctx=ctx
    ) as rec_ws:
        rec = rec.with_context(rec_ws._context)
        if not rec.is_installed:
            rec.action_start_pycharm()
            while not rec.is_installed:
                time.sleep(3)
                rec.action_pycharm_check()
        cmd = (
            "source"
            " ./.venv/bin/activate;./script/ide/pycharm_configuration.py"
            " --init --overwrite"
        )
        rec_ws.execute(cmd=cmd, run_into_workspace=True)""",
                    "name": "action_pycharm_conf_init",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "Pycharm check", ctx=ctx
    ) as rec_ws:
        path_idea = os.path.join(rec_ws.folder, ".idea", "misc.xml")
        rec.is_installed = rec_ws.os_path_exists(path_idea)""",
                    "name": "action_pycharm_check",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """for rec in self:
    with rec.devops_workspace.devops_create_exec_bundle(
        "Setup PyCharm debug", ctx=ctx
    ) as rec_ws:
        if not log:
            log = rec_ws.devops_cg_erplibre_devops_log
            if not log:
                log = ""
        lst_exception = (
            "odoo.exceptions.ValidationError:",
            "Exception:",
            "NameError:",
            "TypeError:",
            "AttributeError:",
            "ValueError:",
            "AssertionError:",
            "SyntaxError:",
            "KeyError:",
            "psycopg2.errors.NotNullViolation:",
            "psycopg2.errors.UndefinedTable:",
            "UnboundLocalError:",
            "FileNotFoundError:",
            "RuntimeWarning:",
            "raise ValidationError",
            "odoo.exceptions.CacheMiss:",
            "json.decoder.JSONDecodeError:",
            "RuntimeError:",
            "Traceback (most recent call last):",
        )
        for exception in lst_exception:
            index_error = log.rfind(exception)
            if index_error >= 0:
                break
        else:
            _logger.info("Not exception found from log.")
            continue
        if exec_error_id:
            exec_error_id.exception_name = exception
        # TODO search multiple path
        search_path = (
            "File"
            f' "{os.path.normpath(os.path.join(rec_ws.folder, "./addons"))}'
        )
        no_last_file_error = log.rfind(search_path, 0, index_error)
        no_end_line_error = log.find("\\n", no_last_file_error)
        error_line = log[no_last_file_error:no_end_line_error]
        rec.line_file_tb_detected = error_line
        # Detect no line
        # TODO this code is duplicated by a non-regex method, search into workspace
        #  for str_tb in traceback.format_stack()[::-1]:
        regex = r"line (\d+),"
        result_regex = re.search(regex, error_line)
        line_breakpoint = None
        if result_regex:
            line_breakpoint = int(result_regex.group(1))
        # Detect filepath
        regex = r'File "(.*?)"'
        result_regex = re.search(regex, error_line)
        filepath_breakpoint = None
        if result_regex:
            filepath_breakpoint = result_regex.group(1)
        if line_breakpoint is None or filepath_breakpoint is None:
            exec_error_id.find_resolution = "error"
            rec.try_find_why(log, exception, rec_ws, exec_error_id)
            raise Exception("Cannot find breakpoint information")
        else:
            rec.try_find_why(log, exception, rec_ws, exec_error_id)
        # -1 to line because start 0, but show 1
        line = str(line_breakpoint - 1)
        rec.line_file_tb_detected = error_line
        if exec_error_id:
            exec_error_id.line_file_tb_detected = error_line
            exec_error_id.find_resolution = "find"

        update_line = int(line) + 1
        # Create breakpoint
        bp_value = {
            "name": "breakpoint_exec",
            "description": (
                "Breakpoint generate when create an execution."
            ),
            "filename": filepath_breakpoint,
            "no_line": update_line,
            # "keyword": keyword,
            "ignore_test": True,
            "generated_by_execution": True,
        }
        bp_id = self.env["devops.ide.breakpoint"].create(bp_value)
        exec_error_id.exec_filename = filepath_breakpoint
        exec_error_id.exec_line_number = update_line
        exec_error_id.ide_breakpoint = bp_id.id

        rec.add_breakpoint(filepath_breakpoint, line)""",
                    "name": "action_cg_setup_pycharm_debug",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, log=None, exec_error_id=None",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """id_devops_cg_new_project = self._context.get("devops_cg_new_project")
if id_devops_cg_new_project:
    devops_cg_new_project_id = (
        self.env["devops.cg.new_project"]
        .browse(id_devops_cg_new_project)
        .exists()
    )
    if not devops_cg_new_project_id:
        return False
    work_dir = os.path.normpath(
        os.path.join(
            ws.folder,
            devops_cg_new_project_id.directory,
            devops_cg_new_project_id.module,
        )
    )
else:
    work_dir = ws.folder
if exception == "NameError:":
    # Check 1, is not defined
    result = re.search(r"NameError: name '(\w+)' is not defined", log)
    if result:
        name_error = result.group(1)
        result = ws.execute(
            to_instance=True,
            folder=work_dir,
            cmd=f'grep -nr "{name_error}" --include=\*.{{py,xml,js}}',
        )
        if exec_error_id and result.log_all:
            exec_error_id.diagnostic_idea = result.log_all
            if not exec_error_id.line_file_tb_detected:
                exec_error_id.line_file_tb_detected = result.log_all
            else:
                exec_error_id.line_file_tb_detected += result.log_all
            exec_error_id.find_resolution = "diagnostic"
            return True
elif exception == "FileNotFoundError:":
    if (
        "FileNotFoundError: [Errno 2] No such file or directory:"
        " './addons/ERPLibre_erplibre_addons/code_generator_template_erplibre_devops/hooks.py'"
        in log
    ):
        exec_error_id.diagnostic_idea = (
            "UcA doesn't exist, rerun new project to create it."
        )
        return True
    elif (
        "FileNotFoundError: [Errno 2] No such file or directory:"
        " './addons/ERPLibre_erplibre_addons/code_generator_erplibre_devops/hooks.py'"
        in log
    ):
        exec_error_id.diagnostic_idea = (
            "UcB doesn't exist, rerun new project to create it."
        )
        return True
elif exception == "ValueError:":
    # Check 1, while evaluating
    if 'while evaluating\\n"' in log:
        value_error = log.split('while evaluating\\n"')[1][:-1]
        if value_error:
            s_value_error = value_error
            if value_error[0] == "[":
                s_value_error = f"\\{value_error}"
            result = ws.execute(
                to_instance=True,
                folder=work_dir,
                cmd=(
                    f'grep -nr \\"{s_value_error}\\"'
                    " --include=\*.{py,xml,js}"
                ),
                delimiter_bash='"',
            )
            if exec_error_id and result.log_all:
                exec_error_id.diagnostic_idea = result.log_all
                if not exec_error_id.line_file_tb_detected:
                    exec_error_id.line_file_tb_detected = (
                        result.log_all
                    )
                else:
                    exec_error_id.line_file_tb_detected += (
                        result.log_all
                    )
                exec_error_id.find_resolution = "diagnostic"
                return True

return False""",
                    "name": "try_find_why",
                    "param": "self, log, exception, ws, exec_error_id",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """for rec in self:
    with self.devops_workspace.devops_create_exec_bundle(
        "PyCharm add configuration"
    ) as rec_ws:
        rec = rec.with_context(rec_ws._context)
        if conf_add_mode == "install":
            file_content_before = rec_ws.os_read_file(
                "conf/pycharm_default_configuration.csv"
            )
            conf_add_conf_name = f"debug_devops_{uuid.uuid4().hex[:8]}"
            group = "devops"
            default = True
            cmd = (
                "./odoo/odoo-bin,--limit-time-real 999999 --no-http"
                f" -c {conf_add_config_path} --stop-after-init --dev"
                f" cg -d {conf_add_db} -i {conf_add_module}"
            )
            line_to_add = (
                f"\\n{conf_add_conf_name},{cmd},{group},{default}"
            )

            v = {
                "name": conf_add_conf_name,
                "command": cmd,
                "group": group,
                "is_default": default,
                "devops_workspace_id": rec_ws.id,
                "devops_ide_pycharm": rec.id,
            }
            id_devops_cg_new_project = self._context.get(
                "devops_cg_new_project"
            )
            if id_devops_cg_new_project:
                v[
                    "devops_cg_new_project_id"
                ] = id_devops_cg_new_project
            self.env["devops.ide.pycharm.configuration"].create(v)

            if line_to_add not in file_content_before:
                new_content = file_content_before + line_to_add
            else:
                new_content = file_content_before

            rec_ws.os_write_file(
                "conf/pycharm_default_configuration.csv", new_content
            )
            rec.action_pycharm_conf_init()
            # rec_ws.os_write_file(
            #     "conf/pycharm_default_configuration.csv",
            #     file_content_before,
            # )
        else:
            _logger.warning(
                f"Unknown add_configuration mode {conf_add_mode}"
            )""",
                    "name": "add_configuration",
                    "decorator": "@api.model",
                    "param": (
                        "self, ctx=None, conf_add_mode=None, conf_add_db=None,"
                        " conf_add_module=None,"
                        " conf_add_config_path='config.conf'"
                    ),
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """# TODO change tactic, fill variable into erplibre with breakpoint to support
# TODO support validate already exist to not duplicate
with self.devops_workspace.devops_create_exec_bundle(
    "PyCharm add breakpoint"
) as rec_ws:
    if type(line) is int:
        lst_line = [line]
    elif type(line) is list:
        lst_line = line
    elif type(line) is str:
        lst_line = [int(line)]
    else:
        raise ValueError(
            "Variable line need to by type int or list, and got"
            f" '{type(line)}' for line '{line}'."
        )
    url = file_path.replace(rec_ws.folder, "file://$PROJECT_DIR$")
    workspace_xml_path = os.path.join(
        rec_ws.folder, ".idea", "workspace.xml"
    )
    with open(workspace_xml_path) as xml:
        xml_as_string = xml.read()
        dct_project_xml = xmltodict.parse(xml_as_string)

    # Add a line-breakpoint
    project = dct_project_xml.get("project")
    if not project:
        raise Exception(
            f"Cannot find <project> into {workspace_xml_path}"
        )
    component = project.get("component")
    if not component:
        raise Exception(
            f"Cannot find <component> into {workspace_xml_path}"
        )
    for x_debug_manager in component:
        if x_debug_manager.get("@name") == "XDebuggerManager":
            break
    else:
        x_debug_manager = {"@name": "XDebuggerManager"}
        project["component"].append(x_debug_manager)

    for no_line in lst_line:
        if minus_1_line:
            no_line -= 1
        dct_config_breakpoint = {
            "@enabled": "true",
            "@suspend": "THREAD",
            "@type": "python-line",
            "url": url,
            "line": no_line,
            "option": {"@name": "timeStamp", "@value": "104"},
        }
        if condition:
            dct_config_breakpoint["condition"] = {
                "@expression": condition,
                "@language": "Python",
            }

        has_update = False
        breakpoints = None
        breakpoint_manager = x_debug_manager.get("breakpoint-manager")
        if not breakpoint_manager:
            x_debug_manager["breakpoint-manager"] = {
                "breakpoints": {
                    "line-breakpoint": dct_config_breakpoint
                }
            }
            has_update = True

        if not has_update:
            breakpoints = breakpoint_manager.get("breakpoints")
            if not breakpoints:
                breakpoint_manager["breakpoints"] = {
                    "line-breakpoint": dct_config_breakpoint
                }
                has_update = True

        if not has_update:
            line_breakpoint = breakpoints.get("line-breakpoint")
            # line_breakpoint can be dict or list
            if type(line_breakpoint) is dict:
                line_breakpoint = [line_breakpoint]
                breakpoints["line-breakpoint"] = line_breakpoint

            config_exist = False
            if type(line_breakpoint) is list:
                for a_line_bp in line_breakpoint:
                    if a_line_bp.get(
                        "url"
                    ) == dct_config_breakpoint.get(
                        "url"
                    ) and a_line_bp.get(
                        "line"
                    ) == dct_config_breakpoint.get(
                        "line"
                    ):
                        config_exist = True
                if not config_exist:
                    breakpoints["line-breakpoint"].append(
                        dct_config_breakpoint
                    )
                    has_update = True
            else:
                breakpoints["line-breakpoint"] = dct_config_breakpoint
                has_update = True

    # Write modification
    if has_update:
        # Do not format, breakpoint break when got \\n
        xml_format = xmltodict.unparse(
            dct_project_xml, pretty=False, indent="  "
        )
        with open(workspace_xml_path, mode="w") as xml:
            xml.write(xml_format)
        _logger.info(f"Write file '{workspace_xml_path}'")""",
                    "name": "add_breakpoint",
                    "decorator": "@api.model",
                    "param": (
                        "self, file_path, line, condition=None,"
                        " minus_1_line=False"
                    ),
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """self.ensure_one()
self.devops_workspace.with_context(
    default_exec_reboot_process=True
).action_reboot()""",
                    "name": "action_reboot_force_os_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
                {
                    "code": """self.ensure_one()
self.devops_workspace.action_stop()""",
                    "name": "action_kill_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 12,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_ide_pycharm.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Ide Pycharm Configuration
        model_model = "devops.ide.pycharm.configuration"
        model_name = "devops_ide_pycharm_configuration"
        dct_model = {
            "description": "Pycharm management configuration for a workspace",
            "order": "id desc",
        }
        dct_field = {
            "command": {
                "code_generator_sequence": 4,
                "field_description": "Command",
                "ttype": "char",
            },
            "devops_cg_new_project_id": {
                "code_generator_sequence": 8,
                "field_description": "Devops Cg New Project",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
            "devops_ide_pycharm": {
                "code_generator_sequence": 9,
                "field_description": "Devops Ide Pycharm",
                "relation": "devops.ide.pycharm",
                "ttype": "many2one",
            },
            "devops_workspace_id": {
                "code_generator_sequence": 7,
                "field_description": "Devops Workspace",
                "relation": "devops.workspace",
                "required": True,
                "ttype": "many2one",
            },
            "group": {
                "code_generator_sequence": 5,
                "field_description": "Group",
                "ttype": "char",
            },
            "is_default": {
                "code_generator_sequence": 6,
                "field_description": "Is Default",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_sequence": 3,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_ide_pycharm_configuration = (
            code_generator_id.add_update_model(
                model_model,
                model_name,
                dct_field=dct_field,
                dct_model=dct_model,
            )
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).
import logging

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_ide_pycharm_configuration.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Log Error
        model_model = "devops.log.error"
        model_name = "devops_log_error"
        dct_model = {
            "description": "Log error",
        }
        dct_field = {
            "exec_id": {
                "code_generator_sequence": 3,
                "field_description": "Exec",
                "readonly": True,
                "relation": "devops.exec",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_sequence": 2,
                "field_description": "Name",
                "ttype": "char",
            },
            "new_project_id": {
                "code_generator_sequence": 4,
                "field_description": "New Project",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
        }
        model_devops_log_error = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import logging

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_log_error.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Log Makefile Target
        model_model = "devops.log.makefile.target"
        model_name = "devops_log_makefile_target"
        dct_model = {
            "description": (
                "Log makefile target (to call command) for a workspace"
            ),
        }
        dct_field = {
            "devops_workspace_id": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Devops Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_log_makefile_target = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """from odoo import _, api, exceptions, fields, models, tools""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_log_makefile_target.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """for rec in self:
    with rec.devops_workspace_id.devops_create_exec_bundle(
        "Launch target"
    ) as rec_ws:
        exec_id = rec_ws.execute(
            cmd=f"make {rec.name}", to_instance=True
        )""",
                    "name": "action_launch_target",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_log_makefile_target.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Log Warning
        model_model = "devops.log.warning"
        model_name = "devops_log_warning"
        dct_model = {
            "description": "Log warning",
        }
        dct_field = {
            "exec_id": {
                "code_generator_sequence": 3,
                "field_description": "Exec",
                "readonly": True,
                "relation": "devops.exec",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_sequence": 2,
                "field_description": "Name",
                "ttype": "char",
            },
            "new_project_id": {
                "code_generator_sequence": 4,
                "field_description": "New Project",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
        }
        model_devops_log_warning = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import logging

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_log_warning.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Plan Action Wizard
        model_model = "devops.plan.action.wizard"
        model_name = "devops_plan_action_wizard"
        lst_depend_model = ["multi.step.wizard.mixin"]
        dct_model = {
            "description": (
                "Devops planification do an action with a specific workflow"
            ),
        }
        dct_field = {
            "can_search_workspace": {
                "code_generator_compute": "_compute_can_search_workspace",
                "code_generator_sequence": 39,
                "field_description": "Can Search Workspace",
                "store": True,
                "ttype": "boolean",
            },
            "code_generator_name": {
                "code_generator_sequence": 12,
                "field_description": "Code Generator Name",
                "ttype": "char",
            },
            "config_uca_enable_export_data": {
                "code_generator_sequence": 59,
                "default": True,
                "field_description": "Config Uca Enable Export Data",
                "help": (
                    "Will enable option nonmenclator in CG to export data"
                    " associate to models."
                ),
                "ttype": "boolean",
            },
            "create_workspace_id": {
                "code_generator_sequence": 6,
                "field_description": "Created workspace",
                "help": "Workspace generate by this wizard.",
                "on_delete": "cascade",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
            "enable_package_srs": {
                "code_generator_sequence": 74,
                "field_description": "Enable Package Srs",
                "ttype": "boolean",
            },
            "erplibre_mode": {
                "code_generator_sequence": 9,
                "field_description": "Erplibre Mode",
                "relation": "erplibre.mode",
                "ttype": "many2one",
            },
            "force_generate": {
                "code_generator_sequence": 70,
                "field_description": "Force Generate",
                "help": (
                    "Ignore secure file edited, can overwrite this file and"
                    " lost data."
                ),
                "ttype": "boolean",
            },
            "force_show_final": {
                "code_generator_sequence": 21,
                "field_description": "Force Show Final",
                "help": "Will show final view without being in this state.",
                "ttype": "boolean",
            },
            "generated_new_project_id": {
                "code_generator_sequence": 10,
                "field_description": "Generated project",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
            "has_configured_path": {
                "code_generator_compute": "_compute_has_configured_path",
                "code_generator_sequence": 17,
                "field_description": "Has Configured Path",
                "store": True,
                "ttype": "boolean",
            },
            "has_next": {
                "code_generator_compute": "_compute_has_next",
                "code_generator_sequence": 69,
                "field_description": "Has Next",
                "store": True,
                "ttype": "boolean",
            },
            "image_db_selection": {
                "code_generator_sequence": 73,
                "default_lambda": "_default_image_db_selection",
                "field_description": "Image Db Selection",
                "relation": "devops.db.image",
                "ttype": "many2one",
            },
            "is_cg_temporary": {
                "code_generator_sequence": 38,
                "field_description": "Is Cg Temporary",
                "help": (
                    "When it's remote, need tool to copy code with the"
                    " developers."
                ),
                "ttype": "boolean",
            },
            "is_force_local_system": {
                "code_generator_sequence": 35,
                "field_description": "Is Force Local System",
                "help": "Help for view to force local component.",
                "ttype": "boolean",
            },
            "is_new_module": {
                "code_generator_compute": "_compute_is_new_module",
                "code_generator_sequence": 16,
                "field_description": "Is New Module",
                "readonly": False,
                "store": True,
                "ttype": "boolean",
            },
            "is_new_or_exist_ssh": {
                "code_generator_compute": "_compute_is_new_or_exist_ssh",
                "code_generator_sequence": 36,
                "field_description": "Is New Or Exist Ssh",
                "store": True,
                "ttype": "boolean",
            },
            "is_remote_cg": {
                "code_generator_sequence": 37,
                "comment_before": (
                    "TODO compute it, detect when it's remote, when cg path is"
                    " different working path"
                ),
                "field_description": "Is Remote Cg",
                "help": (
                    "When it's remote, need tool to copy code with the"
                    " developers."
                ),
                "ttype": "boolean",
            },
            "is_update_system": {
                "code_generator_compute": "_compute_is_update_system",
                "code_generator_sequence": 47,
                "field_description": "Is Update System",
                "help": (
                    "True if editing an existing system or False to create a"
                    " system"
                ),
                "store": True,
                "ttype": "boolean",
            },
            "mode_context": {
                "code_generator_sequence": 25,
                "comment_before": (
                    "TODO select default context from configuration and export"
                    " it in local environment home configuration"
                ),
                "default": "dev",
                "field_description": "Mode Context",
                "help": "Context why you use DevOps",
                "required": True,
                "selection": (
                    "[('dev', 'Dev'), ('test', 'Test'), ('stage', 'Stage'),"
                    " ('demo', 'Demo'), ('prod', 'Prod')]"
                ),
                "ttype": "selection",
            },
            "mode_view_generator": {
                "code_generator_sequence": 48,
                "default": "same_view",
                "field_description": "Mode View Generator",
                "help": (
                    "Mode view, enable rebuild same view or create new view."
                ),
                "required": True,
                "selection": (
                    "[('no_view', 'Nothing'), ('same_view', 'Update'),"
                    " ('new_view', 'Create')]"
                ),
                "ttype": "selection",
            },
            "mode_view_portal": {
                "code_generator_sequence": 49,
                "default": "no_portal",
                "field_description": "Mode View Portal",
                "help": "Will active feature to generate portal interface",
                "required": True,
                "selection": (
                    "[('no_portal', 'No portal'), ('enable_portal', 'Enable"
                    " portal')]"
                ),
                "ttype": "selection",
            },
            "mode_view_portal_enable_create": {
                "code_generator_sequence": 50,
                "default": True,
                "field_description": "Mode View Portal Enable Create",
                "help": "Feature for portal_enable_create",
                "ttype": "boolean",
            },
            "mode_view_portal_enable_delete": {
                "code_generator_sequence": 53,
                "default": True,
                "field_description": "Mode View Portal Enable Delete",
                "help": "Feature for portal_enable_delete",
                "ttype": "boolean",
            },
            "mode_view_portal_enable_read": {
                "code_generator_sequence": 51,
                "default": True,
                "field_description": "Mode View Portal Enable Read",
                "help": "Feature for portal_enable_read",
                "ttype": "boolean",
            },
            "mode_view_portal_enable_update": {
                "code_generator_sequence": 52,
                "default": True,
                "field_description": "Mode View Portal Enable Update",
                "help": "Feature for portal_enable_update",
                "ttype": "boolean",
            },
            "mode_view_portal_models": {
                "code_generator_sequence": 54,
                "field_description": "Mode View Portal Models",
                "help": "Separate models by ;",
                "ttype": "char",
            },
            "mode_view_snippet": {
                "code_generator_sequence": 55,
                "default": "no_snippet",
                "field_description": "Mode View Snippet",
                "help": (
                    "Will active feature to generate snippet on website"
                    " interface"
                ),
                "required": True,
                "selection": (
                    "[('no_snippet', 'No snippet'), ('enable_snippet', 'Enable"
                    " snippet')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet_enable_template_website_snippet_view": {
                "code_generator_sequence": 56,
                "default": True,
                "field_description": (
                    "Mode View Snippet Enable Template Website Snippet View"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "boolean",
            },
            "mode_view_snippet_template_generate_website_enable_javascript": {
                "code_generator_sequence": 60,
                "default": True,
                "field_description": (
                    "Mode View Snippet Template Generate Website Enable"
                    " Javascript"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "boolean",
            },
            "mode_view_snippet_template_generate_website_snippet_ctrl_featur": {
                "code_generator_sequence": 58,
                "default": "model_show_item_individual",
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet Ctrl"
                    " Featur"
                ),
                "help": "Feature for mode_view_snippet",
                "required": True,
                "selection": (
                    "[('helloworld', 'helloworld'),"
                    " ('model_show_item_individual', 'Model show item"
                    " individual'), ('model_show_item_list', 'Model show item"
                    " list')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet_template_generate_website_snippet_generic_mdl": {
                "code_generator_sequence": 57,
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet"
                    " Generic Mdl"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "char",
            },
            "mode_view_snippet_template_generate_website_snippet_type": {
                "code_generator_sequence": 61,
                "default": "effect",
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet Type"
                ),
                "help": "Feature for mode_view_snippet",
                "required": True,
                "selection": (
                    "[('content', 'Content'), ('effect', 'Effect'),"
                    " ('feature', 'Feature'), ('structure', 'Structure')]"
                ),
                "ttype": "selection",
            },
            "model_ids": {
                "code_generator_sequence": 71,
                "field_description": "Model",
                "relation": "devops.cg.model",
                "ttype": "many2many",
            },
            "model_to_remove_ids": {
                "code_generator_sequence": 72,
                "field_description": "Model to remove",
                "relation": "devops.cg.model",
                "ttype": "many2many",
            },
            "name": {
                "code_generator_sequence": 4,
                "field_description": "Name",
                "ttype": "char",
            },
            "plan_cg_id": {
                "code_generator_sequence": 11,
                "field_description": "Generated plan CG",
                "relation": "devops.plan.cg",
                "ttype": "many2one",
            },
            "root_workspace_id": {
                "code_generator_sequence": 5,
                "default_lambda": (
                    "lambda self: self.env.context.get('active_id')"
                ),
                "field_description": "Root workspace",
                "help": "Workspace where to execute the action.",
                "on_delete": "cascade",
                "relation": "devops.workspace",
                "required": True,
                "ttype": "many2one",
            },
            "root_workspace_id_is_me": {
                "code_generator_sequence": 7,
                "field_description": "ME",
                "help": "Add more automatisation about manage itself.",
                "ttype": "boolean",
            },
            "ssh_host": {
                "code_generator_sequence": 42,
                "field_description": "SSH host/IP",
                "help": "New remote system ssh_host, like local ip.",
                "ttype": "char",
            },
            "ssh_password": {
                "code_generator_sequence": 41,
                "field_description": "SSH password",
                "help": "New remote system ssh_password.",
                "ttype": "char",
            },
            "ssh_port": {
                "code_generator_sequence": 43,
                "default": 22,
                "field_description": "SSH Port",
                "help": "The port on the FTP server that accepts SSH calls.",
                "ttype": "integer",
            },
            "ssh_user": {
                "code_generator_sequence": 40,
                "field_description": "SSH user",
                "help": "New remote system ssh_user.",
                "ttype": "char",
            },
            "state": {
                "code_generator_sequence": 68,
                "default": "init",
                "field_description": "State",
                "required": True,
                "selection": (
                    "[('init', 'Init'), ('a_autopoiesis_devops', 'Autopoiesis"
                    " DevOps'), ('a_a_model', 'Model autopoiesis devops'),"
                    " ('a_b_field', 'Field'), ('a_c_action', 'Action'),"
                    " ('a_d_view', 'View'), ('a_f_devops_regen', 'DevOps"
                    " regenerate'), ('b_new_module', 'New module'),"
                    " ('d_import_data', 'Import data'),"
                    " ('e_migrate_from_external_ddb', 'Migrate from external"
                    " database'), ('f_new_project_society', 'New society'),"
                    " ('g_test_erplibre', 'Test ERPLibre'), ('code_module',"
                    " 'Code module'), ('code_shortcut', 'Shortcut"
                    " configuration code'), ('g_a_local', 'Test ERPLibre"
                    " local'), ('h_run_test', 'Run test'),"
                    " ('h_a_test_plan_exec', 'Run test plan execution'),"
                    " ('h_b_cg', 'Run test code generator'),"
                    " ('i_new_remote_system', 'New remote system'),"
                    " ('not_supported', 'Not supported'), ('final', 'Final')]"
                ),
                "ttype": "selection",
            },
            "system_erplibre_config_path_home_ids": {
                "code_generator_sequence": 32,
                "field_description": "List path home",
                "relation": "erplibre.config.path.home",
                "ttype": "many2many",
            },
            "system_method": {
                "code_generator_sequence": 31,
                "field_description": "Method",
                "help": "Choose the communication method.",
                "selection": (
                    "[('local', 'Local disk'), ('ssh', 'SSH remote server')]"
                ),
                "ttype": "selection",
            },
            "system_name": {
                "code_generator_sequence": 30,
                "field_description": "System name",
                "ttype": "char",
            },
            "system_ssh_connection_status": {
                "code_generator_sequence": 67,
                "field_description": "Ssh Connection Status",
                "help": "Status of test remote working_system_id",
                "ttype": "boolean",
            },
            "template_name": {
                "code_generator_sequence": 13,
                "field_description": "Template Name",
                "ttype": "char",
            },
            "uca_option_with_inherit": {
                "code_generator_sequence": 65,
                "field_description": "Uca Option With Inherit",
                "help": "UCA configuration - with inherit",
                "ttype": "boolean",
            },
            "use_existing_meta_module": {
                "code_generator_sequence": 63,
                "field_description": "Use Existing Meta Module",
                "help": "If False, will create new meta file from uc0.",
                "ttype": "boolean",
            },
            "use_existing_meta_module_uca_only": {
                "code_generator_sequence": 64,
                "field_description": "Use Existing Meta Module Uca Only",
                "help": "Force UcA only from feature use_existing_meta_module",
                "ttype": "boolean",
            },
            "use_existing_meta_module_ucb_only": {
                "code_generator_sequence": 66,
                "field_description": "Use Existing Meta Module Ucb Only",
                "help": "Force UcB only from feature use_existing_meta_module",
                "ttype": "boolean",
            },
            "use_external_cg": {
                "code_generator_sequence": 62,
                "field_description": "Use External Cg",
                "help": (
                    "If internal, will use same database of devops for build"
                    " code, this can interfere. If False, will generate"
                    " external database with sandbox."
                ),
                "ttype": "boolean",
            },
            "user_id": {
                "code_generator_sequence": 75,
                "default_lambda": "lambda s: s.env.user.id",
                "field_description": "User",
                "relation": "res.users",
                "required": True,
                "ttype": "many2one",
            },
            "working_cg_module_id": {
                "code_generator_sequence": 45,
                "field_description": "CG code builder",
                "relation": "code.generator.module",
                "ttype": "many2one",
            },
            "working_cg_writer_id": {
                "code_generator_sequence": 46,
                "field_description": "CG code writer",
                "relation": "code.generator.writer",
                "ttype": "many2one",
            },
            "working_compute_module_cg_path": {
                "code_generator_compute": "_compute_has_configured_path",
                "code_generator_sequence": 19,
                "field_description": "Working Compute Module Cg Path",
                "store": True,
                "ttype": "char",
            },
            "working_compute_module_path": {
                "code_generator_compute": "_compute_has_configured_path",
                "code_generator_sequence": 18,
                "field_description": "Working Compute Module Path",
                "store": True,
                "ttype": "char",
            },
            "working_compute_module_template_path": {
                "code_generator_compute": "_compute_has_configured_path",
                "code_generator_sequence": 20,
                "field_description": "Working Compute Module Template Path",
                "store": True,
                "ttype": "char",
            },
            "working_erplibre_config_path_home_id": {
                "code_generator_sequence": 33,
                "field_description": "Root path",
                "relation": "erplibre.config.path.home",
                "ttype": "many2one",
            },
            "working_module_cg_path": {
                "code_generator_sequence": 28,
                "field_description": "Working Module Cg Path",
                "help": (
                    "Need it for new module CG, relative path from folder of"
                    " workspace. If empty, will use working_module_path."
                ),
                "ttype": "char",
            },
            "working_module_cg_path_suggestion": {
                "code_generator_sequence": 23,
                "default": "-",
                "field_description": "Working Module Cg Path Suggestion",
                "help": "Suggestion relative path CG",
                "required": True,
                "selection": (
                    "[('-', 'Default'), ('#', 'Manual'),"
                    " ('addons/TechnoLibre_odoo-code-generator-template',"
                    " 'Code generator template')]"
                ),
                "ttype": "selection",
            },
            "working_module_id": {
                "code_generator_sequence": 14,
                "field_description": "Working module",
                "relation": "ir.module.module",
                "ttype": "many2one",
            },
            "working_module_name": {
                "code_generator_sequence": 26,
                "field_description": "Working Module Name",
                "help": "working_module_id or working_module_name",
                "ttype": "char",
            },
            "working_module_path": {
                "code_generator_sequence": 27,
                "field_description": "Working Module Path",
                "help": (
                    "Need it for new module, relative path from folder of"
                    " workspace."
                ),
                "ttype": "char",
            },
            "working_module_path_suggestion": {
                "code_generator_sequence": 22,
                "default": "#",
                "field_description": "Working Module Path Suggestion",
                "help": "Suggestion relative path",
                "required": True,
                "selection": (
                    "[('#', 'Manual'), ('addons/addons', 'Addons private'),"
                    " ('addons/ERPLibre_erplibre_addons', 'ERPLibre addons'),"
                    " ('addons/TechnoLibre_odoo-code-generator', 'Code"
                    " generator')]"
                ),
                "ttype": "selection",
            },
            "working_module_template_path": {
                "code_generator_sequence": 29,
                "field_description": "Working Module Template Path",
                "help": (
                    "Need it for new module template, relative path from"
                    " folder of workspace. If empty, will use"
                    " working_module_path."
                ),
                "ttype": "char",
            },
            "working_module_template_path_suggestion": {
                "code_generator_sequence": 24,
                "default": "-",
                "field_description": "Working Module Template Path Suggestion",
                "help": "Suggestion relative path template",
                "required": True,
                "selection": (
                    "[('-', 'Default'), ('#', 'Manual'),"
                    " ('addons/TechnoLibre_odoo-code-generator-template',"
                    " 'Code generator template')]"
                ),
                "ttype": "selection",
            },
            "working_project_name": {
                "code_generator_sequence": 15,
                "field_description": "Working Project Name",
                "ttype": "char",
            },
            "working_relative_folder": {
                "code_generator_sequence": 34,
                "field_description": "Relative folder",
                "ttype": "char",
            },
            "working_system_id": {
                "code_generator_sequence": 44,
                "field_description": "New/Existing system",
                "relation": "devops.system",
                "ttype": "many2one",
            },
            "workspace_folder": {
                "code_generator_compute": "_compute_workspace_folder",
                "code_generator_sequence": 8,
                "comment_before": """working_workspace_ids = fields.One2many(
related=\"working_system_id.devops_workspace_ids\"
)""",
                "field_description": "Workspace Folder",
                "help": "Absolute path for storing the devops_workspaces",
                "store": True,
                "ttype": "char",
            },
        }
        model_devops_plan_action_wizard = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
            lst_depend_model=lst_depend_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import logging
import os
import time
import uuid

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_plan_action_wizard.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """return self.env["devops.db.image"].search(
    [("name", "like", "erplibre_base")], limit=1
)""",
                    "name": "_default_image_db_selection",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for record in self:
    record.has_next = getattr(
        record, "state_exit_%s" % record.state, False
    )""",
                    "name": "_compute_has_next",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    is_update_system = bool(rec.working_system_id)
    if is_update_system:
        rec.system_name = rec.working_system_id.name_overwrite
        rec.ssh_host = rec.working_system_id.ssh_host
        rec.ssh_user = rec.working_system_id.ssh_user
        rec.ssh_password = rec.working_system_id.ssh_password""",
                    "name": "_compute_is_update_system",
                    "decorator": (
                        '@api.multi;@api.depends("working_system_id")'
                    ),
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    rec.has_configured_path = False
    # Module
    if (
        rec.working_module_path_suggestion == "#"
        and rec.working_module_path
    ):
        rec.has_configured_path = True
        rec.working_compute_module_path = rec.working_module_path
    if rec.working_module_path_suggestion != "#":
        rec.has_configured_path = True
        rec.working_compute_module_path = (
            rec.working_module_path_suggestion
        )
    # CG
    if (
        rec.working_module_cg_path_suggestion == "#"
        and not rec.working_module_cg_path
    ):
        rec.has_configured_path = False
    elif (
        rec.working_module_cg_path_suggestion == "#"
        and rec.working_module_cg_path
    ):
        rec.working_compute_module_cg_path = rec.working_module_cg_path
    elif rec.working_module_cg_path_suggestion == "-":
        rec.working_compute_module_cg_path = False
    else:
        rec.working_compute_module_cg_path = (
            rec.working_module_cg_path_suggestion
        )
    # Template
    if (
        rec.working_module_template_path_suggestion == "#"
        and not rec.working_module_template_path
    ):
        rec.has_configured_path = False
    elif (
        rec.working_module_template_path_suggestion == "#"
        and rec.working_module_template_path
    ):
        rec.working_compute_module_template_path = (
            rec.working_module_template_path
        )
    elif rec.working_module_template_path_suggestion == "-":
        rec.working_compute_module_template_path = False
    else:
        rec.working_compute_module_template_path = (
            rec.working_module_template_path_suggestion
        )
    # Module name
    if not rec.working_module_id and not rec.working_module_name:
        rec.has_configured_path = False""",
                    "name": "_compute_has_configured_path",
                    "decorator": (
                        '@api.multi;@api.depends("working_module_path_suggestion",'
                        ' "working_module_path",'
                        ' "working_module_cg_path_suggestion",'
                        ' "working_module_cg_path",'
                        ' "working_module_template_path_suggestion",'
                        ' "working_module_template_path", "working_module_id",'
                        ' "working_module_name")'
                    ),
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    if rec.working_module_id:
        rec.set_mode_edit_module()""",
                    "name": "_compute_is_new_module",
                    "decorator": (
                        '@api.multi;@api.depends("working_module_id")'
                    ),
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    rec.workspace_folder = ""
    if (
        rec.working_erplibre_config_path_home_id
        and rec.working_erplibre_config_path_home_id.name
    ):
        if rec.working_relative_folder:
            rec.workspace_folder = os.path.join(
                rec.working_erplibre_config_path_home_id.name,
                rec.working_relative_folder,
            )
        else:
            rec.workspace_folder = (
                rec.working_erplibre_config_path_home_id.name
            )""",
                    "name": "_compute_workspace_folder",
                    "decorator": (
                        '@api.multi;@api.depends("working_erplibre_config_path_home_id",'
                        ' "working_erplibre_config_path_home_id.name",'
                        ' "working_relative_folder")'
                    ),
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    rec.is_new_or_exist_ssh = (
        not rec.working_system_id
        or rec.working_system_id.method == "ssh"
    )""",
                    "name": "_compute_is_new_or_exist_ssh",
                    "decorator": (
                        '@api.multi;@api.depends("system_method",'
                        ' "working_system_id")'
                    ),
                    "param": "self",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    rec.can_search_workspace = False
    if rec.working_system_id:
        if (
            rec.system_method == "ssh"
            and rec.system_ssh_connection_status
        ):
            rec.can_search_workspace = True
        elif rec.system_method == "local":
            rec.can_search_workspace = True""",
                    "name": "_compute_can_search_workspace",
                    "decorator": (
                        '@api.multi;@api.depends("working_system_id",'
                        ' "system_ssh_connection_status", "system_method")'
                    ),
                    "param": "self",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """return [
    ("init", "Init"),
    ("a_autopoiesis_devops", "Autopoiesis DevOps"),
    ("a_a_model", "Model autopoiesis devops"),
    ("a_b_field", "Field"),
    ("a_c_action", "Action"),
    ("a_d_view", "View"),
    ("a_f_devops_regen", "DevOps regenerate"),
    ("b_new_module", "New module"),
    # ("c_existing_module", "Existing module"),
    # ("c_a_model", "Model existing module"),
    ("d_import_data", "Import data"),
    ("e_migrate_from_external_ddb", "Migrate from external database"),
    ("f_new_project_society", "New society"),
    ("g_test_erplibre", "Test ERPLibre"),
    ("code_module", "Code module"),
    ("code_shortcut", "Shortcut configuration code"),
    ("g_a_local", "Test ERPLibre local"),
    ("h_run_test", "Run test"),
    ("h_a_test_plan_exec", "Run test plan execution"),
    ("h_b_cg", "Run test code generator"),
    ("i_new_remote_system", "New remote system"),
    ("not_supported", "Not supported"),
    ("final", "Final"),
]""",
                    "name": "_selection_state",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.working_system_id = False
return self._reopen_self()""",
                    "name": "clear_working_system_id",
                    "param": "self",
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "a_autopoiesis_devops"
return self._reopen_self()""",
                    "name": "state_goto_a_autopoiesis_devops",
                    "param": "self",
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "a_a_model"
return self._reopen_self()""",
                    "name": "state_goto_a_a_model",
                    "param": "self",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "a_b_field"
return self._reopen_self()""",
                    "name": "state_goto_a_b_field",
                    "param": "self",
                    "sequence": 12,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "a_e_cg_regen"
return self._reopen_self()""",
                    "name": "state_goto_a_e_cg_regen",
                    "param": "self",
                    "sequence": 13,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "a_f_devops_regen"
return self._reopen_self()""",
                    "name": "state_goto_a_f_devops_regen",
                    "param": "self",
                    "sequence": 14,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "a_g_regen"
return self._reopen_self()""",
                    "name": "state_goto_a_g_regen",
                    "param": "self",
                    "sequence": 15,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "f_new_project_society"
return self._reopen_self()""",
                    "name": "state_goto_f_new_project_society",
                    "param": "self",
                    "sequence": 16,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "g_test_erplibre"
return self._reopen_self()""",
                    "name": "state_goto_g_test_erplibre",
                    "param": "self",
                    "sequence": 17,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "code_module"
return self._reopen_self()""",
                    "name": "state_goto_code_module",
                    "param": "self",
                    "sequence": 18,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.working_project_name = "Autopoieses - erplibre_devops"
self.code_generator_name = "code_generator_erplibre_devops"
self.template_name = "code_generator_template_erplibre_devops"
return self.goto_autopoiese("erplibre_devops")""",
                    "name": (
                        "state_goto_code_module_shortcut_autopoieses_devops"
                    ),
                    "param": "self",
                    "sequence": 19,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.working_project_name = "Autopoieses - code_generator"
self.working_module_cg_path_suggestion = (
    "addons/TechnoLibre_odoo-code-generator-template"
)
self.working_module_template_path_suggestion = (
    "addons/TechnoLibre_odoo-code-generator-template"
)
self.code_generator_name = "code_generator_code_generator"
self.template_name = "code_generator_template_code_generator"
self.use_existing_meta_module_ucb_only = True
self.is_remote_cg = True
return self.goto_autopoiese("code_generator")""",
                    "name": "state_goto_code_module_shortcut_autopoieses_code_generator",
                    "param": "self",
                    "sequence": 20,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.working_project_name = (
    "Autopoieses - code_generator_code_generator"
)
self.working_module_cg_path_suggestion = (
    "addons/TechnoLibre_odoo-code-generator-template"
)
self.working_module_template_path_suggestion = (
    "addons/TechnoLibre_odoo-code-generator-template"
)
self.code_generator_name = "code_generator_code_generator"
self.template_name = "code_generator_template_code_generator"
self.use_existing_meta_module_uca_only = True
self.uca_option_with_inherit = True
self.is_remote_cg = True
return self.goto_autopoiese("code_generator")""",
                    "name": "state_goto_code_module_shortcut_autopoieses_code_generator_code_generator",
                    "param": "self",
                    "sequence": 21,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if module_name:
    self.fill_working_module_name_or_id(module_name)
    self.use_external_cg = True
    self.config_uca_enable_export_data = False
    self.use_existing_meta_module = True
    self.is_cg_temporary = True
    self.set_mode_edit_module()
    self.action_code_module_autocomplete_module_path()
return self.state_goto_code_module()""",
                    "name": "goto_autopoiese",
                    "param": "self, module_name",
                    "sequence": 22,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "code_shortcut"
return self._reopen_self()""",
                    "name": "state_goto_code_shortcut",
                    "param": "self",
                    "sequence": 23,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "h_run_test"
return self._reopen_self()""",
                    "name": "state_goto_h_run_test",
                    "param": "self",
                    "sequence": 24,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """return {
    "type": "ir.actions.act_window",
    "res_model": "devops.test.plan.exec",
    "view_mode": "form",
    "target": "new",
    "context": {"default_workspace_id": self.root_workspace_id.id},
}""",
                    "name": "state_goto_h_a_test_plan_exec",
                    "param": "self",
                    "sequence": 25,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "h_b_cg"
return self._reopen_self()""",
                    "name": "state_goto_h_b_cg",
                    "param": "self",
                    "sequence": 26,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "g_a_local"
return self._reopen_self()""",
                    "name": "state_goto_g_a_local",
                    "param": "self",
                    "sequence": 27,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """# self.state = "a_c_action"
self.state = "not_supported"
return self._reopen_self()""",
                    "name": "state_goto_a_c_action",
                    "param": "self",
                    "sequence": 28,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """# self.state = "a_d_view"
self.state = "not_supported"
return self._reopen_self()""",
                    "name": "state_goto_a_d_view",
                    "param": "self",
                    "sequence": 29,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "not_supported"
return self._reopen_self()

    # def state_goto_c_existing_module(self):
    #     self.state = "c_existing_module"
    #     return self._reopen_self()""",
                    "name": "state_goto_not_supported",
                    "param": "self",
                    "sequence": 30,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "i_new_remote_system"
self.working_system_id = False
self.is_force_local_system = False
return self._reopen_self()""",
                    "name": "state_goto_i_new_remote_system",
                    "param": "self",
                    "sequence": 31,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """self.state = "i_new_remote_system"
self.working_system_id = self.env.ref(
    "erplibre_devops.devops_system_local"
).id
self.is_force_local_system = True
self.system_name = self.working_system_id.name_overwrite
return self._reopen_self()

    # def state_goto_c_a_model(self):
    #     self.state = "c_a_model"
    #     return self._reopen_self()

    # def state_exit_configure(self):
    #     self.state = 'custom'""",
                    "name": "state_goto_i_local_system",
                    "param": "self",
                    "sequence": 32,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_not_supported",
                    "param": "self",
                    "sequence": 33,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_a_autopoiesis_devops",
                    "param": "self",
                    "sequence": 34,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "a_autopoiesis_devops"''',
                    "name": "state_previous_a_a_model",
                    "param": "self",
                    "sequence": 35,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "a_autopoiesis_devops"''',
                    "name": "state_previous_a_b_field",
                    "param": "self",
                    "sequence": 36,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_i_new_remote_system",
                    "param": "self",
                    "sequence": 37,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "a_autopoiesis_devops"''',
                    "name": "state_previous_a_c_action",
                    "param": "self",
                    "sequence": 38,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "a_autopoiesis_devops"''',
                    "name": "state_previous_a_d_view",
                    "param": "self",
                    "sequence": 39,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_code_module",
                    "param": "self",
                    "sequence": 40,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_code_shortcut",
                    "param": "self",
                    "sequence": 41,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "a_autopoiesis_devops"''',
                    "name": "state_previous_a_f_devops_regen",
                    "param": "self",
                    "sequence": 42,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_f_new_project_society",
                    "param": "self",
                    "sequence": 43,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"''',
                    "name": "state_previous_g_test_erplibre",
                    "param": "self",
                    "sequence": 44,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "g_test_erplibre"''',
                    "name": "state_previous_g_a_local",
                    "param": "self",
                    "sequence": 45,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "code_module"''',
                    "name": "state_previous_g_b_TODODO",
                    "param": "self",
                    "sequence": 46,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "init"

    #
    # def state_previous_h_a_test_plan_exec(self):
    #     self.state = "h_run_test"''',
                    "name": "state_previous_h_run_test",
                    "param": "self",
                    "sequence": 47,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.state = "h_run_test"''',
                    "name": "state_previous_h_b_cg",
                    "param": "self",
                    "sequence": 48,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''with self.root_workspace_id.devops_create_exec_bundle(
    "Plan c_a_model"
) as wp_id:
    module_name = (
        self.working_module_id.name
        if self.working_module_id
        else self.working_module_name
    )
    self.generate_new_model(
        wp_id, module_name, "Existing module new model"
    )
    # finally
    self.state = "final"''',
                    "name": "state_exit_c_a_model",
                    "param": "self",
                    "sequence": 49,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''with self.root_workspace_id.devops_create_exec_bundle(
    "Plan code_module"
) as wp_id:
    # TODO this is a duplicate of action_code_module_generate
    module_name = (
        self.working_module_id.name
        if self.working_module_id
        else self.working_module_name
    )
    self.generate_new_model(
        wp_id,
        module_name,
        "New empty module",
        is_new_module=True,
        module_path=self.working_compute_module_path,
        module_cg_path=self.working_compute_module_cg_path,
        module_template_path=self.working_compute_module_template_path,
        is_relative_path=True,
    )
    # finally
    self.state = "final"''',
                    "name": "state_exit_code_module",
                    "param": "self",
                    "sequence": 50,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''with self.root_workspace_id.devops_create_exec_bundle(
    "Plan g_a_local"
) as wp_id:
    self.erplibre_mode = self.env.ref(
        "erplibre_devops.erplibre_mode_docker_test"
    ).id
    # Create a workspace with same system of actual workspace, will be in test mode
    dct_wp = {
        "system_id": wp_id.system_id.id,
        "folder": f"/tmp/test_erplibre_{uuid.uuid4()}",
        "erplibre_mode": self.erplibre_mode.id,
        "image_db_selection": self.image_db_selection.id,
    }
    local_wp_id = self.env["devops.workspace"].create(dct_wp)
    self.create_workspace_id = local_wp_id.id
    local_wp_id.action_install_workspace()
    local_wp_id.action_start()
    # TODO implement detect when website is up or cancel state with error
    time.sleep(5)
    local_wp_id.action_restore_db_image()
    if self.enable_package_srs:
        local_wp_id.install_module("project_srs")
    local_wp_id.action_open_local_view()
    # finally
    self.state = "final"''',
                    "name": "state_exit_g_a_local",
                    "param": "self",
                    "sequence": 51,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''with self.root_workspace_id.devops_create_exec_bundle(
    "Plan a_a_model"
) as wp_id:
    module_name = "erplibre_devops"
    self.generate_new_model(
        wp_id, module_name, "Autopoiesis", is_autopoiesis=True
    )
    # finally
    self.state = "final"''',
                    "name": "state_exit_a_a_model",
                    "param": "self",
                    "sequence": 52,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''with self.root_workspace_id.devops_create_exec_bundle(
    "Plan a_f_devops_regen"
) as wp_id:
    self.generate_new_model(
        wp_id,
        "erplibre_devops",
        "Autopoiesis regenerate",
        is_autopoiesis=True,
    )
    # finally
    self.state = "final"
    # # Project
    # cg_id = self.env["devops.cg"].create(
    #     {
    #         "name": "Autopoiesis regenerate",
    #         "devops_workspace_ids": [(6, 0, wp_id.ids)],
    #         "force_clean_before_generate": self.force_generate,
    #     }
    # )
    # Module
    # cg_module_id = self.env["devops.cg.module"].create(
    #     {
    #         "name": "erplibre_devops",
    #         "code_generator": cg_id.id,
    #         "devops_workspace_ids": [(6, 0, wp_id.ids)],
    #     }
    # )
    # plan_cg_value = {
    #     "workspace_id": wp_id.id,
    #     "cg_self_add_config_cg": True,
    #     "path_working_erplibre": wp_id.folder,
    #     "code_mode_context_generator": "autopoiesis",
    #     "mode_view": "same_view",
    #     "devops_cg_ids": [(6, 0, cg_id.ids)],
    #     "devops_cg_module_ids": [(6, 0, cg_module_id.ids)],
    #     "devops_cg_model_ids": [(6, 0, [])],
    #     "devops_cg_field_ids": [(6, 0, [])],
    #     "stop_execution_if_env_not_clean": not self.force_generate,
    #     "use_external_cg": self.use_external_cg,
    # }
    # plan_cg_id = self.env["devops.plan.cg"].create(plan_cg_value)
    # # Generate
    # plan_cg_id.action_code_generator_generate_all()
    # self.generated_new_project_id = plan_cg_id.last_new_project_cg.id
    # self.plan_cg_id = plan_cg_id.id
    # self.working_cg_module_id = (
    #     self.plan_cg_id.last_code_generator_module.id
    # )
    # self.working_cg_writer_id = (
    #     self.plan_cg_id.last_code_generator_writer.id
    # )
    # Format module
    # cmd_format = (
    #     f"./script/maintenance/format.sh"
    #     f" ./addons/ERPLibre_erplibre_addons/erplibre_devops"
    # )
    # wp_id.execute(
    #     cmd=cmd_format,
    #     run_into_workspace=True,
    #     to_instance=True,
    # )
    # # finally
    # self.state = "final"''',
                    "name": "state_exit_a_f_devops_regen",
                    "param": "self",
                    "sequence": 53,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """with self.root_workspace_id.devops_create_exec_bundle(
    "Code Module - auto-complete module path"
) as wp_id:
    # TODO complete use_existing_meta_module from suggested cg path
    module_name = None
    if self.working_module_id:
        module_name = self.working_module_id.name
    elif self.working_module_name:
        module_name = self.working_module_name
    if not module_name:
        # TODO manage error into action wizard
        # raise exceptions.Warning(f"Module name is empty.")
        return self._reopen_self()
    # Search absolute path
    exec_id = wp_id.execute(
        cmd=(
            "./script/addons/check_addons_exist.py --output_path -m"
            f" {module_name}"
        ),
        run_into_workspace=True,
        error_on_status=False,
    )
    path_module = exec_id.log_all.strip()
    if exec_id.exec_status == 2:
        raise exceptions.Warning(
            f"The module '{module_name}' is duplicated :"
            f" \\n{path_module}"
        )
    elif exec_id.exec_status:
        # raise exceptions.Warning(f"Cannot find module '{module_name}'")
        self.set_mode_new_module()
        return self._reopen_self()
    if not path_module:
        # raise exceptions.Warning(f"Cannot find module path.")
        self.set_mode_new_module()
        return self._reopen_self()
    # Extract relative path
    dir_name, basename = os.path.split(path_module)
    if dir_name.startswith(wp_id.folder):
        relative_path_module = dir_name[len(wp_id.folder) + 1 :]
    else:
        relative_path_module = dir_name
    # Check if exist in suggested path
    lst_suggest_path = [
        a
        for a, b in self._fields[
            "working_module_path_suggestion"
        ].selection
        if a not in ["#"]
    ]
    if relative_path_module in lst_suggest_path:
        self.working_module_path_suggestion = relative_path_module
    else:
        self.working_module_path = relative_path_module
    self.set_mode_edit_module()
return self._reopen_self()""",
                    "name": "action_code_module_autocomplete_module_path",
                    "param": "self",
                    "sequence": 54,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.is_new_module = True
self.mode_view_generator = "new_view"''',
                    "name": "set_mode_new_module",
                    "param": "self",
                    "sequence": 55,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": '''self.is_new_module = False
self.mode_view_generator = "same_view"''',
                    "name": "set_mode_edit_module",
                    "param": "self",
                    "sequence": 56,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """path_module = ""
# if not is_new_module:
#     # Search relative path
#     exec_id = wp_id.execute(
#         cmd=(
#             "./script/addons/check_addons_exist.py --output_path -m"
#             f" {module_name}"
#         ),
#         run_into_workspace=True,
#     )
#     if exec_id.exec_status:
#         raise exceptions.Warning(f"Cannot find module '{module_name}'")
#     path_module = exec_id.log_all.strip()
if module_path:
    # Overwrite it
    path_module = module_path
if not path_module:
    raise exceptions.Warning(f"Cannot find module path.")
if not is_relative_path:
    dir_name, basename = os.path.split(path_module)
    if dir_name.startswith(wp_id.folder):
        relative_path_module = dir_name[len(wp_id.folder) + 1 :]
    else:
        relative_path_module = dir_name
else:
    relative_path_module = path_module
if not module_cg_path:
    relative_path_module_cg = relative_path_module
else:
    if module_cg_path.startswith(wp_id.folder):
        relative_path_module_cg = module_cg_path[
            len(wp_id.folder) + 1 :
        ]
    else:
        relative_path_module_cg = module_cg_path
if not module_template_path:
    relative_path_module_template = relative_path_module
else:
    if module_template_path.startswith(wp_id.folder):
        relative_path_module_template = module_template_path[
            len(wp_id.folder) + 1 :
        ]
    else:
        relative_path_module_template = module_template_path

# TODO this is a bug, no need that in reality, but action_code_generator_generate_all loop into it
#  Remove action_code_generator_generate_all
# Project
cg_id = self.env["devops.cg"].create(
    {
        "name": project_name,
        "devops_workspace_ids": [(6, 0, wp_id.ids)],
        "force_clean_before_generate": self.force_generate,
    }
)
# Module
cg_module_id = self.env["devops.cg.module"].create(
    {
        "name": module_name,
        "code_generator": cg_id.id,
        "devops_workspace_ids": [(6, 0, wp_id.ids)],
    }
)
# Model
for cg_model_id in self.model_ids:
    cg_model_id.module_id = cg_module_id.id
    cg_model_id.devops_workspace_ids = [(6, 0, wp_id.ids)]
lst_field_id = [b.id for a in self.model_ids for b in a.field_ids]
# Complete plan to code_generator
# TODO the code_generator has path_code_generator_to_generate_cg and path_code_generator_to_generate_template
#  into template directory
plan_cg_value = {
    "workspace_id": wp_id.id,
    "mode_view": self.mode_view_generator,
    "path_working_erplibre": wp_id.folder,
    "path_code_generator_to_generate": relative_path_module,
    "path_code_generator_to_generate_cg": relative_path_module_cg,
    "path_code_generator_to_generate_template": relative_path_module_template,
    "devops_cg_ids": [(6, 0, cg_id.ids)],
    "devops_cg_module_ids": [(6, 0, cg_module_id.ids)],
    "devops_cg_model_ids": [(6, 0, self.model_ids.ids)],
    "devops_cg_model_to_remove_ids": [
        (6, 0, self.model_to_remove_ids.ids)
    ],
    "devops_cg_field_ids": [(6, 0, lst_field_id)],
    "stop_execution_if_env_not_clean": not self.force_generate,
    "use_external_cg": self.use_external_cg,
    "use_existing_meta_module": self.use_existing_meta_module,
    "use_existing_meta_module_uca_only": self.use_existing_meta_module_uca_only,
    "uca_option_with_inherit": self.uca_option_with_inherit,
    "use_existing_meta_module_ucb_only": self.use_existing_meta_module_ucb_only,
}
# Update configuration self-gen
if is_autopoiesis:
    plan_cg_value["cg_self_add_config_cg"] = True
    plan_cg_value["code_mode_context_generator"] = "autopoiesis"
# Support data
plan_cg_value[
    "config_uca_enable_export_data"
] = self.config_uca_enable_export_data

# Support snippet
if self.mode_view_snippet and self.mode_view_snippet != "no_snippet":
    plan_cg_value["mode_view_snippet"] = self.mode_view_snippet
    plan_cg_value[
        "mode_view_snippet_enable_template_website_snippet_view"
    ] = self.mode_view_snippet_enable_template_website_snippet_view
    plan_cg_value[
        "mode_view_snippet_template_generate_website_snippet_generic_mdl"
    ] = (
        self.mode_view_snippet_template_generate_website_snippet_generic_mdl
    )
    plan_cg_value[
        "mode_view_snippet_template_generate_website_snippet_ctrl_featur"
    ] = (
        self.mode_view_snippet_template_generate_website_snippet_ctrl_featur
    )
    plan_cg_value[
        "mode_view_snippet_template_generate_website_enable_javascript"
    ] = (
        self.mode_view_snippet_template_generate_website_enable_javascript
    )
    plan_cg_value[
        "mode_view_snippet_template_generate_website_snippet_type"
    ] = self.mode_view_snippet_template_generate_website_snippet_type
if self.mode_view_portal and self.mode_view_portal != "no_portal":
    plan_cg_value["mode_view_portal"] = self.mode_view_portal
    plan_cg_value[
        "mode_view_portal_enable_create"
    ] = self.mode_view_portal_enable_create
    plan_cg_value[
        "mode_view_portal_enable_read"
    ] = self.mode_view_portal_enable_read
    plan_cg_value[
        "mode_view_portal_enable_update"
    ] = self.mode_view_portal_enable_update
    plan_cg_value[
        "mode_view_portal_enable_delete"
    ] = self.mode_view_portal_enable_delete
    plan_cg_value[
        "mode_view_portal_models"
    ] = self.mode_view_portal_models
if self.code_generator_name:
    plan_cg_value["code_generator_name"] = self.code_generator_name
if self.template_name:
    plan_cg_value["template_name"] = self.template_name
# Generate
plan_cg_id = self.env["devops.plan.cg"].create(plan_cg_value)
plan_cg_id.action_code_generator_generate_all()
self.generated_new_project_id = plan_cg_id.last_new_project_cg.id
self.plan_cg_id = plan_cg_id.id
self.working_cg_module_id = plan_cg_id.last_code_generator_module.id
self.working_cg_writer_id = plan_cg_id.last_code_generator_writer.id
# Format module
cmd_format = (
    "./script/maintenance/format.sh"
    f" {relative_path_module}/{module_name}"
)
wp_id.execute(
    cmd=cmd_format,
    run_into_workspace=True,
    to_instance=True,
)
# Git add
if is_new_module:
    lst_default_file = [module_name]
else:
    lst_default_file = [
        f"{module_name}/__manifest__.py",
        f"{module_name}/security/ir.model.access.csv",
        f"{module_name}/views/menu.xml",
    ]
    if self.model_ids:
        lst_default_file.append(f"{module_name}/models/__init__.py")
        for cg_model_id in self.model_ids:
            model_file_name = cg_model_id.name.replace(".", "_")
            lst_default_file.append(
                f"{module_name}/models/{model_file_name}.py"
            )
            lst_default_file.append(
                f"{module_name}/views/{model_file_name}.xml"
            )
cmd_git_add = ";".join([f"git add '{a}'" for a in lst_default_file])
# Git remove
lst_default_file_rm = []
if self.model_to_remove_ids:
    for cg_model_id in self.model_to_remove_ids:
        model_file_name = cg_model_id.name.replace(".", "_")
        lst_default_file_rm.append(
            f"{module_name}/models/{model_file_name}.py"
        )
        lst_default_file_rm.append(
            f"{module_name}/views/{model_file_name}.xml"
        )
cmd_git_rm = ";".join([f"git rm '{a}'" for a in lst_default_file_rm])
if cmd_git_add and cmd_git_rm:
    cmd_git = f"{cmd_git_add};{cmd_git_rm}"
elif cmd_git_add:
    cmd_git = cmd_git_add
elif cmd_git_rm:
    cmd_git = cmd_git_rm
else:
    cmd_git = ""
if cmd_git:
    wp_id.execute(
        cmd=cmd_git,
        folder=relative_path_module,
        run_into_workspace=True,
        to_instance=True,
    )""",
                    "name": "generate_new_model",
                    "param": (
                        "self, wp_id, module_name, project_name,"
                        " is_autopoiesis=False, module_path=None,"
                        " module_cg_path=None, module_template_path=None,"
                        " is_relative_path=False, is_new_module=False"
                    ),
                    "sequence": 57,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not module_name:
    return
module_id = self.env["ir.module.module"].search(
    [("name", "=", module_name)], limit=1
)
if module_id:
    self.working_module_id = module_id.id
else:
    self.working_module_name = module_name""",
                    "name": "fill_working_module_name_or_id",
                    "param": "self, module_name",
                    "sequence": 58,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.execute_terminal_gui(
    force_no_sshpass_no_arg=True
)
return self._reopen_self()""",
                    "name": "ssh_system_open_terminal",
                    "param": "self",
                    "sequence": 59,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.action_search_workspace()
return self._reopen_self()""",
                    "name": "search_workspace_from_system",
                    "param": "self",
                    "sequence": 60,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.action_install_dev_system()
return self._reopen_self()""",
                    "name": "ssh_system_install_minimal",
                    "param": "self",
                    "sequence": 61,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.action_install_dev_system()
return self._reopen_self()""",
                    "name": "ssh_system_install_docker",
                    "param": "self",
                    "sequence": 62,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.action_install_dev_system()
return self._reopen_self()""",
                    "name": "ssh_system_install_dev",
                    "param": "self",
                    "sequence": 63,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.action_install_dev_system()
return self._reopen_self()""",
                    "name": "ssh_system_install_production",
                    "param": "self",
                    "sequence": 64,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
self.working_system_id.action_install_dev_system()
return self._reopen_self()""",
                    "name": "ssh_system_install_all",
                    "param": "self",
                    "sequence": 65,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    # TODO manage this error
    return
ws_value = {
    "system_id": self.working_system_id.id,
    "folder": self.workspace_folder,
    "erplibre_mode": self.erplibre_mode.id,
    "image_db_selection": self.image_db_selection.id,
}
ws_id = self.env["devops.workspace"].create(ws_value)
self.create_workspace_id = ws_id.id
# TODO missing check status before continue
# TODO missing with workspace me to catch error
ws_id.action_install_workspace()
ws_id.action_start()
# TODO implement detect when website is up or cancel state with error
time.sleep(5)
ws_id.action_restore_db_image()
ws_id.action_open_local_view()
return self._reopen_self()""",
                    "name": "ssh_system_create_workspace",
                    "param": "self",
                    "sequence": 66,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """system_ids = (
    self.root_workspace_id.system_id.get_local_system_id_from_ssh_config()
)
for system_id in system_ids:
    if system_id.ssh_connection_status:
        # TODO the connection status is never activate for new remote system
        system_id.action_search_workspace()
return self._reopen_self()""",
                    "name": "search_subsystem_workspace",
                    "param": "self",
                    "sequence": 67,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """system_name = self.system_name
if not system_name:
    system_name = "New remote system " + uuid.uuid4().hex[:6]
system_value = {
    "name_overwrite": system_name,
    "parent_system_id": self.root_workspace_id.system_id.id,
    "method": "ssh",
    "ssh_use_sshpass": True,
    "ssh_host": self.ssh_host,
    "ssh_user": self.ssh_user,
    "ssh_password": self.ssh_password,
}
system_id = self.env["devops.system"].create(system_value)
self.working_system_id = system_id
try:
    # Just open and close the connection
    with self.working_system_id.ssh_connection():
        pass
except Exception:
    pass
return self._reopen_self()""",
                    "name": "ssh_create_and_test",
                    "param": "self",
                    "sequence": 68,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """if not self.working_system_id:
    raise exceptions.Warning(
        "Missing SSH system id from plan Wizard, wrong configuration,"
        " please contact your administrator."
    )
if self.system_name:
    self.working_system_id.name_overwrite = self.system_name
self.working_system_id.ssh_host = self.ssh_host
self.working_system_id.ssh_user = self.ssh_user
self.working_system_id.ssh_password = self.ssh_password
self.working_system_id.ssh_use_sshpass = True
try:
    # Just open and close the connection
    with self.working_system_id.ssh_connection():
        pass
except Exception:
    pass
return self._reopen_self()""",
                    "name": "ssh_test_system_exist",
                    "param": "self",
                    "sequence": 69,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    if rec.plan_cg_id:
        if not rec.is_remote_cg:
            rec.plan_cg_id.action_git_commit()
        else:
            rec.plan_cg_id.action_git_commit_remote()
return self._reopen_self()""",
                    "name": "action_git_commit",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 70,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    if rec.plan_cg_id:
        rec.plan_cg_id.action_git_meld_remote()
return self._reopen_self()""",
                    "name": "action_git_meld_remote",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 71,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """for rec in self:
    if rec.plan_cg_id:
        rec.plan_cg_id.action_git_clean_remote()
return self._reopen_self()""",
                    "name": "action_git_clean_remote",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 72,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
                {
                    "code": """with self.root_workspace_id.devops_create_exec_bundle(
    "Action Code Module - Generate"
) as wp_id:
    module_name = (
        self.working_module_id.name
        if self.working_module_id
        else self.working_module_name
    )
    self.generate_new_model(
        wp_id,
        module_name,
        self.working_project_name,
        module_path=self.working_compute_module_path,
        module_cg_path=self.working_compute_module_cg_path,
        module_template_path=self.working_compute_module_template_path,
        is_new_module=self.is_new_module,
        is_relative_path=True,
    )
self.force_show_final = True
return self._reopen_self()""",
                    "name": "action_code_module_generate",
                    "param": "self",
                    "sequence": 73,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_action_wizard.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Plan Cg
        model_model = "devops.plan.cg"
        model_name = "devops_plan_cg"
        dct_model = {
            "description": "Planification to use Code Generator",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "cg_demo_type_data": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 44,
                "default": "simple",
                "field_description": "Cg Demo Type Data",
                "help": (
                    "Generate a set of data depend of the type to generate."
                ),
                "required": True,
                "selection": (
                    "[('simple', 'Simple'), ('ore', 'ORE'), ('devops_example',"
                    " 'devops example')]"
                ),
                "ttype": "selection",
            },
            "cg_self_add_config_cg": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 42,
                "field_description": "Cg Self Add Config Cg",
                "help": "Will use both feature of cg for self generate.",
                "ttype": "boolean",
            },
            "code_generator_name": {
                "code_generator_sequence": 9,
                "field_description": "Code Generator Name",
                "ttype": "char",
            },
            "code_mode_context_generator": {
                "code_generator_form_simple_view_sequence": 37,
                "code_generator_sequence": 12,
                "default": "default",
                "field_description": "Code Mode Context Generator",
                "help": "Change context variable easy change.",
                "selection": (
                    "[('default', 'Default'), ('autopoiesis', 'Autopoiesis'),"
                    " ('custom', 'Custom')]"
                ),
                "ttype": "selection",
            },
            "config_uca_enable_export_data": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 26,
                "default": True,
                "field_description": "Config Uca Enable Export Data",
                "help": (
                    "Will enable option nonmenclator in CG to export data"
                    " associate to models."
                ),
                "ttype": "boolean",
            },
            "devops_cg_diff": {
                "code_generator_form_simple_view_sequence": 48,
                "code_generator_sequence": 15,
                "field_description": "Diff addons",
                "help": "Will show diff git",
                "ttype": "text",
            },
            "devops_cg_erplibre_devops_error_log": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 14,
                "field_description": "Error CG erplibre_devops new_project",
                "help": (
                    "Will show code generator error for new project"
                    " erplibre_devops, last execution"
                ),
                "readonly": True,
                "ttype": "text",
            },
            "devops_cg_erplibre_devops_log": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 20,
                "field_description": "Log CG erplibre_devops new_project",
                "help": (
                    "Will show code generator log for new project"
                    " erplibre_devops, last execution"
                ),
                "readonly": True,
                "ttype": "text",
            },
            "devops_cg_field_ids": {
                "code_generator_form_simple_view_sequence": 46,
                "code_generator_sequence": 25,
                "field_description": "Field",
                "force_widget": "many2many",
                "relation": "devops.cg.field",
                "ttype": "many2many",
            },
            "devops_cg_ids": {
                "code_generator_form_simple_view_sequence": 43,
                "code_generator_sequence": 21,
                "field_description": "Project",
                "force_widget": "many2many",
                "relation": "devops.cg",
                "ttype": "many2many",
            },
            "devops_cg_log_addons": {
                "code_generator_form_simple_view_sequence": 52,
                "code_generator_sequence": 19,
                "field_description": "Log code generator",
                "help": "Will show code generator log, last execution",
                "ttype": "text",
            },
            "devops_cg_model_ids": {
                "code_generator_form_simple_view_sequence": 45,
                "code_generator_sequence": 23,
                "field_description": "Model",
                "force_widget": "many2many",
                "relation": "devops.cg.model",
                "ttype": "many2many",
            },
            "devops_cg_model_to_remove_ids": {
                "code_generator_form_simple_view_sequence": 47,
                "code_generator_sequence": 24,
                "field_description": "Model to remove",
                "force_widget": "many2many",
                "relation": "devops.cg.model",
                "ttype": "many2many",
            },
            "devops_cg_module_ids": {
                "code_generator_form_simple_view_sequence": 44,
                "code_generator_sequence": 22,
                "field_description": "Module",
                "force_widget": "many2many",
                "relation": "devops.cg.module",
                "ttype": "many2many",
            },
            "devops_cg_stat": {
                "code_generator_form_simple_view_sequence": 50,
                "code_generator_sequence": 17,
                "field_description": "Stat addons",
                "help": "Will show statistique code",
                "ttype": "text",
            },
            "devops_cg_status": {
                "code_generator_form_simple_view_sequence": 49,
                "code_generator_sequence": 16,
                "field_description": "Status addons",
                "help": "Will show status git",
                "ttype": "text",
            },
            "devops_cg_tree_addons": {
                "code_generator_form_simple_view_sequence": 51,
                "code_generator_sequence": 18,
                "field_description": "Tree addons",
                "help": (
                    "Will show generated files from code generator or humain"
                ),
                "ttype": "text",
            },
            "has_re_execute_new_project": {
                "code_generator_compute": (
                    "_compute_has_re_execute_new_project"
                ),
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 27,
                "field_description": "Has Re Execute New Project",
                "store": True,
                "ttype": "boolean",
            },
            "is_clear_before_cg_demo": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 51,
                "default": True,
                "field_description": "Is Clear Before Cg Demo",
                "help": (
                    "When generate data demo for code generator, delete all"
                    " data before."
                ),
                "ttype": "boolean",
            },
            "last_code_generator_module": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 47,
                "field_description": "Last Code Generator Module",
                "relation": "code.generator.module",
                "ttype": "many2one",
            },
            "last_code_generator_writer": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 46,
                "field_description": "Last Code Generator Writer",
                "relation": "code.generator.writer",
                "ttype": "many2one",
            },
            "last_new_project_cg": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 45,
                "field_description": "Last new project cg",
                "relation": "devops.cg.new_project",
                "ttype": "many2one",
            },
            "mode_view": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 28,
                "default": "same_view",
                "field_description": "Mode View",
                "help": (
                    "Mode view, enable rebuild same view or create new view."
                ),
                "selection": (
                    "[('no_view', 'No view'), ('same_view', 'Autopoiesis'),"
                    " ('new_view', 'New')]"
                ),
                "ttype": "selection",
            },
            "mode_view_portal": {
                "code_generator_form_simple_view_sequence": 31,
                "code_generator_sequence": 29,
                "default": "no_portal",
                "field_description": "Mode View Portal",
                "help": (
                    "Will active feature to generate portal interface, for"
                    " variable enable_generate_portal"
                ),
                "selection": (
                    "[('no_portal', 'No portal'), ('enable_portal', 'Enable"
                    " portal')]"
                ),
                "ttype": "selection",
            },
            "mode_view_portal_enable_create": {
                "code_generator_form_simple_view_sequence": 32,
                "code_generator_sequence": 30,
                "default": True,
                "field_description": "Mode View Portal Enable Create",
                "help": "Feature for portal_enable_create",
                "ttype": "boolean",
            },
            "mode_view_portal_enable_delete": {
                "code_generator_form_simple_view_sequence": 35,
                "code_generator_sequence": 33,
                "default": True,
                "field_description": "Mode View Portal Enable Delete",
                "help": "Feature for portal_enable_delete",
                "ttype": "boolean",
            },
            "mode_view_portal_enable_read": {
                "code_generator_form_simple_view_sequence": 33,
                "code_generator_sequence": 31,
                "default": True,
                "field_description": "Mode View Portal Enable Read",
                "help": "Feature for portal_enable_read",
                "ttype": "boolean",
            },
            "mode_view_portal_enable_update": {
                "code_generator_form_simple_view_sequence": 34,
                "code_generator_sequence": 32,
                "default": True,
                "field_description": "Mode View Portal Enable Update",
                "help": "Feature for portal_enable_update",
                "ttype": "boolean",
            },
            "mode_view_portal_models": {
                "code_generator_form_simple_view_sequence": 36,
                "code_generator_sequence": 34,
                "field_description": "Portal Models",
                "help": "Separate models by ;",
                "ttype": "char",
            },
            "mode_view_snippet": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 35,
                "default": "no_snippet",
                "field_description": "Mode View Snippet",
                "help": (
                    "Will active feature to generate snippet on website"
                    " interface"
                ),
                "selection": (
                    "[('no_snippet', 'No snippet'), ('enable_snippet', 'Enable"
                    " snippet')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet_enable_template_website_snippet_view": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 36,
                "default": True,
                "field_description": (
                    "Mode View Snippet Enable Template Website Snippet View"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "boolean",
            },
            "mode_view_snippet_template_generate_website_enable_javascript": {
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 39,
                "default": True,
                "field_description": (
                    "Mode View Snippet Template Generate Website Enable"
                    " Javascript"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "boolean",
            },
            "mode_view_snippet_template_generate_website_snippet_ctrl_featur": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 38,
                "default": "model_show_item_individual",
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet Ctrl"
                    " Featur"
                ),
                "help": "Feature for mode_view_snippet",
                "selection": (
                    "[('helloworld', 'helloworld'),"
                    " ('model_show_item_individual', 'Model show item"
                    " individual'), ('model_show_item_list', 'Model show item"
                    " list')]"
                ),
                "ttype": "selection",
            },
            "mode_view_snippet_template_generate_website_snippet_generic_mdl": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 37,
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet"
                    " Generic Mdl"
                ),
                "help": "Feature for mode_view_snippet",
                "ttype": "char",
            },
            "mode_view_snippet_template_generate_website_snippet_type": {
                "code_generator_form_simple_view_sequence": 30,
                "code_generator_sequence": 40,
                "default": "effect",
                "field_description": (
                    "Mode View Snippet Template Generate Website Snippet Type"
                ),
                "help": "Feature for mode_view_snippet",
                "selection": (
                    "[('content', 'Content'), ('effect', 'Effect'),"
                    " ('feature', 'Feature'), ('structure', 'Structure')]"
                ),
                "ttype": "selection",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "need_debugger_cg_erplibre_devops": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 43,
                "field_description": "Need Debugger Cg Erplibre Devops",
                "help": (
                    "CG erplibre_devops got error, detect can use the debugger"
                ),
                "ttype": "boolean",
            },
            "path_code_generator_to_generate": {
                "code_generator_form_simple_view_sequence": 38,
                "code_generator_sequence": 48,
                "default": "addons/addons",
                "field_description": "Path Code Generator To Generate",
                "ttype": "char",
            },
            "path_code_generator_to_generate_cg": {
                "code_generator_form_simple_view_sequence": 39,
                "code_generator_sequence": 49,
                "default": "addons/addons",
                "field_description": "Path Code Generator To Generate Cg",
                "ttype": "char",
            },
            "path_code_generator_to_generate_template": {
                "code_generator_form_simple_view_sequence": 40,
                "code_generator_sequence": 50,
                "default": "addons/addons",
                "field_description": (
                    "Path Code Generator To Generate Template"
                ),
                "ttype": "char",
            },
            "path_working_erplibre": {
                "code_generator_form_simple_view_sequence": 41,
                "code_generator_sequence": 41,
                "default": "/ERPLibre",
                "field_description": "Path Working Erplibre",
                "ttype": "char",
            },
            "stop_execution_if_env_not_clean": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 13,
                "default": True,
                "field_description": "Stop Execution If Env Not Clean",
                "ttype": "boolean",
            },
            "template_name": {
                "code_generator_sequence": 10,
                "field_description": "Template Name",
                "ttype": "char",
            },
            "uca_option_with_inherit": {
                "code_generator_sequence": 8,
                "field_description": "Uca Option With Inherit",
                "help": "UCA configuration - with inherit",
                "ttype": "boolean",
            },
            "use_existing_meta_module": {
                "code_generator_sequence": 6,
                "field_description": "Use Existing Meta Module",
                "help": "If False, will create new meta file from uc0.",
                "ttype": "boolean",
            },
            "use_existing_meta_module_uca_only": {
                "code_generator_sequence": 7,
                "field_description": "Use Existing Meta Module Uca Only",
                "help": "Force UcA only from feature use_existing_meta_module",
                "ttype": "boolean",
            },
            "use_existing_meta_module_ucb_only": {
                "code_generator_sequence": 11,
                "field_description": "Use Existing Meta Module Ucb Only",
                "help": "Force UcB only from feature use_existing_meta_module",
                "ttype": "boolean",
            },
            "use_external_cg": {
                "code_generator_sequence": 5,
                "field_description": "Use External Cg",
                "help": (
                    "If internal, will use same database of devops for build"
                    " code, this can interfere. If False, will generate"
                    " external database with sandbox."
                ),
                "ttype": "boolean",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 4,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "required": True,
                "ttype": "many2one",
            },
        }
        model_devops_plan_cg = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import json
import os

from odoo import _, api, exceptions, fields, models""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_plan_cg.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """cg_before_ids_i = self.devops_cg_ids.ids

status = super().write(values)
if "devops_cg_ids" in values.keys():
    # Update all the list of code generator, associate to this plan
    for rec in self:
        cg_missing_ids_i = list(
            set(cg_before_ids_i).difference(set(rec.devops_cg_ids.ids))
        )
        cg_missing_ids = self.env["devops.cg"].browse(cg_missing_ids_i)
        for cg_id in cg_missing_ids:
            for module_id in cg_id.module_ids:
                if rec in module_id.devops_workspace_ids:
                    module_id.devops_workspace_ids = [(3, rec.id)]
                for model_id in module_id.model_ids:
                    if rec in model_id.devops_workspace_ids:
                        model_id.devops_workspace_ids = [(3, rec.id)]
                    for field_id in model_id.field_ids:
                        if rec in field_id.devops_workspace_ids:
                            field_id.devops_workspace_ids = [
                                (3, rec.id)
                            ]
        cg_adding_ids_i = list(
            set(rec.devops_cg_ids.ids).difference(set(cg_before_ids_i))
        )
        cg_adding_ids = self.env["devops.cg"].browse(cg_adding_ids_i)
        for cg_id in cg_adding_ids:
            for module_id in cg_id.module_ids:
                if rec not in module_id.devops_workspace_ids:
                    module_id.devops_workspace_ids = [(4, rec.id)]
                for model_id in module_id.model_ids:
                    if rec not in model_id.devops_workspace_ids:
                        model_id.devops_workspace_ids = [(4, rec.id)]
                    for field_id in model_id.field_ids:
                        if rec not in field_id.devops_workspace_ids:
                            field_id.devops_workspace_ids = [
                                (4, rec.id)
                            ]
return status""",
                    "name": "write",
                    "decorator": "@api.multi",
                    "param": "self, values",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    if not isinstance(rec.id, models.NewId):
        rec.name = f"{rec.id}: "
    else:
        rec.name = ""
    rec.name += rec.workspace_id.name""",
                    "name": "_compute_name",
                    "decorator": '@api.depends("workspace_id")',
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Install generated module"
    ) as rec_ws:
        module_list = ",".join(
            [m.name for cg in rec.devops_cg_ids for m in cg.module_ids]
        )
        rec_ws.install_module(module_list)
        rec_ws.action_check()""",
                    "name": "action_install_all_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Install all UcA"
    ) as rec_ws:
        module_list = ",".join(
            [
                f"code_generator_template_{m.name},{m.name}"
                for cg in rec.devops_cg_ids
                for m in cg.module_ids
            ]
        )
        rec_ws.execute(
            cmd=f"./script/database/db_restore.py --database cg_uca",
            folder=rec.path_working_erplibre,
            to_instance=True,
        )
        rec_ws.execute(
            cmd=(
                "./script/addons/install_addons_dev.sh"
                f" cg_uca {module_list}"
            ),
            folder=rec.path_working_erplibre,
            to_instance=True,
        )
        rec_ws.action_check()""",
                    "name": "action_install_all_uca_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Install all UcB"
    ) as rec_ws:
        module_list = ",".join(
            [
                f"code_generator_{m.name}"
                for cg in rec.devops_cg_ids
                for m in cg.module_ids
            ]
        )
        rec_ws.execute(
            cmd=f"./script/database/db_restore.py --database cg_ucb",
            folder=rec.path_working_erplibre,
            to_instance=True,
        )
        rec_ws.execute(
            cmd=(
                "./script/addons/install_addons_dev.sh"
                f" cg_ucb {module_list}"
            ),
            folder=rec.path_working_erplibre,
            to_instance=True,
        )
        rec_ws.action_check()""",
                    "name": "action_install_all_ucb_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Install and generate all"
    ) as rec_ws:
        rec.action_code_generator_generate_all()
        rec.action_git_commit_all_generated_module()
        rec.action_refresh_meta_cg_generated_module()
        rec.action_install_all_generated_module()""",
                    "name": "action_install_and_generate_all_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "CG generate module"
    ) as rec_ws:
        # TODO no where this variable are set at true, need hook
        rec.devops_cg_erplibre_devops_error_log = False
        rec.need_debugger_cg_erplibre_devops = False
        # TODO add try catch, add breakpoint, rerun loop. Careful when lose context
        # Start with local storage
        # Increase speed
        # TODO keep old configuration of config.conf and not overwrite all
        # rec_ws.execute(cmd=f"cd {rec.path_working_erplibre};make config_gen_code_generator", to_instance=True)
        if rec.devops_cg_ids and rec_ws.mode_exec.value in ["docker"]:
            rec_ws.workspace_docker_id.docker_config_gen_cg = True
            rec_ws.action_reboot()
            rec_ws.workspace_docker_id.docker_config_gen_cg = False
        for rec_cg in rec.devops_cg_ids:
            for module_id in rec_cg.module_ids:
                devops_exec_bundle_parent_root_id = (
                    self.env["devops.exec.bundle"]
                    .browse(rec_ws._context.get("devops_exec_bundle"))
                    .get_parent_root()
                )
                if rec_cg.force_clean_before_generate:
                    rec.workspace_code_remove_module(module_id)
                model_conf = None
                if rec.code_mode_context_generator == "autopoiesis":
                    if rec.cg_self_add_config_cg:
                        model_conf = rec.get_cg_model_config(module_id)
                else:
                    model_conf = rec.get_cg_model_config(module_id)
                module = module_id.name
                # TODO support portal into external
                dct_new_project = {
                    "module": module,
                    "directory": rec.path_code_generator_to_generate,
                    "directory_cg": rec.path_code_generator_to_generate_cg,
                    "directory_template": rec.path_code_generator_to_generate_template,
                    "keep_bd_alive": True,
                    "use_existing_meta_module": rec.use_existing_meta_module,
                    "use_existing_meta_module_uca_only": rec.use_existing_meta_module_uca_only,
                    "uca_option_with_inherit": rec.uca_option_with_inherit,
                    "use_existing_meta_module_ucb_only": rec.use_existing_meta_module_ucb_only,
                    "devops_workspace": rec_ws.id,
                    "devops_exec_bundle_id": devops_exec_bundle_parent_root_id.id,
                    "stop_execution_if_env_not_clean": rec.stop_execution_if_env_not_clean,
                    "mode_view": rec.mode_view,
                    "mode_view_snippet": rec.mode_view_snippet,
                    "mode_view_snippet_enable_template_website_snippet_view": rec.mode_view_snippet_enable_template_website_snippet_view,
                    "mode_view_snippet_template_generate_website_snippet_generic_mdl": rec.mode_view_snippet_template_generate_website_snippet_generic_mdl,
                    "mode_view_snippet_template_generate_website_snippet_ctrl_featur": rec.mode_view_snippet_template_generate_website_snippet_ctrl_featur,
                    "mode_view_snippet_template_generate_website_enable_javascript": rec.mode_view_snippet_template_generate_website_enable_javascript,
                    "mode_view_snippet_template_generate_website_snippet_type": rec.mode_view_snippet_template_generate_website_snippet_type,
                    # "mode_view_portal": rec.mode_view_portal,
                    # "mode_view_portal_enable_create": rec.mode_view_portal_enable_create,
                    # "mode_view_portal_enable_read": rec.mode_view_portal_enable_read,
                    # "mode_view_portal_enable_update": rec.mode_view_portal_enable_update,
                    # "mode_view_portal_enable_delete": rec.mode_view_portal_enable_delete,
                    # "mode_view_portal_models": rec.mode_view_portal_models,
                    "config_uca_enable_export_data": rec.config_uca_enable_export_data,
                }
                if rec.code_generator_name:
                    dct_new_project[
                        "code_generator_name"
                    ] = rec.code_generator_name
                if rec.template_name:
                    dct_new_project[
                        "template_name"
                    ] = rec.template_name
                # extra_arg = ""
                if model_conf:
                    dct_new_project["config"] = model_conf
                    # extra_arg = f" --config '{model_conf}'"
                if rec.devops_cg_model_to_remove_ids:
                    dct_new_project["model_to_remove"] = ";".join(
                        [
                            a.name
                            for a in rec.devops_cg_model_to_remove_ids
                        ]
                    )
                if rec.use_external_cg:
                    new_project_id = self.env[
                        "devops.cg.new_project"
                    ].create(dct_new_project)
                    if rec.last_new_project_cg:
                        new_project_id.last_new_project = (
                            rec.last_new_project_cg.id
                        )
                    rec.last_new_project_cg = new_project_id.id
                    new_project_id.with_context(
                        rec_ws._context
                    ).action_new_project()
                else:
                    rec.execute_internal_cg(rec_cg, module_id)
                # cmd = (
                #     f"cd {rec.path_working_erplibre};./script/code_generator/new_project.py"
                #     f" --keep_bd_alive -m {module_name} -d"
                #     f" {rec.path_code_generator_to_generate}{extra_arg}"
                # )
                # result = rec_ws.execute(cmd=cmd, to_instance=True)
                # rec.devops_cg_log_addons = result
                # OR
                # result = rec_ws.execute(
                #     cmd=f"cd {rec.folder};./script/code_generator/new_project.py"
                #     f" -d {addons_path} -m {module_name}",
                # )
        if rec.devops_cg_ids and rec_ws.mode_exec.value in ["docker"]:
            rec_ws.action_reboot()
        # rec_ws.execute(cmd=f"cd {rec.path_working_erplibre};make config_gen_all", to_instance=True)""",
                    "name": "action_code_generator_generate_all",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    path_module_generate = os.path.join(
        ".", rec.path_code_generator_to_generate
    )
    short_name = module_id.name.replace("_", " ").title()

    # Add code generator
    value = {
        "shortdesc": short_name,
        "name": module_id.name,
        "license": "AGPL-3",
        "author": "TechnoLibre",
        "website": "https://technolibre.ca",
        "application": True,
        "enable_sync_code": True,
        "path_sync_code": path_module_generate,
    }

    value["enable_sync_template"] = True
    value["ignore_fields"] = ""
    value["post_init_hook_show"] = False
    value["uninstall_hook_show"] = False
    value["post_init_hook_feature_code_generator"] = False
    value["uninstall_hook_feature_code_generator"] = False

    value[
        "hook_constant_code"
    ] = f'module_id.name = "{module_id.name}"'

    code_generator_id = self.env["code.generator.module"].create(value)
    rec.last_code_generator_module = code_generator_id.id

    # lst_depend_module = ["mail", "portal", "website"]
    lst_depend_module = []
    if (
        rec.mode_view_snippet
        and rec.mode_view_snippet == "enable_snippet"
    ):
        lst_depend_module.append("website")
    if (
        rec.mode_view_portal
        and rec.mode_view_portal == "enable_portal"
    ):
        lst_depend_module.append("portal")
    if lst_depend_module:
        # Trim for unique item
        lst_depend_module = list(set(lst_depend_module))
        code_generator_id.add_module_dependency(lst_depend_module)

    # Add model
    if (
        rec.mode_view_portal
        and rec.mode_view_portal != "no_portal"
        and rec.mode_view_portal_models
    ):
        lst_portal_model = [
            a.strip()
            for a in rec.mode_view_portal_models.strip().split(";")
        ]
    else:
        lst_portal_model = []
    for model_model_id in rec.devops_cg_model_ids:
        lst_depend_model = None
        if (
            lst_portal_model
            and model_model_id.name in lst_portal_model
        ):
            lst_depend_model = ["portal.mixin"]
        code_generator_id.add_update_model(
            model_model_id.name,
            dct_field=model_model_id.get_field_dct(),
            lst_depend_model=lst_depend_model,
        )

    # Generate view
    # Action generate view
    value_view_wizard = {
        "code_generator_id": code_generator_id.id,
        "enable_generate_all": False,
    }
    if rec.mode_view == "same_view":
        value_view_wizard["disable_generate_menu"] = True
        value_view_wizard["disable_generate_access"] = True

    if rec.mode_view_portal and rec.mode_view_portal != "no_portal":
        value_view_wizard["enable_generate_portal"] = True
        value_view_wizard[
            "portal_enable_create"
        ] = rec.mode_view_portal_enable_create
        value_view_wizard[
            "portal_enable_read"
        ] = rec.mode_view_portal_enable_read
        value_view_wizard[
            "portal_enable_update"
        ] = rec.mode_view_portal_enable_update
        value_view_wizard[
            "portal_enable_delete"
        ] = rec.mode_view_portal_enable_delete

    wizard_view = self.env[
        "code.generator.generate.views.wizard"
    ].create(value_view_wizard)

    wizard_view.button_generate_views()

    if rec.mode_view_snippet and rec.mode_view_snippet != "no_snippet":
        # Generate snippet
        # TODO addons/TechnoLibre_odoo-code-generator-template/code_generator_demo_portal/hooks.py
        #  template_generate_website_snippet_controller_feature is not suppose to be here, this field
        #  is not into code.generator.snippet
        value_snippet = {
            "code_generator_id": code_generator_id.id,
            "controller_feature": rec.mode_view_snippet_template_generate_website_snippet_ctrl_featur,
            "enable_javascript": rec.mode_view_snippet_template_generate_website_enable_javascript,
            "snippet_type": rec.mode_view_snippet_template_generate_website_snippet_type,
            "model_name": rec.mode_view_snippet_template_generate_website_snippet_generic_mdl,
        }
        self.env["code.generator.snippet"].create(value_snippet)

    # Generate module
    value = {"code_generator_ids": code_generator_id.ids}
    cg_writer = self.env["code.generator.writer"].create(value)
    rec.last_code_generator_writer = cg_writer.id
    # print(cg_writer_id)""",
                    "name": "execute_internal_cg",
                    "decorator": "@api.multi",
                    "param": "self, rec_cg, module_id",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Workspace code remove module"
    ) as rec_ws:
        path_to_remove = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        rec.workspace_remove_module(module_id.name, path_to_remove)""",
                    "name": "workspace_code_remove_module",
                    "decorator": "@api.multi",
                    "param": "self, module_id",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "CG git commit"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        rec_ws.execute(
            cmd="git cola",
            folder=folder,
            force_open_terminal=True,
            force_exit=True,
        )""",
                    "name": "action_git_commit",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "CG git commit remote"
    ) as rec_ws:
        module_name = rec.devops_cg_module_ids[0].exists().name
        dir1 = os.path.join(
            rec.path_code_generator_to_generate,
            module_name,
        )
        dir2 = os.path.join(
            rec.path_code_generator_to_generate_cg,
            module_name,
        )
        cmd = (
            "./script/git/remote_code_generation_git_compare.py"
            " --quiet --git_cola --clear --replace_directory"
            f" --directory1 {dir1} --directory2 {dir2}"
        )
        rec_ws.execute(
            cmd=cmd,
            force_open_terminal=True,
            force_exit=True,
            to_instance=True,
        )""",
                    "name": "action_git_commit_remote",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "CG git meld remote"
    ) as rec_ws:
        module_name = rec.devops_cg_module_ids[0].exists().name
        dir1 = os.path.join(
            rec.path_code_generator_to_generate,
            module_name,
        )
        dir2 = os.path.join(
            rec.path_code_generator_to_generate_cg,
            module_name,
        )
        cmd = f"meld {dir2} {dir1}"
        rec_ws.execute(
            cmd=cmd,
            force_open_terminal=True,
            force_exit=True,
            to_instance=True,
        )""",
                    "name": "action_git_meld_remote",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "CG git clean remote"
    ) as rec_ws:
        module_name = rec.devops_cg_module_ids[0].exists().name
        dir2 = os.path.join(
            rec.path_code_generator_to_generate_cg,
            module_name,
        )
        cmd = f"rm -r {dir2}"
        rec_ws.execute(
            cmd=cmd,
            force_open_terminal=True,
            force_exit=True,
            to_instance=True,
        )""",
                    "name": "action_git_clean_remote",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 12,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "CG commit all"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        # for cg in rec.devops_cg_ids:
        # Validate git directory exist
        exec_id = rec_ws.execute(
            cmd=f"ls {folder}/.git",
            to_instance=True,
        )
        result = exec_id.log_all
        if "No such file or directory" in result:
            # Suppose git not exist
            # This is not good if .git directory is in parent directory
            rec_ws.execute(
                cmd=(
                    "git"
                    " init;echo '*.pyc' > .gitignore;git add"
                    " .gitignore;git commit -m 'first commit'"
                ),
                folder=folder,
                to_instance=True,
            )
            rec_ws.execute(
                cmd="git init",
                folder=folder,
                to_instance=True,
            )

        exec_id = rec_ws.execute(
            cmd=f"git status -s",
            folder=folder,
            to_instance=True,
        )
        result = exec_id.log_all
        if result:
            # TODO show result to log
            # Force add file and commit
            rec_ws.execute(
                cmd=f"git add .",
                folder=folder,
                to_instance=True,
            )
            rec_ws.execute(
                cmd=f"git commit -m 'Commit by RobotLibre'",
                folder=folder,
                to_instance=True,
            )""",
                    "name": "action_git_commit_all_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 13,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Refresh meta CG"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate_cg,
        )
        diff = ""
        status = ""
        stat = ""
        exec_id = rec_ws.execute(
            cmd=f"ls {folder}/.git",
            to_instance=True,
        )
        result = exec_id.log_all
        if result:
            # Create diff
            exec_id = rec_ws.execute(
                cmd=f"git diff",
                folder=folder,
                to_instance=True,
            )
            diff += exec_id.log_all
            # Create status
            exec_id = rec_ws.execute(
                cmd=f"git status",
                folder=folder,
                to_instance=True,
            )
            status += exec_id.log_all
            for cg in rec.devops_cg_ids:
                # Create statistic
                for module_id in cg.module_ids:
                    exec_id = rec_ws.execute(
                        cmd=(
                            "./script/statistic/code_count.sh"
                            f" ./{rec.path_code_generator_to_generate}/{module_id.name};"
                        ),
                        folder=rec.path_working_erplibre,
                        to_instance=True,
                    )
                    result = exec_id.log_all
                    if result:
                        stat += f"./{rec.path_code_generator_to_generate}/{module_id.name}"
                        stat += result

                    exec_id = rec_ws.execute(
                        cmd=(
                            "./script/statistic/code_count.sh"
                            f" ./{rec.path_code_generator_to_generate}/code_generator_template_{module_id.name};"
                        ),
                        folder=rec.path_working_erplibre,
                        to_instance=True,
                    )
                    result = exec_id.log_all
                    if result:
                        stat += f"./{rec.path_code_generator_to_generate}/code_generator_template_{module_id.name}"
                        stat += result

                    exec_id = rec_ws.execute(
                        cmd=(
                            "./script/statistic/code_count.sh"
                            f" ./{rec.path_code_generator_to_generate}/code_generator_{module_id.name};"
                        ),
                        folder=rec.path_working_erplibre,
                        to_instance=True,
                    )
                    result = exec_id.log_all
                    if result:
                        stat += f"./{rec.path_code_generator_to_generate}/code_generator_{module_id.name}"
                        stat += result

                    # Autofix attached field to workspace
                    if rec not in module_id.devops_workspace_ids:
                        module_id.devops_workspace_ids = [(4, rec.id)]
                    for model_id in module_id.model_ids:
                        if rec not in model_id.devops_workspace_ids:
                            model_id.devops_workspace_ids = [
                                (4, rec.id)
                            ]
                        for field_id in model_id.field_ids:
                            if (
                                rec
                                not in field_id.devops_workspace_ids
                            ):
                                field_id.devops_workspace_ids = [
                                    (4, rec.id)
                                ]

        rec.devops_cg_diff = diff
        rec.devops_cg_status = status
        rec.devops_cg_stat = stat""",
                    "name": "action_refresh_meta_cg_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 14,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Workspace remove module"
    ) as rec_ws:
        if remove_module:
            rec_ws.execute(
                cmd=f"rm -rf ./{module_name};",
                folder=path_to_remove,
                to_instance=True,
            )
        rec_ws.execute(
            cmd=f"rm -rf ./code_generator_template_{module_name};",
            folder=path_to_remove,
            to_instance=True,
        )
        rec_ws.execute(
            cmd=f"rm -rf ./code_generator_{module_name};",
            folder=path_to_remove,
            to_instance=True,
        )""",
                    "name": "workspace_remove_module",
                    "decorator": "@api.multi",
                    "param": (
                        "self, module_name, path_to_remove, remove_module=True"
                    ),
                    "sequence": 15,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Workspace CG remove module"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate_cg,
        )
        rec.workspace_remove_module(
            "erplibre_devops", folder, remove_module=False
        )""",
                    "name": "workspace_CG_remove_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 16,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Clear all generated module"
    ) as rec_ws:
        for cg in rec.devops_cg_ids:
            for module_id in cg.module_ids:
                rec.workspace_code_remove_module(module_id)
        rec_ws.action_check()""",
                    "name": "action_clear_all_generated_module",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 17,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Generate data demo"
    ) as rec_ws:
        if rec.cg_demo_type_data == "simple":
            # Project
            cg_id = self.env["devops.cg"].create(
                {
                    "name": "Parc de voiture",
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                    "force_clean_before_generate": True,
                }
            )
            # Module
            cg_module_id = self.env["devops.cg.module"].create(
                {
                    "name": "parc",
                    "code_generator": cg_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            # Model
            cg_model_voiture_id = self.env["devops.cg.model"].create(
                {
                    "name": "parc.voiture",
                    "description": "Ensemble de voiture dans le parc",
                    "module_id": cg_module_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            # Field
            cg_field_voiture_couleur_id = self.env[
                "devops.cg.field"
            ].create(
                {
                    "name": "couleur",
                    "help": "Couleur de la voiture.",
                    "type": "char",
                    "model_id": cg_model_voiture_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            if rec.is_clear_before_cg_demo:
                rec.devops_cg_ids = [(6, 0, cg_id.ids)]
                rec.devops_cg_module_ids = [(6, 0, cg_module_id.ids)]
                rec.devops_cg_model_ids = [
                    (
                        6,
                        0,
                        [
                            cg_model_voiture_id.id,
                        ],
                    )
                ]
                rec.devops_cg_field_ids = [
                    (
                        6,
                        0,
                        [
                            cg_field_voiture_couleur_id.id,
                        ],
                    )
                ]
            else:
                rec.devops_cg_ids = [(4, cg_id.id)]
                rec.devops_cg_module_ids = [(4, cg_module_id.id)]
                rec.devops_cg_model_ids = [
                    (4, cg_model_voiture_id.id),
                ]
                rec.devops_cg_field_ids = [
                    (4, cg_field_voiture_couleur_id.id),
                ]
        elif rec.cg_demo_type_data == "devops_example":
            # Project
            cg_id = self.env["devops.cg"].create(
                {
                    "name": "Projet exemple",
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                    "force_clean_before_generate": False,
                }
            )
            # Module
            cg_module_id = self.env["devops.cg.module"].create(
                {
                    "name": "erplibre_devops",
                    "code_generator": cg_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            # Model
            cg_model_example_id = self.env["devops.cg.model"].create(
                {
                    "name": "devops.example",
                    "description": "Example feature to add to devops",
                    "module_id": cg_module_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            # Field
            cg_field_size_id = self.env["devops.cg.field"].create(
                {
                    "name": "size",
                    "help": "Size of this example.",
                    "type": "integer",
                    "model_id": cg_model_example_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            if rec.is_clear_before_cg_demo:
                rec.devops_cg_ids = [(6, 0, cg_id.ids)]
                rec.devops_cg_module_ids = [(6, 0, cg_module_id.ids)]
                rec.devops_cg_model_ids = [
                    (
                        6,
                        0,
                        [
                            cg_model_example_id.id,
                        ],
                    )
                ]
                rec.devops_cg_field_ids = [
                    (
                        6,
                        0,
                        [
                            cg_field_size_id.id,
                        ],
                    )
                ]
            else:
                rec.devops_cg_ids = [(4, cg_id.id)]
                rec.devops_cg_module_ids = [(4, cg_module_id.id)]
                rec.devops_cg_model_ids = [
                    (4, cg_model_example_id.id),
                ]
                rec.devops_cg_field_ids = [
                    (4, cg_field_size_id.id),
                ]
        elif rec.cg_demo_type_data == "ore":
            # Project
            cg_id = self.env["devops.cg"].create(
                {
                    "name": "Offrir Recevoir Échanger",
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                    "force_clean_before_generate": True,
                }
            )
            # Module
            cg_module_id = self.env["devops.cg.module"].create(
                {
                    "name": "ore",
                    "code_generator": cg_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            # Model
            cg_model_offre_id = self.env["devops.cg.model"].create(
                {
                    "name": "ore.offre.service",
                    "description": (
                        "Permet de créer une offre de service"
                        " publiable dans la communauté."
                    ),
                    "module_id": cg_module_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            cg_model_demande_id = self.env["devops.cg.model"].create(
                {
                    "name": "ore.demande.service",
                    "description": (
                        "Permet de créer une demande de service"
                        " publiable dans la communauté."
                    ),
                    "module_id": cg_module_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            # Field
            cg_field_offre_date_afficher_id = self.env[
                "devops.cg.field"
            ].create(
                {
                    "name": "date_service_afficher",
                    "help": (
                        "Date à laquelle l'offre de service sera"
                        " affiché."
                    ),
                    "type": "date",
                    "model_id": cg_model_offre_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            cg_field_offre_temps_estime_id = self.env[
                "devops.cg.field"
            ].create(
                {
                    "name": "temp_estime",
                    "help": (
                        "Temps estimé pour effectuer le service à"
                        " offrir."
                    ),
                    "type": "float",
                    "model_id": cg_model_offre_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            cg_field_demande_date_afficher_id = self.env[
                "devops.cg.field"
            ].create(
                {
                    "name": "date_service_afficher",
                    "help": (
                        "Date à laquelle la demande de service sera"
                        " affiché."
                    ),
                    "type": "date",
                    "model_id": cg_model_demande_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            cg_field_demande_condition_id = self.env[
                "devops.cg.field"
            ].create(
                {
                    "name": "condition",
                    "help": "Condition sur la demande de service.",
                    "type": "text",
                    "model_id": cg_model_demande_id.id,
                    "devops_workspace_ids": [(6, 0, rec_ws.ids)],
                }
            )
            if rec.is_clear_before_cg_demo:
                rec.devops_cg_ids = [(6, 0, cg_id.ids)]
                rec.devops_cg_module_ids = [(6, 0, cg_module_id.ids)]
                rec.devops_cg_model_ids = [
                    (
                        6,
                        0,
                        [
                            cg_model_offre_id.id,
                            cg_model_demande_id.id,
                        ],
                    )
                ]
                rec.devops_cg_field_ids = [
                    (
                        6,
                        0,
                        [
                            cg_field_offre_date_afficher_id.id,
                            cg_field_offre_temps_estime_id.id,
                            cg_field_demande_date_afficher_id.id,
                            cg_field_demande_condition_id.id,
                        ],
                    )
                ]
            else:
                rec.devops_cg_ids = [(4, cg_id.id)]
                rec.devops_cg_module_ids = [(4, cg_module_id.id)]
                rec.devops_cg_model_ids = [
                    (4, cg_model_offre_id.id),
                    (4, cg_model_demande_id.id),
                ]
                rec.devops_cg_field_ids = [
                    (4, cg_field_offre_date_afficher_id.id),
                    (4, cg_field_offre_temps_estime_id.id),
                    (4, cg_field_demande_date_afficher_id.id),
                    (4, cg_field_demande_condition_id.id),
                ]""",
                    "name": "action_cg_generate_demo",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 18,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """# Support only 1, but can run in parallel multiple if no dependencies between
lst_model = []
dct_model_conf = {"model": lst_model}
for model_id in module_id.model_ids:
    lst_field = []
    lst_model.append({"name": model_id.name, "fields": lst_field})
    for field_id in model_id.field_ids:
        dct_value_field = {
            "name": field_id.name,
            "help": field_id.help,
            "type": field_id.type,
        }
        if field_id.type in [
            "many2one",
            "many2many",
            "one2many",
        ]:
            dct_value_field["relation"] = (
                field_id.relation.name
                if field_id.relation
                else field_id.relation_manual
            )
            if not dct_value_field["relation"]:
                msg_err = (
                    f"Model '{model_id.name}', field"
                    f" '{field_id.name}' need a"
                    " relation because type is"
                    f" '{field_id.type}'"
                )
                raise exceptions.Warning(msg_err)
        if field_id.type in [
            "one2many",
        ]:
            dct_value_field["relation_field"] = (
                field_id.field_relation.name
                if field_id.field_relation
                else field_id.field_relation_manual
            )
            if not dct_value_field["relation_field"]:
                msg_err = (
                    f"Model '{model_id.name}', field"
                    f" '{field_id.name}' need a"
                    " relation field because type is"
                    f" '{field_id.type}'"
                )
                raise exceptions.Warning(msg_err)
        if field_id.widget:
            dct_value_field = field_id.widget
        lst_field.append(dct_value_field)
model_conf = (
    json.dumps(dct_model_conf)
    # .replace('"', '\\"')
    # .replace("'", "")
)
return model_conf""",
                    "name": "get_cg_model_config",
                    "decorator": "@api.model",
                    "param": "self, module_id",
                    "sequence": 19,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Re-execute last new project"
    ) as rec_ws:
        if rec_ws._context.get("default_stage_Uc0"):
            rec.last_new_project_cg.stage_id = self.env.ref(
                "erplibre_devops.devops_cg_new_project_stage_generate_Uc0"
            ).id
        # TODO create a copy of new project and not modify older version
        # TODO next sentence is not useful if made a copy
        rec.last_new_project_cg.devops_exec_bundle_id = (
            rec_ws._context.get("devops_exec_bundle")
        )
        rec.last_new_project_cg.action_new_project()""",
                    "name": "action_execute_last_stage_new_project",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 20,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Open Terminal and tig"
    ) as rec_ws:
        if rec_ws.mode_exec.value in ["docker"]:
            exec_id = rec_ws.execute(cmd="which tig", to_instance=True)
            result = exec_id.log_all
            if not result:
                # TODO support OS and not only docker
                rec_ws.workspace_docker_id.action_docker_install_dev_soft()
        dir_to_check = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
            ".git",
        )
        exec_id = rec_ws.execute(cmd=f"ls {dir_to_check}")
        status_ls = exec_id.log_all
        if "No such file or directory" in status_ls:
            raise exceptions.Warning(
                "Cannot open command 'tig', cannot find directory"
                f" '{dir_to_check}'."
            )
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        cmd = f"tig"
        rec_ws.execute(
            cmd=cmd,
            force_open_terminal=True,
            folder=folder,
        )""",
                    "name": "action_open_terminal_tig",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 21,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Open Terminal addons"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        cmd = f"ls -l"
        rec_ws.execute(
            cmd=cmd,
            folder=folder,
            force_open_terminal=True,
        )""",
                    "name": "action_open_terminal_addons",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 22,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Open terminal ERPLibre DevOps"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        rec_ws.execute(folder=folder, force_open_terminal=True)""",
                    "name": "action_open_terminal_path_erplibre_devops",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 23,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Check tree addons"
    ) as rec_ws:
        folder = os.path.join(
            rec.path_working_erplibre,
            rec.path_code_generator_to_generate,
        )
        exec_id = rec_ws.execute(
            cmd=f"tree",
            folder=folder,
            to_instance=True,
        )
        rec.devops_cg_tree_addons = exec_id.log_all""",
                    "name": "action_check_tree_addons",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 24,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
                {
                    "code": """for rec in self:
    rec.has_re_execute_new_project = bool(
        rec.last_new_project_cg and rec.last_new_project_cg.has_error
    )""",
                    "name": "_compute_has_re_execute_new_project",
                    "decorator": (
                        '@api.multi;@api.depends("last_new_project_cg",'
                        ' "last_new_project_cg.has_error")'
                    ),
                    "param": "self",
                    "sequence": 25,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_plan_cg.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops System
        model_model = "devops.system"
        model_name = "devops_system"
        dct_model = {
            "description": "devops_system",
        }
        dct_field = {
            "debug_command": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 21,
                "field_description": "Debug Command",
                "help": "This will show in log the command when execute it.",
                "ttype": "boolean",
            },
            "devops_deploy_vm_id": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 5,
                "field_description": "Associate VM",
                "relation": "devops.deploy.vm",
                "ttype": "many2one",
            },
            "erplibre_config_path_home_ids": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 9,
                "default_lambda": (
                    "lambda self: [(6, 0, [self.env.ref(   "
                    " 'erplibre_devops.erplibre_config_path_home_tmp').id])]"
                ),
                "field_description": "List path home",
                "relation": "erplibre.config.path.home",
                "ttype": "many2many",
            },
            "is_vm": {
                "code_generator_compute": "_compute_is_vm",
                "code_generator_sequence": 6,
                "field_description": "Is Vm",
                "store": True,
                "ttype": "boolean",
            },
            "iterator_port_generator": {
                "code_generator_sequence": 22,
                "default": 10000,
                "field_description": "Iterator Port Generator",
                "help": "Iterate to generate next port",
                "ttype": "integer",
            },
            "keep_terminal_open": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 20,
                "default": True,
                "field_description": "Keep Terminal Open",
                "help": "This will keep terminal open when close command.",
                "ttype": "boolean",
            },
            "method": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 11,
                "code_generator_tree_view_sequence": 13,
                "default": "local",
                "field_description": "Method",
                "help": "Choose the communication method.",
                "required": True,
                "selection": (
                    "[('local', 'Local disk'), ('ssh', 'SSH remote server')]"
                ),
                "ttype": "selection",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "name_overwrite": {
                "code_generator_sequence": 3,
                "field_description": "Overwrite name",
                "help": "Overwrite existing name",
                "ttype": "char",
            },
            "parent_system_id": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 8,
                "comment_before": """devops_deploy_vm_ids = fields.One2many(
comodel_name=\"devops.deploy.vm\",
inverse_name=\"system_id\",
string=\"VMs\",
)""",
                "field_description": "Parent system",
                "relation": "devops.system",
                "ttype": "many2one",
            },
            "path_home": {
                "code_generator_sequence": 26,
                "field_description": "Path Home",
                "ttype": "char",
            },
            "ssh_connection_status": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 12,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Ssh Connection Status",
                "help": "The state of the connexion.",
                "readonly": True,
                "ttype": "boolean",
            },
            "ssh_host": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 16,
                "code_generator_tree_view_sequence": 12,
                "field_description": "SSH Server",
                "help": (
                    "The host name or IP address from your remote server. For"
                    " example 192.168.0.1"
                ),
                "ttype": "char",
            },
            "ssh_host_name": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 7,
                "field_description": "Ssh Host Name",
                "ttype": "char",
            },
            "ssh_password": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 17,
                "field_description": "SSH Password",
                "help": (
                    "The password for the SSH connection. If you specify a"
                    " private key file, then this is the password to"
                    " decrypt it."
                ),
                "ttype": "char",
            },
            "ssh_port": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 18,
                "default": 22,
                "field_description": "SSH Port",
                "help": "The port on the FTP server that accepts SSH calls.",
                "ttype": "integer",
            },
            "ssh_private_key": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 23,
                "field_description": "Private key location",
                "help": (
                    "Path to the private key file. Only the Odoo user should"
                    " have read permissions for that file."
                ),
                "ttype": "char",
            },
            "ssh_public_host_key": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 24,
                "field_description": "Public host key",
                "help": (
                    "Verify SSH server's identity using its public rsa-key."
                    " The host key verification protects you from"
                    " man-in-the-middle attacks. Can be generated with command"
                    " 'ssh-keyscan -p PORT -H HOST/IP' and the right key is"
                    " immediately after the words 'ssh-rsa'."
                ),
                "ttype": "char",
            },
            "ssh_use_sshpass": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 19,
                "field_description": "SSH use SSHPass",
                "help": "This tool automatic add password to ssh connexion.",
                "ttype": "boolean",
            },
            "ssh_user": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 25,
                "field_description": "Username in the SSH Server",
                "help": (
                    "The username where the SSH connection should be made"
                    " with. This is the user on the external server."
                ),
                "ttype": "char",
            },
            "system_status": {
                "code_generator_compute": "_compute_system_status",
                "code_generator_sequence": 13,
                "field_description": "System Status",
                "help": "Show up or down for system, depend local or ssh.",
                "store": True,
                "ttype": "boolean",
            },
            "terminal": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 15,
                "code_generator_tree_view_sequence": 14,
                "comment_before": "TODO support mdfind for OSX",
                "default_lambda": (
                    "lambda self:"
                    " self.env['ir.config_parameter'].sudo().get_param(   "
                    " 'erplibre_devops.default_terminal', False)"
                ),
                "field_description": "Terminal",
                "help": (
                    "xterm block the process, not gnome-terminal. xterm not"
                    " work on osx, use osascript instead."
                ),
                "selection": (
                    "[('gnome-terminal', 'Gnome-terminal'), ('osascript',"
                    " 'Execute AppleScripts and other OSA language scripts'),"
                    " ('xterm', 'Xterm')]"
                ),
                "ttype": "selection",
            },
            "use_search_cmd": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 14,
                "code_generator_tree_view_sequence": 15,
                "default_lambda": (
                    "lambda self:"
                    " self.env['ir.config_parameter'].sudo().get_param(   "
                    " 'erplibre_devops.default_search_engine', False)"
                ),
                "field_description": "Use Search Cmd",
                "help": "find or locate, need sudo updatedb.",
                "selection": "[('locate', 'locate'), ('find', 'find')]",
                "ttype": "selection",
            },
        }
        model_devops_system = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": '''import base64
import json
import logging
import os
import re
import subprocess

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)
try:
    import paramiko
except ImportError:  # pragma: no cover
    _logger.debug("Cannot import paramiko")

BASE_VERSION_SOFTWARE_NAME = "odoo"''',
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_system.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """result = super().create(vals_list)
for rec in result:
    try:
        rec.path_home = rec.execute_with_result(
            "echo $HOME", None
        ).strip()
    except Exception as e:
        # TODO catch AuthenticationException exception
        if rec.method == "ssh" and rec.ssh_user:
            rec.path_home = f"/home/{rec.ssh_user}"
        else:
            rec.path_home = "/home/"
            _logger.warning(
                f"Wrong path_home for create devops.system {rec.id}"
            )
    if rec.path_home:
        # Display this home to plan action
        path_home_id = self.env[
            "erplibre.config.path.home"
        ].get_path_home_id(rec.path_home)
        rec.erplibre_config_path_home_ids = [(4, path_home_id.id)]
return result""",
                    "name": "create",
                    "decorator": "@api.model_create_multi",
                    "param": "self, vals_list",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """for rec in self:
    rec.system_status = False
    if rec.method == "local":
        rec.system_status = True
    elif rec.method == "ssh":
        rec.system_status = rec.ssh_connection_status""",
                    "name": "_compute_system_status",
                    "decorator": (
                        '@api.multi;@api.depends("ssh_connection_status",'
                        ' "method")'
                    ),
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """for rec in self:
    rec.is_vm = bool(rec.devops_deploy_vm_id)""",
                    "name": "_compute_is_vm",
                    "decorator": (
                        '@api.multi;@api.depends("devops_deploy_vm_id")'
                    ),
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": '''for rec in self:
    rec.name = ""
    if rec.name_overwrite:
        rec.name = rec.name_overwrite
    elif rec.method == "local":
        rec.name = "Local"
    if rec.method == "ssh":
        state = "UP" if rec.ssh_connection_status else "DOWN"
        if not rec.name:
            addr = rec.get_ssh_address()
            rec.name = f"SSH {addr}"
        # Add state if name_overwrite
        rec.name += f" {state}"''',
                    "name": "_compute_name",
                    "decorator": (
                        '@api.multi;@api.depends("name_overwrite",'
                        ' "ssh_connection_status", "ssh_host", "ssh_port",'
                        ' "ssh_user", "method")'
                    ),
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """# TODO is unique
s_port = "" if self.ssh_port == 22 else f":{self.ssh_port}"
s_user = "" if self.ssh_user is False else f"{self.ssh_user}@"
addr = f"{s_user}{self.ssh_host}{s_port}"
return addr""",
                    "name": "get_ssh_address",
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """# subprocess.Popen("date", stdout=subprocess.PIPE, shell=True)
# (output, err) = p.communicate()
p = subprocess.Popen(
    cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
)
# p = subprocess.Popen(
#     cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, executable="/bin/bash"
# )
# TODO check https://www.cyberciti.biz/faq/python-run-external-command-and-get-output/
# TODO support async update output
# import subprocess, sys
# ## command to run - tcp only ##
# cmd = "/usr/sbin/netstat -p tcp -f inet"
#
# ## run it ##
# p = subprocess.Popen(cmd, shell=True, stderr=subprocess.PIPE)
#
# ## But do not wait till netstat finish, start displaying output immediately ##
# while True:
#     out = p.stderr.read(1)
#     if out == '' and p.poll() != None:
#         break
#     if out != '':
#         sys.stdout.write(out)
#         sys.stdout.flush()
(output, err) = p.communicate()
p_status = p.wait()
result = output.decode()
if add_stderr_log:
    result += err.decode()
if not return_status:
    return result
return result, p_status""",
                    "name": "_execute_process",
                    "decorator": "@api.model",
                    "param": (
                        "self, cmd, add_stdin_log=False, add_stderr_log=True,"
                        " return_status=False"
                    ),
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": '''"""
engine can be bash, python or sh
"""
if folder:
    cmd = f"cd {folder};{cmd}"
if engine == "python":
    cmd = f"python -c {delimiter_bash}{cmd}{delimiter_bash}"
elif engine == "bash":
    cmd = f"bash -c {delimiter_bash}{cmd}{delimiter_bash}"
lst_result = []
cmd = cmd.strip()
if self.debug_command:
    print(cmd)
for rec in self.filtered(lambda r: r.method == "local"):
    if not return_status:
        result = rec._execute_process(cmd)
        status = None
    else:
        result, status = rec._execute_process(cmd, return_status=True)
    if len(self) == 1:
        if not return_status:
            return result
        else:
            return result, status
    lst_result.append(result)
for rec in self.filtered(lambda r: r.method == "ssh"):
    with rec.ssh_connection() as ssh_client:
        status = 0
        cmd += ";echo $?"
        stdin, stdout, stderr = ssh_client.exec_command(cmd)
        if add_stdin_log:
            result = stdin.read().decode("utf-8")
        else:
            result = ""
        stdout_log = stdout.read().decode("utf-8")
        # Extract echo $?
        count_endline_log = stdout_log.count("\\n")
        if count_endline_log:
            # Minimum 1, we know we have a command output by echo $?
            # output is only the status
            try:
                status = int(stdout_log.strip())
            except Exception:
                _logger.warning(
                    f"System id {rec.id} communicate by SSH cannot"
                    f" retrieve status of command {cmd}"
                )
            finally:
                if count_endline_log == 1:
                    stdout_log = ""
                else:
                    c = stdout_log
                    stdout_log = c[: c.rfind("\\n", 0, c.rfind("\\n"))]
        result += stdout_log
        if add_stderr_log:
            result += stderr.read().decode("utf-8")
        if len(self) == 1:
            if not return_status:
                return result
            else:
                return result, status
        lst_result.append(result)
return lst_result''',
                    "name": "execute_with_result",
                    "param": (
                        "self, cmd, folder, add_stdin_log=False,"
                        " add_stderr_log=True, engine='bash',"
                        " delimiter_bash=''', return_status=False"
                    ),
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """# TODO support argument return_status
# TODO if folder not exist, cannot CD. don't execute the command if wrong directory
for rec in self.filtered(lambda r: r.method == "local"):
    str_keep_open = ""
    if rec.keep_terminal_open and rec.terminal == "gnome-terminal":
        str_keep_open = ";bash"
    wrap_cmd = f"{cmd}{str_keep_open}"
    if folder:
        if wrap_cmd.startswith(";"):
            wrap_cmd = f'cd "{folder}"{wrap_cmd}'
        else:
            wrap_cmd = f'cd "{folder}";{wrap_cmd}'
    if docker:
        workspace = os.path.basename(folder)
        docker_name = f"{workspace}-ERPLibre-1"
        wrap_cmd = f"docker exec -u root -ti {docker_name} /bin/bash"
        if cmd:
            wrap_cmd += f' -c "{cmd}{str_keep_open}"'
    if wrap_cmd:
        cmd_output = ""
        if rec.terminal == "xterm":
            cmd_output = f"xterm -e bash -c '{wrap_cmd}'"
        elif rec.terminal == "gnome-terminal":
            cmd_output = (
                f"gnome-terminal --window -- bash -c '{wrap_cmd}'"
            )
        elif rec.terminal == "osascript":
            wrap_cmd = wrap_cmd.replace('"', '\\"')
            cmd_output = (
                'osascript -e \'tell app "Terminal" to do script'
                f' "{wrap_cmd}"\''
            )
    else:
        cmd_output = ""
        if rec.terminal == "xterm":
            cmd_output = f"xterm"
        elif rec.terminal == "gnome-terminal":
            cmd_output = f"gnome-terminal --window -- bash"
        elif rec.terminal == "osascript":
            cmd_output = (
                f'osascript -e \'tell app "Terminal" to do script'
                f' "ls"\''
            )
    if cmd_output:
        rec._execute_process(cmd_output)
    if rec.debug_command:
        print(cmd_output)
for rec in self.filtered(lambda r: r.method == "ssh"):
    str_keep_open = ""
    if rec.keep_terminal_open and rec.terminal == "gnome-terminal":
        str_keep_open = ";bash"
    sshpass = ""
    if rec.ssh_use_sshpass and not force_no_sshpass_no_arg:
        if not rec.ssh_password:
            raise exceptions.Warning(
                "Please, configure your password, because you enable"
                " the feature 'ssh_use_sshpass'"
            )
        # TODO validate it exist before use it
        sshpass = f"sshpass -p {rec.ssh_password} "
    if cmd:
        wrap_cmd = f"{cmd}{str_keep_open}"
    else:
        wrap_cmd = ""
    if docker:
        workspace = os.path.basename(folder)
        docker_name = f"{workspace}-ERPLibre-1"
        wrap_cmd = f"docker exec -u root -ti {docker_name} /bin/bash"
        if cmd:
            wrap_cmd += f' -c \\"{cmd}{str_keep_open}\\"'
    else:
        # force replace " to \"
        wrap_cmd = wrap_cmd.replace('"', '\\"')
    argument_ssh = ""
    if rec.ssh_public_host_key:
        # TODO use public host key instead of ignore it
        argument_ssh = (
            ' -o "UserKnownHostsFile=/dev/null" -o'
            ' "StrictHostKeyChecking=no"'
        )
    if folder:
        if wrap_cmd.startswith(";"):
            wrap_cmd = f'cd "{folder}"{wrap_cmd}'
        else:
            wrap_cmd = f'cd "{folder}";{wrap_cmd}'
    if not wrap_cmd:
        wrap_cmd = "bash --login"
    # TODO support other terminal
    addr = rec.get_ssh_address()
    rec.name = f"SSH {addr}"
    cmd_output = (
        "gnome-terminal --window -- bash -c"
        f" '{sshpass}ssh{argument_ssh} -t"
        f' {addr} "{wrap_cmd}"'
        + str_keep_open
        + "'"
    )
    rec._execute_process(cmd_output)
    if rec.debug_command:
        print(cmd_output)""",
                    "name": "execute_terminal_gui",
                    "param": (
                        "self, folder='', cmd='', docker=False,"
                        " force_no_sshpass_no_arg=False"
                    ),
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """workspace = os.path.basename(folder)
docker_name = f"{workspace}-ERPLibre-1"
# for "docker exec", command line need "-ti", but "popen" no need
# TODO catch error, stderr with stdout
cmd_output = f'docker exec -u root {docker_name} /bin/bash -c "{cmd}"'
if self.debug_command:
    print(cmd_output)
return self.execute_with_result(
    cmd_output, folder, return_status=return_status
)""",
                    "name": "exec_docker",
                    "param": "self, cmd, folder, return_status=False",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": '''"""Check if the SSH settings are correct."""
try:
    # Just open and close the connection
    with self.ssh_connection():
        raise exceptions.Warning(_("Connection Test Succeeded!"))
except (
    paramiko.AuthenticationException,
    paramiko.PasswordRequiredException,
    paramiko.BadAuthenticationType,
    paramiko.SSHException,
):
    _logger.info("Connection Test Failed!", exc_info=True)
    raise exceptions.Warning(_("Connection Test Failed!"))''',
                    "name": "action_ssh_test_connection",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": '''"""Return a new SSH connection with found parameters."""
self.ensure_one()

self.ssh_connection_status = False

ssh_client = paramiko.SSHClient()
ssh_client.load_system_host_keys()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
if self.ssh_public_host_key:
    # add to host keys
    key = paramiko.RSAKey(
        data=base64.b64decode(self.ssh_public_host_key)
    )
    ssh_client.get_host_keys().add(
        hostname=self.ssh_host, keytype="ssh-rsa", key=key
    )
ssh_client.connect(
    hostname=self.ssh_host,
    port=self.ssh_port,
    username=None if not self.ssh_user else self.ssh_user,
    password=None if not self.ssh_password else self.ssh_password,
    timeout=timeout,
)
# params = {
#     "host": self.ssh_host,
#     "username": self.ssh_user,
#     "port": self.ssh_port,
# }
#
# # not empty sftp_public_key means that we should verify sftp server with it
# cnopts = pysftp.CnOpts()
# if self.sftp_public_host_key:
#     key = paramiko.RSAKey(
#         data=base64.b64decode(self.sftp_public_host_key)
#     )
#     cnopts.hostkeys.add(self.sftp_host, "ssh-rsa", key)
# else:
#     cnopts.hostkeys = None
#
# _logger.debug(
#     "Trying to connect to sftp://%(username)s@%(host)s:%(port)d",
#     extra=params,
# )
# if self.sftp_private_key:
#     params["private_key"] = self.sftp_private_key
#     if self.sftp_password:
#         params["private_key_pass"] = self.sftp_password
# else:
#     params["password"] = self.sftp_password
#
# return pysftp.Connection(**params, cnopts=cnopts)

# Because, offline will raise an exception
self.ssh_connection_status = True

return ssh_client''',
                    "name": "ssh_connection",
                    "decorator": "@api.model",
                    "param": "self, timeout=5",
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """for rec in self:
    # Need this to install ERPLibre for dev
    # Minimal
    # git make curl which parallel
    # Dev
    # plocate tig vim tree watch git-cola htop make curl build-essential
    # zlib1g-dev libreadline-dev libbz2-dev libffi-dev libssl-dev libldap2-dev wget
    out = rec.execute_terminal_gui(
        cmd=(
            "sudo apt update;sudo apt install -y git make curl which"
            " parallel  plocate vim tree watch git-cola htop tig"
            " build-essential zlib1g-dev libreadline-dev libbz2-dev"
            " libffi-dev libssl-dev libldap2-dev wget"
        ),
    )
    # Debian
    # libxslt-dev libzip-dev libsasl2-dev gdebi-core
    # TODO create link python for pyenv if not exist
    # sudo ln -s /usr/bin/python3 /usr/bin/python
    # print(out)
    # uname -m
    # uname -r
    # uname -s
    # uname -v
    # TODO autodetect missing git config --global
    # git config --global user.email "@"
    # git config --global user.name ""
    # git testing colorized enable color yes y
    # Dev desktop
    # vanille-gnome-desktop""",
                    "name": "action_install_dev_system",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """for rec in self:
    cmd = (
        'for key in ~/.ssh/id_*; do ssh-keygen -l -f "${key}"; done |'
        " uniq"
    )
    log = rec.execute_with_result(cmd, None).strip()
    msg = (
        "Security good : 1. No DSA, 2. RSA key size >= 3072, 3. Better"
        " Ed25519\\n"
        + log
    )
    raise exceptions.Warning(msg)""",
                    "name": "action_show_security_ssh_keygen",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 12,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """for rec in self:
    dct_vm_identifiant = {}
    cmd = "vboxmanage list runningvms"
    out, status = rec.execute_with_result(
        cmd, None, return_status=True
    )
    lst_identifiant_running = []
    out = out.strip()
    if not status and out:
        for vm_config_short in out.split("\\n"):
            # Expect "name" {key}
            pattern = r'"([^"]*)" \{([^}]*)\}'
            matches = re.match(pattern, vm_config_short)
            if not matches:
                _logger.warning(
                    'Cannot find regex to find "name" {key} to'
                    " extract vboxmanage list runningvms :"
                    f" '{vm_config_short}'."
                )
                continue
            name = matches.group(1)
            key = matches.group(2)
            lst_identifiant_running.append(key)

    cmd = "vboxmanage list vms"
    out, status = rec.execute_with_result(
        cmd, None, return_status=True
    )
    out = out.strip()
    if not status and out:
        for vm_config_short in out.split("\\n"):
            # Expect "name" {key}
            pattern = r'"([^"]*)" \{([^}]*)\}'
            matches = re.match(pattern, vm_config_short)
            if not matches:
                _logger.warning(
                    'Cannot find regex to find "name" {key} to'
                    " extract vboxmanage list vms :"
                    f" '{vm_config_short}'."
                )
                continue
            name = matches.group(1)
            key = matches.group(2)
            provider = "VirtualBox"
            # Search if exist before create
            vm_id = self.env["devops.deploy.vm"].search(
                [
                    ("identifiant", "=", key),
                    ("system_id", "=", rec.id),
                    ("provider", "=", provider),
                ],
                limit=1,
            )
            if not vm_id:
                value = {
                    "name": name,
                    "identifiant": key,
                    "provider": provider,
                    "system_id": rec.id,
                }
                vm_id = self.env["devops.deploy.vm"].create(value)
            if vm_id and key in lst_identifiant_running:
                # TODO need to be somewhere else to check status
                value = {
                    "vm_id": vm_id.id,
                    "is_running": True,
                }
                vm_exec_id = self.env["devops.deploy.vm.exec"].create(
                    value
                )
                vm_id.vm_exec_last_id = vm_exec_id.id

            cmd = f"VBoxManage showvminfo {vm_id.identifiant}"
            out, status = rec.execute_with_result(
                cmd, None, return_status=True
            )
            out = out.strip()
            if not status and out:
                # Extract Description
                vm_id.vm_info = out
                key_desc = "Description:"
                key_guest = "Guest:"
                idx_desc = out.find(key_desc)
                idx_guest = out.find(key_guest)
                if idx_desc >= 0 and idx_guest >= 0:
                    desc_str = out[
                        idx_desc + len(key_desc) : idx_guest
                    ].strip()
                    if desc_str:
                        vm_id.vm_description_json = desc_str
                        # Search datastructure {} from Description
                        key_first = "{"
                        key_last = "}"
                        idx_first = desc_str.find(key_first)
                        idx_last = desc_str.find(key_last)
                        if idx_first >= 0 and idx_last >= 0:
                            datastructure = desc_str[
                                idx_first : idx_last + len(key_last)
                            ].strip()
                            if datastructure:
                                obj_vm_desc = json.loads(datastructure)
                                ssh_host = obj_vm_desc.get("ssh_host")
                                if ssh_host:
                                    vm_id.vm_ssh_host = ssh_host
                                    # Find an associate system
                                    system_vm_id = self.env[
                                        "devops.system"
                                    ].search(
                                        [
                                            (
                                                "ssh_host_name",
                                                "=",
                                                ssh_host,
                                            )
                                        ]
                                    )
                                    if system_vm_id:
                                        system_vm_id.devops_deploy_vm_id = (
                                            vm_id.id
                                        )
                # vm_id.vm_description_json = out
            dct_vm_identifiant[key] = vm_id

    # cmd = "vboxmanage list bridgedifs"
    # out, status = rec.execute_with_result(
    #     cmd, None, return_status=True
    # )
    # out = out.strip()
    # if not status and out:
    #     dct_vm_net_info = {}
    #     for info_group in out.split("\\n\\n"):
    #         dct_net_info = {}
    #         for vm_net in info_group.split("\\n"):
    #             key, value = vm_net.split(":", 1)
    #             dct_net_info[key.strip()] = value.strip()
    #         vm_uid = dct_net_info.get("GUID")
    #         if vm_uid:
    #             dct_vm_net_info[vm_uid] = dct_net_info
    #     for guid, dct_net in dct_vm_net_info.items():
    #         print("ok")""",
                    "name": "action_search_vm",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 13,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """self.action_search_workspace()
self.action_refresh_db_image()
self.get_local_system_id_from_ssh_config()
self.action_search_vm()""",
                    "name": "action_search_all",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 14,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """for rec in self:
    if rec.devops_deploy_vm_id:
        if rec.devops_deploy_vm_id.has_vm_exec_running:
            rec.devops_deploy_vm_id.action_stop_vm()
        else:
            rec.devops_deploy_vm_id.action_start_vm()
    else:
        _logger.warning("Not action VM power.")""",
                    "name": "action_vm_power",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 15,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": '''for rec in self:
    # TODO use mdfind on OSX
    # TODO need to do sometime «sudo updatedb»
    if not rec.use_search_cmd:
        return
    if rec.use_search_cmd not in (
        "locate",
        "find",
    ):
        # TODO add information about this missing command, a TODO action
        # raise ValueError(
        #     f"Cannot execute command search '{rec.use_search_cmd}'"
        # )
        _logger.error(
            f"Cannot execute command search '{rec.use_search_cmd}'"
        )
        return
    if rec.use_search_cmd == "locate":
        # Validate word ERPLibre is into default.xml
        cmd = (
            "locate -b -r '^default\.xml$'|grep -v "
            '".repo"|grep -v'
            ' "/var/lib/docker"| xargs -I {} sh -c "grep -l "ERPLibre"'
            ' "{}" 2>/dev/null || true"'
        )
    elif rec.use_search_cmd == "find":
        # Validate word ERPLibre is into default.xml
        cmd = (
            'find "/" -name "default.xml" -type f -print 2>/dev/null |'
            " grep -v .repo | grep -v /var/lib/docker | xargs -I {} sh"
            ' -c "grep -l "ERPLibre" "{}" 2>/dev/null || true"'
        )
    out_default_git = rec.execute_with_result(cmd, None).strip()
    if out_default_git:
        lst_dir_git = [
            os.path.dirname(a) for a in out_default_git.split("\\n")
        ]
    else:
        lst_dir_git = []
    if rec.use_search_cmd == "locate":
        # Validate word ERPLibre is into default.xml
        cmd = (
            'locate -b -r "^docker-compose\.yml$"|grep -v .repo|grep'
            ' -v /var/lib/docker|xargs -I {} sh -c "grep -l "ERPLibre"'
            ' "{}" 2>/dev/null || true"'
        )
    elif rec.use_search_cmd == "find":
        # Validate word ERPLibre is into default.xml
        cmd = (
            'find "/" -name "docker-compose.yml" -type f -print'
            " 2>/dev/null | grep -v .repo | grep -v /var/lib/docker |"
            ' xargs -I {} sh -c "grep -l "ERPLibre" "{}" 2>/dev/null'
            ' || true"'
        )
    out_docker_compose = rec.execute_with_result(cmd, None).strip()
    if out_docker_compose:
        lst_dir_docker = [
            os.path.dirname(a) for a in out_docker_compose.split("\\n")
        ]
        lst_dir_docker = list(
            set(lst_dir_docker).difference(set(lst_dir_git))
        )
    else:
        lst_dir_docker = []
    # if out:
    #     # TODO search live docker
    #     # TODO search all docker-compose.yml and check if support it
    #     # docker ps -q | xargs -I {} docker inspect {} --format '{{ .Id }}: Montages={{ range .Mounts }}{{ .Source }}:{{ .Destination }} {{ end }}
    #     """
    #     "com.docker.compose.project": "#",
    #     "com.docker.compose.project.config_files": "###/docker-compose.yml",
    #     "com.docker.compose.project.working_dir": "###",
    #     "com.docker.compose.service": "ERPLibre",
    #     """
    #     # docker inspect <container_id_or_name> --format '{{ index .Config.Labels "com.docker.compose.project.working_dir" }}'
    # TODO detect is_me if not exist
    lst_ws_value = []
    for dir_name in lst_dir_git:
        # Check if already exist
        rec_ws = rec.devops_workspace_ids.filtered(
            lambda r: r.folder == dir_name
        )
        if rec_ws:
            continue
        # TODO do more validation it's a ERPLibre workspace
        # odoo_dir = os.path.join(dirname, BASE_VERSION_SOFTWARE_NAME)
        # out_odoo = rec.execute_with_result(f"ls {odoo_dir}", None)
        # if out_odoo.startswith("ls: cannot access"):
        #     # This is not a ERPLibre project
        #     continue
        git_dir = os.path.join(dir_name, ".git")
        out_git, status = rec.execute_with_result(
            f"ls {git_dir}", None, return_status=True
        )
        if status:
            continue
        value = {
            "folder": dir_name,
            "system_id": rec.id,
        }
        mode_env_id = self.env.ref(
            "erplibre_devops.erplibre_mode_env_dev"
        )
        mode_exec_id = self.env.ref(
            "erplibre_devops.erplibre_mode_exec_terminal"
        )
        mode_source_id = self.env.ref(
            "erplibre_devops.erplibre_mode_source_git"
        )

        # Has git, get some information
        mode_version_erplibre = rec.execute_with_result(
            "git branch --show-current", dir_name
        ).strip()

        mode_version_base = rec.execute_with_result(
            "git branch --show-current",
            os.path.join(dir_name, BASE_VERSION_SOFTWARE_NAME),
        ).strip()
        if not mode_version_base:
            # Search somewhere else, because it's a commit!
            mode_version_base_raw = rec.execute_with_result(
                'grep "<default remote=" default.xml',
                dir_name,
            )
            regex = r'revision="([^"]+)"'
            result = re.search(regex, mode_version_base_raw)
            mode_version_base = result.group(1) if result else None
            _logger.debug(
                f"Find mode version base {mode_version_base}"
            )

        erplibre_mode = self.env["erplibre.mode"].get_mode(
            mode_env_id,
            mode_exec_id,
            mode_source_id,
            mode_version_base,
            mode_version_erplibre,
        )
        value["erplibre_mode"] = erplibre_mode.id
        lst_ws_value.append(value)
    for dir_name in lst_dir_docker:
        # Check if already exist
        rec_ws = rec.devops_workspace_ids.filtered(
            lambda r: r.folder == dir_name
        )
        if rec_ws:
            continue
        value = {
            "folder": dir_name,
            "system_id": rec.id,
        }
        mode_exec_id = self.env.ref(
            "erplibre_devops.erplibre_mode_exec_docker"
        )
        mode_source_id = self.env.ref(
            "erplibre_devops.erplibre_mode_source_docker"
        )
        # TODO cannot find odoo version from a simple docker-compose, need more information from docker image
        mode_version_base = "12.0"
        key_version = "/erplibre:"
        cmd = (
            f'grep "image:" ./docker-compose.yml |grep "{key_version}"'
        )
        out_docker_compose_file = rec.execute_with_result(
            cmd, dir_name
        ).strip()
        if not out_docker_compose_file:
            _logger.warning(
                "Cannot find erplibre version into docker compose"
                f" {dir_name}"
            )
            continue
        image_version = out_docker_compose_file[
            out_docker_compose_file.find("image: ") + len("image: ") :
        ]
        docker_version = out_docker_compose_file[
            out_docker_compose_file.find(key_version)
            + len(key_version) :
        ]
        if "_" in docker_version:
            mode_env_id = self.env.ref(
                "erplibre_devops.erplibre_mode_env_dev"
            )
        else:
            mode_env_id = self.env.ref(
                "erplibre_devops.erplibre_mode_env_prod"
            )

        erplibre_mode = self.env["erplibre.mode"].get_mode(
            mode_env_id,
            mode_exec_id,
            mode_source_id,
            mode_version_base,
            docker_version,
        )
        value["erplibre_mode"] = erplibre_mode.id
        lst_ws_value.append(value)

    if lst_ws_value:
        ws_ids = self.env["devops.workspace"].create(lst_ws_value)
        ws_ids.action_install_workspace()''',
                    "name": "action_search_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 16,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """path_image_db = os.path.join(os.getcwd(), "image_db")
for file_name in os.listdir(path_image_db):
    if file_name.endswith(".zip"):
        file_path = os.path.join(path_image_db, file_name)
        image_name = file_name[:-4]
        image_db_id = self.env["devops.db.image"].search(
            [("name", "=", image_name)]
        )
        if not image_db_id:
            self.env["devops.db.image"].create(
                {"name": image_name, "path": file_path}
            )""",
                    "name": "action_refresh_db_image",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 17,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": """new_sub_system_id = self.env["devops.system"]
for rec in self:
    config_path = os.path.join(self.path_home, ".ssh/config")
    config_path_exist = rec.os_path_exists(config_path)
    if not config_path_exist:
        continue
    out = rec.execute_with_result(f"cat {config_path}", None)
    out = out.strip()
    # config.parse(file)
    # config = paramiko.SSHConfig()
    # config.parse(out.split("\\n"))
    config = paramiko.SSHConfig.from_text(out)
    # dev_config = config.lookup("martin")
    lst_host = [a for a in config.get_hostnames() if a != "*"]
    for host in lst_host:
        dev_config = config.lookup(host)
        system_id = self.env["devops.system"].search(
            [("name", "=", dev_config.get("hostname"))], limit=1
        )
        if not system_id:
            name = f"{host}[{dev_config.get('hostname')}]"
            value = {
                "method": "ssh",
                "name_overwrite": name,
                "ssh_host": dev_config.get("hostname"),
                "ssh_host_name": host,
                # "ssh_password": dev_config.get("password"),
            }
            if "port" in dev_config.keys():
                value["ssh_port"] = dev_config.get("port")
            if "user" in dev_config.keys():
                value["ssh_user"] = dev_config.get("user")

            value["parent_system_id"] = rec.id
            system_id = self.env["devops.system"].create(value)
        if system_id:
            new_sub_system_id += system_id
return new_sub_system_id""",
                    "name": "get_local_system_id_from_ssh_config",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 18,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
                {
                    "code": '''cmd = f'[ -e "{path}" ] && echo "true" || echo "false"'
result = self.execute_with_result(cmd, None)
return result.strip() == "true"''',
                    "name": "os_path_exists",
                    "decorator": "@api.model",
                    "param": "self, path",
                    "sequence": 19,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_system.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Test Case
        model_model = "devops.test.case"
        model_name = "devops_test_case"
        dct_model = {
            "description": "devops_test_case",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "is_system_test": {
                "code_generator_sequence": 4,
                "field_description": "Is System Test",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "note": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 8,
                "field_description": "Note",
                "ttype": "text",
            },
            "test_cb_method_cg_id": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 6,
                "field_description": "Method CG test case",
                "relation": "devops.cg.test.case",
                "ttype": "many2one",
            },
            "test_cb_method_name": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 7,
                "field_description": "Method name",
                "help": "Will call this method name",
                "ttype": "char",
            },
            "test_plan_id": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 5,
                "field_description": "Test plan",
                "relation": "devops.test.plan",
                "ttype": "many2one",
            },
        }
        model_devops_test_case = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import logging

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_test_case.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Test Case Exec
        model_model = "devops.test.case.exec"
        model_name = "devops_test_case_exec"
        dct_model = {
            "description": "devops_test_case_exec",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "has_devops_action": {
                "code_generator_compute": "_compute_has_devops_action",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 12,
                "field_description": "Has Devops Action",
                "store": True,
                "ttype": "boolean",
            },
            "is_finish": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Is Finish",
                "help": "Execution is finish",
                "readonly": True,
                "ttype": "boolean",
            },
            "is_pass": {
                "code_generator_compute": "_compute_is_pass",
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Is Pass",
                "help": "True test pass, else test fail.",
                "store": True,
                "ttype": "boolean",
            },
            "log": {
                "code_generator_sequence": 6,
                "field_description": "Log",
                "help": "Log for the test",
                "ttype": "text",
            },
            "log_html": {
                "code_generator_compute": "_compute_log_html",
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 7,
                "field_description": "Log Html",
                "store": True,
                "ttype": "html",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "test_case_id": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 9,
                "field_description": "Test case",
                "relation": "devops.test.case",
                "ttype": "many2one",
            },
            "test_plan_exec_id": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 8,
                "field_description": "Plan",
                "on_delete": "cascade",
                "relation": "devops.test.plan.exec",
                "ttype": "many2one",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 11,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "required": True,
                "ttype": "many2one",
            },
        }
        model_devops_test_case_exec = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import logging

from colorama import Fore, Style

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)

LST_CONSOLE_REPLACE_HTML = [
    ("\\n", "<br />"),
    ("\033[0m", "</span>"),
    ("\033[0;30m", '<span style="color: black">'),
    ("\033[0;31m", '<span style="color: red">'),
    ("\033[0;32m", '<span style="color: green">'),
    ("\033[0;33m", '<span style="color: yellow">'),
    ("\033[0;34m", '<span style="color: blue">'),
    ("\033[0;35m", '<span style="color: purple">'),
    ("\033[0;36m", '<span style="color: cyan">'),
    ("\033[0;37m", '<span style="color: white">'),
    ("\033[1m", '<span style="font-weight: bold">'),
    (Style.RESET_ALL, "</span>"),
    (Fore.BLACK, '<span style="color: black">'),
    (Fore.RED, '<span style="color: red">'),
    (Fore.GREEN, '<span style="color: green">'),
    (Fore.YELLOW, '<span style="color: yellow">'),
    (Fore.BLUE, '<span style="color: blue">'),
    (Fore.MAGENTA, '<span style="color: magenta">'),
    (Fore.CYAN, '<span style="color: cyan">'),
    (Fore.WHITE, '<span style="color: white">'),
    ("\033[1;30m", '<span style="font-weight: bold;color: black">'),
    ("\033[1;31m", '<span style="font-weight: bold;color: red">'),
    ("\033[1;32m", '<span style="font-weight: bold;color: green">'),
    ("\033[1;33m", '<span style="font-weight: bold;color: yellow">'),
    ("\033[1;34m", '<span style="font-weight: bold;color: blue">'),
    ("\033[1;35m", '<span style="font-weight: bold;color: purple">'),
    ("\033[1;36m", '<span style="font-weight: bold;color: cyan">'),
    ("\033[1;37m", '<span style="font-weight: bold;color: white">'),
    ("\033[4;30m", '<span style="text-decoration: underline;color: black">'),
    ("\033[4;31m", '<span style="text-decoration: underline;color: red">'),
    ("\033[4;32m", '<span style="text-decoration: underline;color: green">'),
    ("\033[4;33m", '<span style="text-decoration: underline;color: yellow">'),
    ("\033[4;34m", '<span style="text-decoration: underline;color: blue">'),
    ("\033[4;35m", '<span style="text-decoration: underline;color: purple">'),
    ("\033[4;36m", '<span style="text-decoration: underline;color: cyan">'),
    ("\033[4;37m", '<span style="text-decoration: underline;color: white">'),
]""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_test_case_exec.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """for rec in self:
    rec.has_devops_action = (
        rec.test_case_id and rec.test_case_id.test_cb_method_cg_id
    )""",
                    "name": "_compute_has_devops_action",
                    "decorator": '@api.multi;@api.depends("test_case_id")',
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_case_exec.id,
                },
                {
                    "code": """for rec in self:
    if rec.result_ids:
        rec.is_pass = all([a.is_pass for a in rec.result_ids])
    else:
        rec.is_pass = False""",
                    "name": "_compute_is_pass",
                    "decorator": (
                        '@api.multi;@api.depends("result_ids",'
                        ' "result_ids.is_pass")'
                    ),
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_case_exec.id,
                },
                {
                    "code": """lst_result_value = []
for rec in self:
    with rec.workspace_id.devops_create_exec_bundle(
        "Test plan DevOps run test",
        ctx=ctx,
    ) as rec_ws:
        bp_ids = self.env["devops.ide.breakpoint"].search([])
        if not bp_ids:
            msg = f"List of breakpoint is empty."
            _logger.error(msg)
            raise exceptions.Warning(msg)
        for bp_id in bp_ids:
            if bp_id.ignore_test:
                continue

            try:
                lst_line = bp_id.get_breakpoint_info(rec_ws)
            except Exception as e:
                rec.is_finish = True
                lst_result_value.append(
                    {
                        "name": f"Test breakpoint ID {bp_id.id}",
                        "log": (
                            "Exception warning Breakpoint"
                            f" '{bp_id.name}' : {e}"
                        ),
                        "is_finish": True,
                        "is_pass": False,
                        "test_case_exec_id": rec.id,
                    }
                )
                continue
            if not lst_line:
                msg = (
                    f"Cannot find breakpoint {bp_id.name} for file"
                    f" {bp_id.filename}, key : {bp_id.keyword}"
                )
                rec.is_finish = True
                lst_result_value.append(
                    {
                        "name": f"Test breakpoint ID {bp_id.id}",
                        "log": msg,
                        "is_finish": True,
                        "is_pass": False,
                        "test_case_exec_id": rec.id,
                    }
                )
                continue
            if not bp_id.is_multiple and (
                len(lst_line) != 1 or len(lst_line[0][1]) > 1
            ):
                msg = (
                    f"Breakpoint {bp_id.name} is not suppose to find"
                    f" multiple line and got '{lst_line}' into file"
                    f" '{bp_id.filename}' with key '{bp_id.keyword}'"
                )
                rec.is_finish = True
                lst_result_value.append(
                    {
                        "name": f"Test breakpoint ID {bp_id.id}",
                        "log": msg,
                        "is_finish": True,
                        "is_pass": False,
                        "test_case_exec_id": rec.id,
                    }
                )
                continue
            rec.is_finish = True
            lst_result_value.append(
                {
                    "name": f"Test breakpoint ID {bp_id.id}",
                    "is_finish": True,
                    "is_pass": True,
                    "test_case_exec_id": rec.id,
                }
            )
self.env["devops.test.result"].create(lst_result_value)""",
                    "name": "test_breakpoint",
                    "param": "self, ctx=None",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_case_exec.id,
                },
                {
                    "code": """for rec in self:
    log_html = rec.log.strip() if rec.log else ""
    if log_html:
        for rep_str_from, rep_str_to in LST_CONSOLE_REPLACE_HTML:
            log_html = log_html.replace(rep_str_from, rep_str_to)
        rec.log_html = f"<p>{log_html}</p>"
    else:
        rec.log_html = False""",
                    "name": "_compute_log_html",
                    "decorator": '@api.multi;@api.depends("log")',
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_case_exec.id,
                },
                {
                    "code": """# TODO add self.ensure_one() in all action
self.ensure_one()
if not self.has_devops_action:
    return
tc_id = self.test_case_id.test_cb_method_cg_id
ctx = dict(
    self.env.context,
    default_root_workspace_id=self.env.ref(
        "erplibre_devops.devops_workspace_me", raise_if_not_found=False
    ).id,
    default_use_external_cg=True,
    default_use_existing_meta_module=True,
    default_state="code_module",
)
if tc_id.type_test == "gen_ucb":
    ctx = dict(
        ctx,
        default_code_generator_name=tc_id.module_tested[0].name,
        default_working_module_path=tc_id.path_generated,
        default_working_module_path_suggestion="#",
        default_working_module_cg_path=tc_id.path_meta,
        default_working_module_cg_path_suggestion="#",
        default_working_module_template_path=tc_id.path_meta,
        default_working_module_template_path_suggestion="#",
        default_use_existing_meta_module_ucb_only=True,
        default_working_module_name=tc_id.module_generated[0].name,
    )
elif tc_id.type_test == "gen_uca":
    ctx = dict(
        ctx,
        default_code_generator_name=tc_id.module_tested[0].name,
        default_working_module_path=tc_id.path_module_check,
        default_working_module_path_suggestion="#",
        default_working_module_cg_path=tc_id.path_meta,
        default_working_module_cg_path_suggestion="#",
        default_working_module_template_path=tc_id.path_meta,
        default_working_module_template_path_suggestion="#",
        default_use_existing_meta_module_uca_only=True,
    )
# TODO missing type_test run_c, missing install module before run code gen
return {
    "name": _("Run code execution from test."),
    "type": "ir.actions.act_window",
    "view_type": "form",
    "view_mode": "form",
    "res_model": "devops.plan.action.wizard",
    "view_id": self.env.ref(
        "erplibre_devops.devops_plan_action_form"
    ).id,
    "target": "new",
    "context": ctx,
}""",
                    "name": "open_devops_action",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_case_exec.id,
                },
                {
                    "code": """# TODO add self.ensure_one() in all action
self.ensure_one()
# TODO do a copy and change run_in_sandbox, remove all test
ctx = dict(
    self.env.context,
    default_workspace_id=self.env.ref(
        "erplibre_devops.devops_workspace_me",
        raise_if_not_found=False,
    ).id,
    default_run_in_sandbox=False,
    default_test_case_ids=[(4, self.test_case_id.id)],
)
return {
    "name": _("Run test plan execution from test case execution."),
    "type": "ir.actions.act_window",
    "view_type": "form",
    "view_mode": "form",
    "res_model": "devops.test.plan.exec",
    "view_id": self.env.ref(
        "erplibre_devops.devops_test_plan_exec_view_form"
    ).id,
    "target": "new",
    "context": ctx,
}""",
                    "name": "open_new_test_plan_execution",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_case_exec.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Test Plan
        model_model = "devops.test.plan"
        model_name = "devops_test_plan"
        dct_model = {
            "description": "General test plan -> will choose a plan",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_devops_test_plan = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import logging

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_test_plan.id,
            }
            env["code.generator.model.code.import"].create(value)

        # Add/Update Devops Test Plan Exec
        model_model = "devops.test.plan.exec"
        model_name = "devops_test_plan_exec"
        dct_model = {
            "description": "devops_test_plan_exec",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "coverage": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 19,
                "field_description": "Coverage",
                "help": "For CG test",
                "ttype": "boolean",
            },
            "debug": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 22,
                "field_description": "Debug",
                "help": "For CG test",
                "ttype": "boolean",
            },
            "exec_id": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 12,
                "field_description": "Exec id",
                "readonly": True,
                "relation": "devops.exec",
                "ttype": "many2one",
            },
            "exec_start_date": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 5,
                "field_description": "Execution start date",
                "readonly": True,
                "ttype": "datetime",
            },
            "exec_stop_date": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 6,
                "field_description": "Execution stop date",
                "readonly": True,
                "ttype": "datetime",
            },
            "exec_time_duration": {
                "code_generator_compute": "_compute_exec_time_duration",
                "code_generator_sequence": 7,
                "field_description": "Execution time duration",
                "store": True,
                "ttype": "float",
            },
            "execution_is_finished": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Execution Is Finished",
                "help": (
                    "Will be true when the test plan execution is finish to be"
                    " execute."
                ),
                "readonly": True,
                "ttype": "boolean",
            },
            "execution_is_launched": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Execution Is Launched",
                "help": "True when start execution.",
                "readonly": True,
                "ttype": "boolean",
            },
            "global_success": {
                "code_generator_compute": "_compute_global_success",
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 10,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Global Success",
                "help": "Global result",
                "store": True,
                "ttype": "boolean",
            },
            "has_configuration": {
                "code_generator_compute": "_compute_has_configuration",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 23,
                "field_description": "Has Configuration",
                "store": True,
                "ttype": "boolean",
            },
            "ignore_init_check_git": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 24,
                "field_description": "Ignore Init Check Git",
                "help": "For CG test",
                "ttype": "boolean",
            },
            "keep_cache": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 20,
                "field_description": "Keep Cache",
                "help": "For CG test",
                "ttype": "boolean",
            },
            "log": {
                "code_generator_sequence": 15,
                "field_description": "Log",
                "ttype": "text",
            },
            "log_html": {
                "code_generator_compute": "_compute_log_html",
                "code_generator_form_simple_view_sequence": 33,
                "code_generator_sequence": 16,
                "field_description": "Log Html",
                "store": True,
                "ttype": "html",
            },
            "max_process": {
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 25,
                "field_description": "Max Process",
                "help": "For CG test",
                "ttype": "integer",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "no_parallel": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 21,
                "field_description": "No Parallel",
                "help": "For CG test",
                "ttype": "boolean",
            },
            "run_in_sandbox": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 18,
                "default": True,
                "field_description": "Run In Sandbox",
                "ttype": "boolean",
            },
            "summary": {
                "code_generator_compute": "_compute_log_html",
                "code_generator_form_simple_view_sequence": 32,
                "code_generator_sequence": 27,
                "field_description": "Summary",
                "store": True,
                "ttype": "html",
            },
            "test_case_ids": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 13,
                "field_description": "Test case",
                "relation": "devops.test.case",
                "ttype": "many2many",
            },
            "test_plan_id": {
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 11,
                "field_description": "Test plan",
                "relation": "devops.test.plan",
                "ttype": "many2one",
            },
            "time_exec_time_duration": {
                "code_generator_compute": "_compute_exec_time_duration",
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 8,
                "field_description": "Execution time duration second",
                "store": True,
                "ttype": "char",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 26,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "required": True,
                "ttype": "many2one",
            },
        }
        model_devops_test_plan_exec = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """import json
import logging
import os
import uuid
from datetime import timedelta

import pytz
from colorama import Fore, Style

from odoo import _, api, exceptions, fields, models

_logger = logging.getLogger(__name__)

HTML_ENDLINE = "<br />"
LST_CONSOLE_REPLACE_HTML = [
    ("\\n", HTML_ENDLINE),
    ("\033[0m", "</span>"),
    ("\033[0;30m", '<span style="color: black">'),
    ("\033[0;31m", '<span style="color: red">'),
    ("\033[0;32m", '<span style="color: green">'),
    ("\033[0;33m", '<span style="color: yellow">'),
    ("\033[0;34m", '<span style="color: blue">'),
    ("\033[0;35m", '<span style="color: purple">'),
    ("\033[0;36m", '<span style="color: cyan">'),
    ("\033[0;37m", '<span style="color: white">'),
    ("\033[1m", '<span style="font-weight: bold">'),
    (Style.RESET_ALL, "</span>"),
    (Fore.BLACK, '<span style="color: black">'),
    (Fore.RED, '<span style="color: red">'),
    (Fore.GREEN, '<span style="color: green">'),
    (Fore.YELLOW, '<span style="color: yellow">'),
    (Fore.BLUE, '<span style="color: blue">'),
    (Fore.MAGENTA, '<span style="color: magenta">'),
    (Fore.CYAN, '<span style="color: cyan">'),
    (Fore.WHITE, '<span style="color: white">'),
    ("\033[1;30m", '<span style="font-weight: bold;color: black">'),
    ("\033[1;31m", '<span style="font-weight: bold;color: red">'),
    ("\033[1;32m", '<span style="font-weight: bold;color: green">'),
    ("\033[1;33m", '<span style="font-weight: bold;color: yellow">'),
    ("\033[1;34m", '<span style="font-weight: bold;color: blue">'),
    ("\033[1;35m", '<span style="font-weight: bold;color: purple">'),
    ("\033[1;36m", '<span style="font-weight: bold;color: cyan">'),
    ("\033[1;37m", '<span style="font-weight: bold;color: white">'),
    ("\033[4;30m", '<span style="text-decoration: underline;color: black">'),
    ("\033[4;31m", '<span style="text-decoration: underline;color: red">'),
    ("\033[4;32m", '<span style="text-decoration: underline;color: green">'),
    ("\033[4;33m", '<span style="text-decoration: underline;color: yellow">'),
    ("\033[4;34m", '<span style="text-decoration: underline;color: blue">'),
    ("\033[4;35m", '<span style="text-decoration: underline;color: purple">'),
    ("\033[4;36m", '<span style="text-decoration: underline;color: cyan">'),
    ("\033[4;37m", '<span style="text-decoration: underline;color: white">'),
]""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_test_plan_exec.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """for vals in vals_list:
    if not vals.get("name"):
        tzinfo = pytz.timezone(self.env.user.sudo().tz or "UTC")
        vals["name"] = (
            "Test plan"
            f" {fields.datetime.now(tzinfo).strftime('%Y-%m-%d %H:%M:%S')}"
        )
result = super().create(vals_list)
return result""",
                    "name": "create",
                    "decorator": "@api.model_create_multi",
                    "param": "self, vals_list",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """for rec in self:
    rec.summary = False
    log_html = rec.log.strip() if rec.log else ""
    if log_html:
        for rep_str_from, rep_str_to in LST_CONSOLE_REPLACE_HTML:
            log_html = log_html.replace(rep_str_from, rep_str_to)
        rec.log_html = f"<p>{log_html}</p>"
        key_summary = "Summary TEST"
        if key_summary in rec.log_html:
            line_summary_begin = rec.log_html.find(key_summary)
            line_summary_end = rec.log_html.find(
                "<br>Log file", line_summary_begin
            )
            extract_summary = rec.log_html[
                line_summary_begin:line_summary_end
            ]
            rec.summary = (
                f'<p><span style="color: blue">{extract_summary}</p>'
            )
    else:
        rec.log_html = False""",
                    "name": "_compute_log_html",
                    "decorator": '@api.multi;@api.depends("log")',
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """for rec in self:
    # Show configuration for test plan cg
    rec.has_configuration = False
    if rec.test_plan_id and rec.test_plan_id == self.env.ref(
        "erplibre_devops.devops_test_plan_cg"
    ):
        rec.has_configuration = True
    if rec.test_case_ids:
        for test_case_id in rec.test_case_ids:
            if (
                test_case_id.test_plan_id
                and test_case_id.test_plan_id
                == self.env.ref("erplibre_devops.devops_test_plan_cg")
            ):
                rec.has_configuration = True""",
                    "name": "_compute_has_configuration",
                    "decorator": (
                        '@api.depends("test_plan_id", "test_case_ids")'
                    ),
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """for rec in self:
    if rec.exec_ids:
        rec.global_success = all([a.is_pass for a in rec.exec_ids])
    else:
        rec.global_success = False""",
                    "name": "_compute_global_success",
                    "decorator": (
                        '@api.depends("exec_ids", "exec_ids.is_pass")'
                    ),
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """exec_id = rec_ws.execute(
    cmd=f"./.venv/bin/python3 ./odoo/odoo-bin db --list",
    to_instance=True,
)
if not exec_id or exec_id.exec_status > 0:
    self.env["devops.test.result"].create(
        {
            "name": "Cannot execute db list command to ERPLibre.",
            "is_finish": True,
            "is_pass": False,
            "test_case_exec_id": test_case_exec_generic_async_id.id,
        }
    )
    return False
lst_bd = exec_id.log_all.split()
if "_cache_erplibre_base" not in lst_bd:
    exec_id = rec_ws.execute(
        cmd=f"./script/database/db_restore.py --database test",
        to_instance=True,
    )
    if not exec_id or exec_id.exec_status > 0:
        self.env["devops.test.result"].create(
            {
                "name": (
                    "Cannot execute db restore test command to"
                    " ERPLibre."
                ),
                "is_finish": True,
                "is_pass": False,
                "test_case_exec_id": test_case_exec_generic_async_id.id,
            }
        )
        return False
    # Validate
    exec_id = rec_ws.execute(
        cmd=f"./.venv/bin/python3 ./odoo/odoo-bin db --list",
        to_instance=True,
    )
    if not exec_id or exec_id.exec_status > 0:
        self.env["devops.test.result"].create(
            {
                "name": (
                    "Cannot execute db list second try command to"
                    " ERPLibre."
                ),
                "is_finish": True,
                "is_pass": False,
                "test_case_exec_id": test_case_exec_generic_async_id.id,
            }
        )
        return False
    lst_bd = exec_id.log_all.split()
    if "_cache_erplibre_base" not in lst_bd:
        self.env["devops.test.result"].create(
            {
                "name": (
                    "Restore a database test with default parameters"
                    " cannot create DB '_cache_erplibre_base'."
                ),
                "is_finish": True,
                "is_pass": False,
                "test_case_exec_id": test_case_exec_generic_async_id.id,
            }
        )
        return False
    else:
        self.env["devops.test.result"].create(
            {
                "name": (
                    "DB _cache_erplibre_base restored with success and"
                    " validated!"
                ),
                "is_finish": True,
                "is_pass": True,
                "test_case_exec_id": test_case_exec_generic_async_id.id,
            }
        )
else:
    self.env["devops.test.result"].create(
        {
            "name": "DB _cache_erplibre_base already exist.",
            "is_finish": True,
            "is_pass": True,
            "test_case_exec_id": test_case_exec_generic_async_id.id,
        }
    )
return True""",
                    "name": "check_requirement_test_exec_cg",
                    "decorator": "@api.multi",
                    "param": "self, rec_ws, test_case_exec_generic_async_id",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """for rec in self:
    lst_testcase = list(
        set(
            [
                a.test_case_id.id
                for a in rec.exec_ids
                if not a.is_pass
                and a.test_case_id
                and not a.test_case_id.is_system_test
            ]
        )
    )
    if not lst_testcase:
        raise exceptions.Warning("Missing failed testcase to execute.")
    return {
        "type": "ir.actions.act_window",
        "res_model": self._name,
        "context": {
            "default_workspace_id": rec.workspace_id.id,
            "default_test_case_ids": lst_testcase,
        },
        "view_mode": "form",
        "target": "current",
    }""",
                    "name": "action_rerun_fail_testcase",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """lst_test_erplibre_async = []
ws_id = None
self.exec_start_date = fields.Datetime.now(self)
for rec in self:
    if not ws_id:
        ws_id = rec.workspace_id
    with rec.workspace_id.devops_create_exec_bundle(
        "Execute - test plan exec", ctx=ctx
    ) as rec_ws:
        if rec.execution_is_launched:
            continue
        if not rec.test_plan_id and not rec.test_case_ids:
            raise exceptions.Warning(
                "Missing test plan or test cases."
            )
        rec.execution_is_launched = True
        test_case_ids = (
            rec.test_plan_id.test_case_ids
            if rec.test_plan_id
            else rec.test_case_ids
        )
        for test_case_id in test_case_ids:
            test_case_exec_id = self.env[
                "devops.test.case.exec"
            ].create(
                {
                    "name": test_case_id.name,
                    "test_plan_exec_id": rec.id,
                    "workspace_id": rec_ws.id,
                    "test_case_id": test_case_id.id,
                }
            )
            if test_case_id.test_cb_method_name and hasattr(
                test_case_exec_id, test_case_id.test_cb_method_name
            ):
                cb_method = getattr(
                    test_case_exec_id, test_case_id.test_cb_method_name
                )
                cb_method(ctx=rec_ws._context)
            elif test_case_id.test_cb_method_cg_id:
                lst_test_erplibre_async.append(
                    (
                        test_case_exec_id,
                        test_case_id.test_cb_method_cg_id,
                    )
                )
            else:
                self.env["devops.test.result"].create(
                    {
                        "name": f"Search method",
                        "log": (
                            "Cannot find method"
                            f" '{test_case_id.test_cb_method_name}'"
                        ),
                        "is_finish": True,
                        "is_pass": False,
                        "test_case_exec_id": test_case_exec_id.id,
                    }
                )
        # TODO support better execution_is_finished for async, when execution is really finish
        rec.execution_is_finished = True
# # Force compute result
# self._compute_global_success()
if lst_test_erplibre_async:
    lst_test = []
    test_plan_exec_id = None
    for test_case_exec_id, test_case_cg_id in lst_test_erplibre_async:
        test_name = (
            test_case_exec_id.name.strip().replace(" ", "_").lower()
        )
        test_plan_exec_id = test_case_exec_id.test_plan_exec_id
        test_plan_id = test_case_exec_id.test_plan_exec_id.test_plan_id
        test_case_id = test_case_exec_id.test_case_id
        model_test = {
            "test_name": test_name,
        }
        if test_case_cg_id.sequence_test:
            model_test["sequence"] = test_case_cg_id.sequence_test
        if test_case_cg_id.note:
            model_test["note"] = test_case_cg_id.note
        if test_case_cg_id.run_mode == "command":
            model_test["run_command"] = True
            if test_case_cg_id.script_path:
                model_test["script"] = test_case_cg_id.script_path
            else:
                self.env["devops.test.result"].create(
                    {
                        "name": (
                            "Missing field 'script_path' for test"
                            f" {test_name}."
                        ),
                        "is_finish": False,
                        "is_pass": False,
                        "test_case_exec_id": test_case_exec_id.id,
                    }
                )
                continue
        else:
            model_test["run_test_exec"] = True
            model_test[
                "path_module_check"
            ] = test_case_cg_id.path_module_check
            model_test[
                "run_in_sandbox"
            ] = test_plan_exec_id.run_in_sandbox
            if test_case_cg_id.search_class_module:
                model_test[
                    "search_class_module"
                ] = test_case_cg_id.search_class_module
            if test_case_cg_id.file_to_restore:
                model_test[
                    "file_to_restore"
                ] = test_case_cg_id.file_to_restore
            if test_case_cg_id.file_to_restore_origin:
                model_test[
                    "file_to_restore_origin"
                ] = test_case_cg_id.file_to_restore_origin
            if test_case_cg_id.install_path:
                model_test[
                    "install_path"
                ] = test_case_cg_id.install_path
            if test_case_cg_id.restore_db_image_name:
                model_test[
                    "restore_db_image_name"
                ] = test_case_cg_id.restore_db_image_name
            if test_case_cg_id.generated_path:
                model_test[
                    "generated_path"
                ] = test_case_cg_id.generated_path
            if test_case_cg_id.script_after_init_check:
                model_test[
                    "script_after_init_check"
                ] = test_case_cg_id.script_after_init_check
            if test_case_cg_id.module_generated:
                model_test["generated_module"] = ",".join(
                    [a.name for a in test_case_cg_id.module_generated]
                )
            if test_case_cg_id.module_init_ids:
                model_test["init_module_name"] = ",".join(
                    [a.name for a in test_case_cg_id.module_init_ids]
                )
            if test_case_cg_id.module_tested:
                model_test["tested_module"] = ",".join(
                    [a.name for a in test_case_cg_id.module_tested]
                )
        lst_test.append(model_test)
    json_model = json.dumps({"lst_test": lst_test}).replace('"', '\\"')
    path_mkdir_log_external = os.path.join(
        "/",
        "tmp",
        f"erplibre_devops_testcase_cg_log_{uuid.uuid4()}",
    )
    with ws_id.devops_create_exec_bundle(
        "Execute - test plan async exec", ctx=ctx
    ) as rec_ws:
        # Create generic test_case_exec_id
        # TODO what to do if test_plan_exec_id is missing?
        test_case_exec_generic_async_id = self.env[
            "devops.test.case.exec"
        ].create(
            {
                "name": "Async execution test - setup",
                "test_plan_exec_id": test_plan_exec_id.id,
                "workspace_id": rec_ws.id,
                "test_case_id": self.env.ref(
                    "erplibre_devops.devops_test_case_async_execution_setup_test"
                ).id,
            }
        )
        # Requirement, the test need db cache before run or it crash
        status = self.check_requirement_test_exec_cg(
            rec_ws, test_case_exec_generic_async_id
        )
        if not status:
            return
        # TODO store this variable into test plan execution information
        exec_id = rec_ws.execute(
            cmd=f"mkdir -p '{path_mkdir_log_external}'"
        )
        if exec_id.exec_status:
            self.env["devops.test.result"].create(
                {
                    "name": f"Cannot mkdir {path_mkdir_log_external}",
                    "log": exec_id.log_all.strip(),
                    "is_finish": True,
                    "is_pass": False,
                    "test_case_exec_id": test_case_exec_generic_async_id.id,
                }
            )
        pre_cmd_run_test = ""
        if test_plan_exec_id.coverage:
            pre_cmd_run_test += "--coverage "
        if test_plan_exec_id.keep_cache:
            pre_cmd_run_test += "--keep_cache "
        if test_plan_exec_id.no_parallel:
            pre_cmd_run_test += "--no_parallel "
        if test_plan_exec_id.ignore_init_check_git:
            pre_cmd_run_test += "--ignore_init_check_git "
        if test_plan_exec_id.max_process:
            pre_cmd_run_test += (
                f"--max_process={test_plan_exec_id.max_process} "
            )
        if test_plan_exec_id.debug:
            pre_cmd_run_test += "--debug "
        cmd_run_test = (
            "./script/test/run_parallel_test.py --output_result_dir"
            f" {path_mkdir_log_external} {pre_cmd_run_test} --json_model"
            f' "{json_model}"'
        )
        # TODO associate execution per testcase exec and testplan exec
        exec_id = rec_ws.execute(
            cmd=cmd_run_test,
            to_instance=True,
        )
        self.env["devops.test.result"].create(
            {
                "name": f"Execution async done",
                "is_finish": True,
                "is_pass": True,
                "test_case_exec_id": test_case_exec_generic_async_id.id,
            }
        )
        if test_plan_exec_id:
            test_plan_exec_id.log = exec_id.log_all.strip()
            test_plan_exec_id.exec_id = exec_id.id
        if exec_id.exec_status:
            # Fail return error status
            self.env["devops.test.result"].create(
                {
                    "name": (
                        f"Error execute run ERPLibre parallel test"
                    ),
                    "log": exec_id.log_all.strip(),
                    "is_finish": True,
                    "is_pass": False,
                    "test_case_exec_id": test_case_exec_generic_async_id.id,
                }
            )
        for (
            test_case_exec_id,
            test_case_cg_id,
        ) in lst_test_erplibre_async:
            test_name = (
                test_case_exec_id.name.strip()
                .replace(" ", "_")
                .lower()
            )
            path_log = os.path.join(path_mkdir_log_external, test_name)
            # TODO check file before exist, test «file log not exist»
            exec_id = rec_ws.execute(
                cmd=f"cat {path_log}",
            )
            output = exec_id.log_all.strip()
            test_case_exec_id.log = output
            lst_output = output.split("\\n")
            try:
                status = int(lst_output[0])
            except Exception as e:
                self.env["devops.test.result"].create(
                    {
                        "name": f"Log mal formatted - status",
                        "log": lst_output[0],
                        "is_finish": True,
                        "is_pass": False,
                        "test_case_exec_id": test_case_exec_id.id,
                    }
                )
                status = -1
            if status == -1:
                continue
            test_name = lst_output[1]
            try:
                time_exec_sec = int(float(lst_output[2]))
            except Exception as e:
                self.env["devops.test.result"].create(
                    {
                        "name": f"Log mal formatted - time_exec_sec",
                        "log": lst_output[2],
                        "is_finish": True,
                        "is_pass": False,
                        "test_case_exec_id": test_case_exec_id.id,
                    }
                )
                time_exec_sec = 0
            date_log = lst_output[3]
            test_result = "PASS" if not status else "FAIL"
            self.env["devops.test.result"].create(
                {
                    "name": (
                        f"Test result '{test_name}' - {test_result}"
                    ),
                    "log": exec_id.log_all.strip(),
                    "is_finish": True,
                    "time_duration_seconds": time_exec_sec,
                    "date_log": date_log,
                    "is_pass": not status,
                    "test_case_exec_id": test_case_exec_id.id,
                }
            )
self.exec_stop_date = fields.Datetime.now(self)""",
                    "name": "action_execute_test",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
                {
                    "code": """for rec in self:
    if rec.exec_start_date and rec.exec_stop_date:
        rec.exec_time_duration = (
            rec.exec_stop_date - rec.exec_start_date
        ).total_seconds()
        td_str = str(timedelta(seconds=rec.exec_time_duration))
        x = td_str.split(":")
        time_s = ""
        if x[0] != "0":
            time_s = f"{x[0]} Hours "
        if x[1] != "00":
            time_s += f"{x[1]} Minutes "
        time_s += f"{x[2]} Seconds"
        rec.time_exec_time_duration = time_s
    else:
        rec.exec_time_duration = False
        rec.time_exec_time_duration = False""",
                    "name": "_compute_exec_time_duration",
                    "decorator": (
                        '@api.depends("exec_start_date", "exec_stop_date")'
                    ),
                    "param": "self",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_plan_exec.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Test Result
        model_model = "devops.test.result"
        model_name = "devops_test_result"
        dct_model = {
            "description": "devops_test_result",
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "date_log": {
                "code_generator_sequence": 5,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Date Log",
                "ttype": "datetime",
            },
            "has_devops_action": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 13,
                "field_description": "Has Devops Action",
                "ttype": "boolean",
            },
            "is_finish": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 8,
                "code_generator_tree_view_sequence": 13,
                "field_description": "Is Finish",
                "readonly": True,
                "ttype": "boolean",
            },
            "is_pass": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 9,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Is Pass",
                "readonly": True,
                "ttype": "boolean",
            },
            "log": {
                "code_generator_sequence": 6,
                "field_description": "Log",
                "readonly": True,
                "ttype": "text",
            },
            "log_html": {
                "code_generator_compute": "_compute_log_html",
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 7,
                "field_description": "Log Html",
                "store": True,
                "ttype": "html",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "test_case_exec_id": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 10,
                "field_description": "Test Case Exec",
                "relation": "devops.test.case.exec",
                "ttype": "many2one",
            },
            "test_plan_exec_id": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 11,
                "field_description": "Plan",
                "readonly": True,
                "relation": "devops.test.plan.exec",
                "ttype": "many2one",
            },
            "time_duration_seconds": {
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Time Duration Seconds",
                "ttype": "integer",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 12,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
        }
        model_devops_test_result = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """from colorama import Fore, Style

from odoo import _, api, fields, models

# TODO duplicate code, use an external lib
LST_CONSOLE_REPLACE_HTML = [
    ("\\n", "<br />"),
    ("\033[0m", "</span>"),
    ("\033[0;30m", '<span style="color: black">'),
    ("\033[0;31m", '<span style="color: red">'),
    ("\033[0;32m", '<span style="color: green">'),
    ("\033[0;33m", '<span style="color: yellow">'),
    ("\033[0;34m", '<span style="color: blue">'),
    ("\033[0;35m", '<span style="color: purple">'),
    ("\033[0;36m", '<span style="color: cyan">'),
    ("\033[0;37m", '<span style="color: white">'),
    ("\033[1m", '<span style="font-weight: bold">'),
    (Style.RESET_ALL, "</span>"),
    (Fore.BLACK, '<span style="color: black">'),
    (Fore.RED, '<span style="color: red">'),
    (Fore.GREEN, '<span style="color: green">'),
    (Fore.YELLOW, '<span style="color: yellow">'),
    (Fore.BLUE, '<span style="color: blue">'),
    (Fore.MAGENTA, '<span style="color: magenta">'),
    (Fore.CYAN, '<span style="color: cyan">'),
    (Fore.WHITE, '<span style="color: white">'),
    ("\033[1;30m", '<span style="font-weight: bold;color: black">'),
    ("\033[1;31m", '<span style="font-weight: bold;color: red">'),
    ("\033[1;32m", '<span style="font-weight: bold;color: green">'),
    ("\033[1;33m", '<span style="font-weight: bold;color: yellow">'),
    ("\033[1;34m", '<span style="font-weight: bold;color: blue">'),
    ("\033[1;35m", '<span style="font-weight: bold;color: purple">'),
    ("\033[1;36m", '<span style="font-weight: bold;color: cyan">'),
    ("\033[1;37m", '<span style="font-weight: bold;color: white">'),
    ("\033[4;30m", '<span style="text-decoration: underline;color: black">'),
    ("\033[4;31m", '<span style="text-decoration: underline;color: red">'),
    ("\033[4;32m", '<span style="text-decoration: underline;color: green">'),
    ("\033[4;33m", '<span style="text-decoration: underline;color: yellow">'),
    ("\033[4;34m", '<span style="text-decoration: underline;color: blue">'),
    ("\033[4;35m", '<span style="text-decoration: underline;color: purple">'),
    ("\033[4;36m", '<span style="text-decoration: underline;color: cyan">'),
    ("\033[4;37m", '<span style="text-decoration: underline;color: white">'),
]""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_test_result.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """for rec in self:
    log_html = rec.log.strip() if rec.log else ""
    if log_html:
        for rep_str_from, rep_str_to in LST_CONSOLE_REPLACE_HTML:
            log_html = log_html.replace(rep_str_from, rep_str_to)
        rec.log_html = f"<p>{log_html}</p>"
    else:
        rec.log_html = False""",
                    "name": "_compute_log_html",
                    "decorator": '@api.multi;@api.depends("log")',
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_result.id,
                },
                {
                    "code": """return self.test_case_exec_id.open_devops_action()""",
                    "name": "open_devops_action",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_result.id,
                },
                {
                    "code": """return self.test_case_exec_id.open_new_test_plan_execution()""",
                    "name": "open_new_test_plan_execution",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_test_result.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Workspace
        model_model = "devops.workspace"
        model_name = "devops_workspace"
        lst_depend_model = ["mail.thread", "mail.activity.mixin"]
        dct_model = {
            "description": "ERPLibre DevOps Workspace",
            "enable_activity": True,
        }
        dct_field = {
            "active": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 5,
                "default": True,
                "field_description": "Active",
                "force_widget": "boolean_button",
                "ttype": "boolean",
            },
            "db_is_restored": {
                "code_generator_form_simple_view_sequence": 43,
                "code_generator_sequence": 40,
                "field_description": "Db Is Restored",
                "help": "When false, it's because actually restoring a DB.",
                "readonly": True,
                "ttype": "boolean",
            },
            "db_name": {
                "code_generator_form_simple_view_sequence": 40,
                "code_generator_sequence": 38,
                "default": "test",
                "field_description": "DB instance name",
                "ttype": "char",
            },
            "devops_code_todo_count": {
                "code_generator_compute": "_compute_devops_code_todo_count",
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 10,
                "field_description": "Test code TODO count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_exec_bundle_count": {
                "code_generator_compute": "_compute_devops_exec_bundle_count",
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 17,
                "field_description": "Executions bundle count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_exec_bundle_root_count": {
                "code_generator_compute": "_compute_devops_exec_bundle_count",
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 18,
                "field_description": "Executions bundle root count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_exec_count": {
                "code_generator_compute": "_compute_devops_exec_count",
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 14,
                "field_description": "Executions count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_exec_error_count": {
                "code_generator_compute": "_compute_devops_exec_error_count",
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 16,
                "field_description": "Executions error count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_test_plan_exec_count": {
                "code_generator_compute": (
                    "_compute_devops_test_plan_exec_count"
                ),
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 8,
                "field_description": "Test plan exec count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_test_result_count": {
                "code_generator_compute": "_compute_devops_test_result_count",
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 12,
                "field_description": "Test result count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "devops_workspace_format": {
                "code_generator_sequence": 22,
                "default": "zip",
                "field_description": "Devops Workspace Format",
                "help": "Choose the format for this devops_workspace.",
                "selection": (
                    "[('zip', 'zip (includes filestore)'), ('dump', 'pg_dump"
                    " custom format (without filestore)')]"
                ),
                "ttype": "selection",
            },
            "erplibre_mode": {
                "code_generator_form_simple_view_sequence": 29,
                "code_generator_sequence": 44,
                "code_generator_tree_view_sequence": 14,
                "field_description": "Mode",
                "relation": "erplibre.mode",
                "ttype": "many2one",
            },
            "exec_reboot_process": {
                "code_generator_form_simple_view_sequence": 32,
                "code_generator_sequence": 41,
                "field_description": "Exec Reboot Process",
                "help": (
                    "Reboot means kill and reborn, but from operating system,"
                    " where is the origin! False mean keep same parent"
                    " process, reboot the ERP only. When False, a bug occur"
                    " and the transaction cannot finish. Only work with is_me."
                ),
                "ttype": "boolean",
            },
            "folder": {
                "code_generator_form_simple_view_sequence": 28,
                "code_generator_sequence": 33,
                "code_generator_tree_view_sequence": 12,
                "default_lambda": "lambda self: self._default_folder()",
                "field_description": "Folder",
                "help": "Absolute path for storing the devops_workspaces",
                "required": True,
                "ttype": "char",
            },
            "git_branch": {
                "code_generator_form_simple_view_sequence": 35,
                "code_generator_sequence": 48,
                "field_description": "Git branch",
                "ttype": "char",
            },
            "git_url": {
                "code_generator_form_simple_view_sequence": 36,
                "code_generator_sequence": 49,
                "default": "https://github.com/ERPLibre/ERPLibre",
                "field_description": "Git URL",
                "ttype": "char",
            },
            "has_error_restore_db": {
                "code_generator_form_simple_view_sequence": 44,
                "code_generator_sequence": 52,
                "field_description": "Has Error Restore Db",
                "ttype": "boolean",
            },
            "ide_pycharm": {
                "code_generator_form_simple_view_sequence": 42,
                "code_generator_sequence": 35,
                "field_description": "Ide Pycharm",
                "relation": "devops.ide.pycharm",
                "ttype": "many2one",
            },
            "image_db_selection": {
                "code_generator_form_simple_view_sequence": 39,
                "code_generator_sequence": 56,
                "default_lambda": "_default_image_db_selection",
                "field_description": "Image Db Selection",
                "relation": "devops.db.image",
                "ttype": "many2one",
            },
            "is_conflict_mode_exec": {
                "code_generator_compute": "_compute_is_conflict_mode_exec",
                "code_generator_form_simple_view_sequence": 21,
                "code_generator_sequence": 47,
                "comment_before": "TODO move it to erplibre.mode",
                "field_description": "Is Conflict Mode Exec",
                "store": True,
                "ttype": "boolean",
            },
            "is_debug_log": {
                "code_generator_form_simple_view_sequence": 30,
                "code_generator_sequence": 31,
                "field_description": "Is Debug Log",
                "help": "Will print cmd to debug.",
                "ttype": "boolean",
            },
            "is_installed": {
                "code_generator_form_simple_view_sequence": 22,
                "code_generator_sequence": 27,
                "code_generator_tree_view_sequence": 17,
                "field_description": "Installed",
                "help": "Need to install environnement before execute it.",
                "ttype": "boolean",
            },
            "is_me": {
                "code_generator_form_simple_view_sequence": 24,
                "code_generator_sequence": 39,
                "code_generator_tree_view_sequence": 15,
                "field_description": "ME",
                "help": "Add more automatisation about manage itself.",
                "readonly": True,
                "ttype": "boolean",
            },
            "is_robot": {
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_sequence": 28,
                "code_generator_tree_view_sequence": 16,
                "field_description": "Robot",
                "help": "The automated robot to manage ERPLibre.",
                "ttype": "boolean",
            },
            "is_running": {
                "code_generator_form_simple_view_sequence": 23,
                "code_generator_sequence": 32,
                "code_generator_tree_view_sequence": 18,
                "comment_before": (
                    "TODO transform in in compute with"
                    " devops_workspace_docker.is_running"
                ),
                "field_description": "Is Running",
                "readonly": True,
                "ttype": "boolean",
            },
            "log_workspace": {
                "code_generator_form_simple_view_sequence": 47,
                "code_generator_sequence": 23,
                "field_description": "Log Workspace",
                "ttype": "text",
            },
            "mode_exec": {
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_sequence": 45,
                "field_description": "Mode Exec",
                "relation": "erplibre.mode.exec",
                "ttype": "many2one",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Name",
                "help": "Summary of this devops_workspace process",
                "store": True,
                "ttype": "char",
            },
            "namespace": {
                "code_generator_sequence": 30,
                "field_description": "Namespace",
                "help": "Specific name for this workspace",
                "ttype": "char",
            },
            "new_project_count": {
                "code_generator_compute": "_compute_new_project_count",
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 15,
                "field_description": "New project count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "path_code_generator_to_generate": {
                "code_generator_compute": (
                    "_compute_path_code_generator_to_generate"
                ),
                "code_generator_sequence": 29,
                "field_description": "Path Code Generator To Generate",
                "store": True,
                "ttype": "char",
            },
            "path_working_erplibre": {
                "code_generator_sequence": 26,
                "default": "/ERPLibre",
                "field_description": "Path Working Erplibre",
                "ttype": "char",
            },
            "plan_cg_count": {
                "code_generator_compute": "_compute_plan_cg_count",
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 54,
                "field_description": "Plan CG count",
                "force_widget": "statinfo",
                "store": True,
                "ttype": "integer",
            },
            "port_http": {
                "code_generator_form_simple_view_sequence": 33,
                "code_generator_sequence": 36,
                "comment_before": "TODO backup button and restore button",
                "default": 8069,
                "field_description": "port http",
                "help": "The port of http odoo.",
                "ttype": "integer",
            },
            "port_longpolling": {
                "code_generator_form_simple_view_sequence": 34,
                "code_generator_sequence": 37,
                "default": 8071,
                "field_description": "port longpolling",
                "help": "The port of longpolling odoo.",
                "ttype": "integer",
            },
            "sequence": {
                "code_generator_sequence": 6,
                "default": 10,
                "field_description": "Sequence",
                "ttype": "integer",
            },
            "show_error_chatter": {
                "code_generator_form_simple_view_sequence": 31,
                "code_generator_sequence": 24,
                "field_description": "Show Error Chatter",
                "help": "Show error to chatter",
                "ttype": "boolean",
            },
            "system_id": {
                "code_generator_form_simple_view_sequence": 27,
                "code_generator_sequence": 34,
                "code_generator_tree_view_sequence": 13,
                "default_lambda": (
                    "lambda self:"
                    " self.env.ref('erplibre_devops.devops_system_local',   "
                    " raise_if_not_found=False)"
                ),
                "field_description": "System",
                "relation": "devops.system",
                "required": True,
                "ttype": "many2one",
            },
            "system_method": {
                "code_generator_sequence": 46,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Method",
                "help": "Choose the communication method.",
                "selection": (
                    "[('local', 'Local disk'), ('ssh', 'SSH remote server')]"
                ),
                "ttype": "selection",
            },
            "url_instance": {
                "code_generator_compute": "_compute_url_instance",
                "code_generator_form_simple_view_sequence": 37,
                "code_generator_sequence": 42,
                "field_description": "Url Instance",
                "force_widget": "url",
                "store": True,
                "ttype": "char",
            },
            "url_instance_database_manager": {
                "code_generator_compute": "_compute_url_instance",
                "code_generator_form_simple_view_sequence": 38,
                "code_generator_sequence": 43,
                "field_description": "Url Instance Database Manager",
                "force_widget": "url",
                "store": True,
                "ttype": "char",
            },
            "workspace_docker_id": {
                "code_generator_form_simple_view_sequence": 41,
                "code_generator_sequence": 50,
                "field_description": "Workspace Docker",
                "relation": "devops.workspace.docker",
                "ttype": "many2one",
            },
            "workspace_terminal_id": {
                "code_generator_sequence": 51,
                "field_description": "Workspace Terminal",
                "relation": "devops.workspace.terminal",
                "ttype": "many2one",
            },
        }
        model_devops_workspace = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
            lst_depend_model=lst_depend_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import json
import logging
import os
import pathlib
import platform
import re
import subprocess
import time
import traceback
from contextlib import contextmanager

import requests

from odoo import _, api, exceptions, fields, models, service, tools

_logger = logging.getLogger(__name__)
# TODO move into configuration or erplibre_devops
SLEEP_KILL = 2
SLEEP_WAIT_KILL = 3
SLEEP_ERROR_RESTORE_KILL = 5""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_workspace.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": """return self.env["devops.db.image"].search(
    [("name", "like", "erplibre_base")], limit=1
)""",
                    "name": "_default_image_db_selection",
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """rec_ids = super().create(vals_list)
for rec_id in rec_ids:
    if not rec_id.ide_pycharm:
        rec_id.ide_pycharm = self.env["devops.ide.pycharm"].create(
            {"devops_workspace": rec_id.id}
        )
    rec_id.message_subscribe(
        partner_ids=[self.env.ref("base.partner_admin").id]
    )
    # help to find path.home of ERPLibre
    config_id = self.env["erplibre.config.path.home"].get_path_home_id(
        os.path.dirname(rec_id.folder)
    )
    rec_id.system_id.erplibre_config_path_home_ids = [
        (4, config_id.id)
    ]
return rec_ids""",
                    "name": "create",
                    "decorator": "@api.model_create_multi",
                    "param": "self, vals_list",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """return os.getcwd()""",
                    "name": "_default_folder",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.name = ""
    if rec.is_me:
        rec.name += "💻"
    if rec.is_robot:
        rec.name += "🤖"
    if rec.name:
        rec.name += " "
    if rec.namespace:
        rec.name += rec.namespace
    elif rec.folder:
        rec.name += rec.folder""",
                    "name": "_compute_name",
                    "decorator": (
                        '@api.multi;@api.depends("is_me", "is_robot",'
                        ' "folder", "namespace")'
                    ),
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    if rec.erplibre_mode:
        rec.is_conflict_mode_exec = (
            rec.erplibre_mode.mode_source
            == self.env.ref(
                "erplibre_devops.erplibre_mode_source_docker"
            )
            and rec.erplibre_mode.mode_exec
            != self.env.ref(
                "erplibre_devops.erplibre_mode_exec_docker"
            )
        )""",
                    "name": "_compute_is_conflict_mode_exec",
                    "decorator": (
                        '@api.multi;@api.depends("erplibre_mode.mode_source",'
                        ' "erplibre_mode.mode_exec")'
                    ),
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    # Append unpack list with cg and template
    lst_path = ["addons/addons"] + [
        b
        for c in [
            [
                a.path_code_generator_to_generate,
                a.path_code_generator_to_generate_cg,
                a.path_code_generator_to_generate_template,
            ]
            for a in rec.plan_cg_ids
        ]
        for b in c
    ]
    rec.path_code_generator_to_generate = ";".join(set(lst_path))""",
                    "name": "_compute_path_code_generator_to_generate",
                    "decorator": '@api.multi;@api.depends("plan_cg_ids.path_code_generator_to_generate")',
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    # TODO create configuration
    # localhost = "127.0.0.1"
    localhost = "localhost"
    url_host = (
        rec.system_id.ssh_host
        if rec.system_id.method == "ssh"
        else localhost
    )
    rec.url_instance = f"http://{url_host}:{rec.port_http}"
    rec.url_instance_database_manager = (
        f"{rec.url_instance}/web/database/manager"
    )""",
                    "name": "_compute_url_instance",
                    "decorator": (
                        '@api.multi;@api.depends("system_id.ssh_host",'
                        ' "system_id.method", "port_http")'
                    ),
                    "param": "self",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.devops_exec_count = self.env["devops.exec"].search_count(
        [("devops_workspace", "=", rec.id)]
    )""",
                    "name": "_compute_devops_exec_count",
                    "decorator": (
                        '@api.multi;@api.depends("devops_exec_ids",'
                        ' "devops_exec_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.devops_test_plan_exec_count = self.env[
        "devops.test.plan.exec"
    ].search_count([("workspace_id", "=", rec.id)])""",
                    "name": "_compute_devops_test_plan_exec_count",
                    "decorator": (
                        '@api.multi;@api.depends("devops_test_plan_exec_ids",'
                        ' "devops_test_plan_exec_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.devops_code_todo_count = self.env[
        "devops.code.todo"
    ].search_count([("workspace_id", "=", rec.id)])""",
                    "name": "_compute_devops_code_todo_count",
                    "decorator": (
                        '@api.multi;@api.depends("devops_code_todo_ids",'
                        ' "devops_code_todo_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.devops_test_result_count = self.env[
        "devops.test.result"
    ].search_count([("workspace_id", "=", rec.id)])""",
                    "name": "_compute_devops_test_result_count",
                    "decorator": (
                        '@api.multi;@api.depends("devops_test_result_ids",'
                        ' "devops_test_result_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.plan_cg_count = self.env["devops.plan.cg"].search_count(
        [("workspace_id", "=", rec.id)]
    )""",
                    "name": "_compute_plan_cg_count",
                    "decorator": (
                        '@api.multi;@api.depends("plan_cg_ids",'
                        ' "plan_cg_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.devops_exec_error_count = self.env[
        "devops.exec.error"
    ].search_count([("devops_workspace", "=", rec.id)])""",
                    "name": "_compute_devops_exec_error_count",
                    "decorator": (
                        '@api.multi;@api.depends("devops_exec_error_ids",'
                        ' "devops_exec_error_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 12,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.devops_exec_bundle_count = self.env[
        "devops.exec.bundle"
    ].search_count([("devops_workspace", "=", rec.id)])
    rec.devops_exec_bundle_root_count = self.env[
        "devops.exec.bundle"
    ].search_count(
        [("devops_workspace", "=", rec.id), ("parent_id", "=", False)]
    )""",
                    "name": "_compute_devops_exec_bundle_count",
                    "decorator": (
                        '@api.multi;@api.depends("devops_exec_bundle_ids",'
                        ' "devops_exec_bundle_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 13,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    rec.new_project_count = self.env[
        "devops.cg.new_project"
    ].search_count([("devops_workspace", "=", rec.id)])""",
                    "name": "_compute_new_project_count",
                    "decorator": (
                        '@api.multi;@api.depends("new_project_ids",'
                        ' "new_project_ids.active")'
                    ),
                    "param": "self",
                    "sequence": 14,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Setup PyCharm debug") as rec:
        rec.ide_pycharm.action_pycharm_open(rec, folder=rec.folder)""",
                    "name": "action_open_workspace_pycharm",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 15,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Setup PyCharm debug") as rec:
        rec.ide_pycharm.action_cg_setup_pycharm_debug()""",
                    "name": "action_cg_setup_pycharm_debug",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 16,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Clear error exec") as rec:
        for error in rec.devops_exec_error_ids:
            error.active = False""",
                    "name": "action_clear_error_exec",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 17,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle(
        "Format ERPLibre DevOps"
    ) as rec:
        rec.execute(
            cmd=(
                "./script/maintenance/format.sh"
                " ./addons/ERPLibre_erplibre_addons/erplibre_devops"
            )
        )""",
                    "name": "action_format_erplibre_devops",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 18,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle(
        "Update ERPLibre DevOps"
    ) as rec:
        # TODO change db_name from this db
        rec.execute(
            cmd=(
                "./run.sh --limit-time-real 999999 --no-http"
                f" --stop-after-init --dev cg -d {rec.db_name} -i"
                " erplibre_devops -u erplibre_devops"
            )
        )""",
                    "name": "action_update_erplibre_devops",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 19,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Install module") as rec:
        # str_module_list is string separate module by ','
        if rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
        ]:
            last_cmd = rec.workspace_docker_id.docker_cmd_extra
            rec.workspace_docker_id.docker_cmd_extra = (
                f"-d {rec.db_name} -i {str_module_list} -u"
                f" {str_module_list}"
            )
            # TODO option install continuous or stop execution.
            # TODO Use install continuous in production, else stop execution for dev
            # TODO actually, it's continuous
            # TODO maybe add an auto-update when detect installation finish
            rec.action_reboot()
            rec.workspace_docker_id.docker_cmd_extra = last_cmd
        elif rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_terminal")
        ]:
            rec.execute(
                "./script/addons/install_addons.sh"
                f" {rec.db_name} {str_module_list}",
                to_instance=True,
            )
            rec.action_reboot()""",
                    "name": "install_module",
                    "decorator": "@api.multi",
                    "param": "self, str_module_list",
                    "sequence": 20,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Open Terminal") as rec:
        rec.execute(force_open_terminal=True)""",
                    "name": "action_open_terminal",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 21,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Open directory") as rec:
        # TODO this need to use system
        if rec.is_me:
            if platform.system() == "Windows":
                os.startfile(rec.folder)
            elif platform.system() == "Darwin":
                subprocess.Popen(["open", rec.folder])
            else:
                subprocess.Popen(["xdg-open", rec.folder])
        else:
            if rec.system_id.method == "ssh":
                cmd = (
                    "nautilus"
                    f" ssh://{rec.system_id.ssh_user}@{rec.system_id.ssh_host}/{rec.folder}"
                )
            else:
                cmd = f"nautilus {rec.folder}"
            self.env.ref(
                "erplibre_devops.devops_workspace_me"
            ).execute(cmd=cmd)""",
                    "name": "action_open_directory",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 22,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": '''"""Run all scheduled check."""
return self.search([]).action_check()''',
                    "name": "action_check_all",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 23,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    # Track exception because it's run from cron
    with rec_o.devops_create_exec_bundle("Check all") as rec:
        # rec.docker_initiate_succeed = not rec.docker_initiate_succeed
        # TODO Check if project is installed, check script installation
        # exec_id = rec.execute(cmd=f"ls {rec.folder}")
        # lst_file = exec_id.log_all.strip().split("\\n")
        # if any(
        #     [
        #         "No such file or directory" in str_file
        #         for str_file in lst_file
        #     ]
        # ):
        #     rec.is_installed = False
        if rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
        ]:
            rec.is_running = rec.workspace_docker_id.docker_is_running
            rec.workspace_docker_id.action_check()
        elif rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_terminal")
        ]:
            exec_id = rec.execute(
                f"lsof -i TCP:{rec.port_http} | grep python",
                error_on_status=False,
            )
            rec.is_running = bool(exec_id.log_all)
            rec.workspace_terminal_id.action_check()
        else:
            _logger.warning(
                "Support other mode_exec to detect is_running"
                f" '{rec.mode_exec}'"
            )""",
                    "name": "action_check",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 24,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle(
        "Install ME workspace"
    ) as rec:
        # Set same BD of this instance
        rec.db_name = self.env.cr.dbname
        # Detect the mode exec of this instance
        exec_id = rec.execute(
            cmd=f"ls {rec.folder}/.git", error_on_status=False
        )
        status_ls = exec_id.log_all
        if "No such file or directory" not in status_ls:
            rec.erplibre_mode = self.env.ref(
                "erplibre_devops.erplibre_mode_git_robot_libre"
            ).id
        rec.action_install_workspace()
        rec.is_me = True
        rec.is_robot = True
        rec.port_http = 8069
        rec.port_longpolling = 8072
        rec.is_running = True""",
                    "name": "action_install_me_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 25,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Restore DB image") as rec:
        rec.has_error_restore_db = False
        if rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_terminal")
        ]:
            image = ""
            if rec.image_db_selection:
                image = f" --image {rec.image_db_selection.name}"
            cmd = (
                "./script/database/db_restore.py --database"
                f" {rec.db_name}{image};"
            )
            exec_id = rec.execute(
                cmd=cmd, folder=rec.path_working_erplibre
            )
            rec.log_workspace = f"\\n{exec_id.log_all}"
        elif rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
        ]:
            # maybe send by network REST web/database/restore
            url_list = f"{rec.url_instance}/web/database/list"
            url_restore = f"{rec.url_instance}/web/database/restore"
            url_drop = f"{rec.url_instance}/web/database/drop"
            if not rec.image_db_selection:
                # TODO create stage, need a stage ready to restore
                raise exceptions.Warning(
                    _("Error, need field db_selection")
                )
            rec.db_is_restored = False
            backup_file_path = rec.image_db_selection.path
            session = requests.Session()
            response = requests.get(
                url_list,
                data=json.dumps({}),
                headers={
                    "Content-Type": "application/json",
                    "Accept": "application/json",
                },
            )
            if response.status_code == 200:
                database_list = response.json()
                _logger.info(database_list)
            else:
                _logger.error(
                    "Restore image response error"
                    f" {response.status_code}"
                )
                continue

            # Delete first
            # TODO cannot delete database if '-d database' argument -d is set
            result_db_list = database_list.get("result")
            if rec.db_name in result_db_list:
                _logger.info(result_db_list)
                files = {
                    "master_pwd": (None, "admin"),
                    "name": (None, rec.db_name),
                }
                response = session.post(url_drop, files=files)
                if response.status_code == 200:
                    _logger.info("Le drop a été envoyé avec succès.")
                else:
                    rec.workspace_docker_id.docker_cmd_extra = ""
                    # TODO detect "-d" in execution instead of force action_reboot
                    rec.action_reboot()
                    _logger.error(
                        "Une erreur s'est produite lors du drop, code"
                        f" '{response.status_code}'. Retry in"
                        f" {SLEEP_ERROR_RESTORE_KILL} seconds"
                    )
                    # Strange, retry for test
                    time.sleep(SLEEP_ERROR_RESTORE_KILL)
                    # response = requests.get(
                    #     url_list,
                    #     data=json.dumps({}),
                    #     headers={
                    #         "Content-Type": "application/json",
                    #         "Accept": "application/json",
                    #     },
                    # )
                    response = session.post(url_drop, files=files)
                    if response.status_code == 200:
                        # database_list = response.json()
                        # print(database_list)
                        _logger.info(
                            "Seconde essaie, le drop a été envoyé avec"
                            " succès."
                        )
                    else:
                        _logger.error(
                            "Seconde essaie, une erreur s'est produite"
                            " lors du drop, code"
                            f" '{response.status_code}'."
                        )
                        rec.has_error_restore_db = True
                if not rec.has_error_restore_db:
                    response = requests.get(
                        url_list,
                        data=json.dumps({}),
                        headers={
                            "Content-Type": "application/json",
                            "Accept": "application/json",
                        },
                    )
                    if response.status_code == 200:
                        database_list = response.json()
                        _logger.info(database_list)

            if not rec.has_error_restore_db:
                with open(backup_file_path, "rb") as backup_file:
                    files = {
                        "backup_file": (
                            backup_file.name,
                            backup_file,
                            "application/octet-stream",
                        ),
                        "master_pwd": (None, "admin"),
                        "name": (None, rec.db_name),
                    }
                    response = session.post(url_restore, files=files)
                if response.status_code == 200:
                    _logger.info(
                        "Le fichier de restauration a été envoyé avec"
                        " succès."
                    )
                    rec.db_is_restored = True
                else:
                    _logger.error(
                        "Une erreur s'est produite lors de l'envoi du"
                        " fichier de restauration."
                    )

            # f = {'file data': open(f'./image_db{rec.path_working_erplibre}_base.zip', 'rb')}
            # res = requests.post(url_restore, files=f)
            # print(res.text)""",
                    "name": "action_restore_db_image",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 26,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec in self:
    if rec.erplibre_mode.mode_exec in [
        self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
    ]:
        if not rec.workspace_docker_id:
            rec.workspace_docker_id = self.env[
                "devops.workspace.docker"
            ].create({"workspace_id": rec.id})
    elif rec.erplibre_mode.mode_exec in [
        self.env.ref("erplibre_devops.erplibre_mode_exec_terminal")
    ]:
        if not rec.workspace_terminal_id:
            rec.workspace_terminal_id = self.env[
                "devops.workspace.terminal"
            ].create({"workspace_id": rec.id})
    else:
        raise exceptions.Warning(f"Cannot support '{rec.mode_exec}'")""",
                    "name": "check_devops_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 27,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Start") as rec:
        rec.check_devops_workspace()
        if rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
        ]:
            rec.workspace_docker_id.action_start_docker_compose()
        elif rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_terminal")
        ]:
            rec.execute(
                cmd=(
                    "./run.sh -d"
                    f" {rec.db_name} --http-port={rec.port_http} --longpolling-port={rec.port_longpolling}"
                ),
                force_open_terminal=True,
            )
            # TODO validate output if execution conflict port to remove time.sleep
            rec.is_running = True
            # Time to start services, because action_check need time to detect port is open
            time.sleep(SLEEP_KILL)""",
                    "name": "action_start",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 28,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Stop") as rec:
        rec.check_devops_workspace()
        if rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
        ]:
            rec.workspace_docker_id.action_stop_docker_compose()
            rec.action_check()
        elif rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_terminal")
        ]:
            if rec.is_me:
                pid = os.getpid()
                rec.execute(
                    cmd=f"sleep {SLEEP_KILL};kill -9 {pid}",
                    force_open_terminal=True,
                    force_exit=True,
                    error_on_status=False,
                )
                rec_o.is_running = False
            else:
                rec.kill_process()
                rec.action_check()""",
                    "name": "action_stop",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 29,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Update DevOps") as rec:
        rec.action_format_erplibre_devops()
        rec.action_update_erplibre_devops()
        rec.action_reboot()""",
                    "name": "action_update",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 30,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Parse code") as rec:
        self.env["devops.code.todo"].parse_workspace(rec)""",
                    "name": "action_parse_code",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None",
                    "sequence": 31,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Open local view") as rec:
        str_url_instance = (
            url_instance if url_instance else rec.url_instance
        )
        self.env.ref("erplibre_devops.devops_workspace_me").execute(
            cmd=(
                "source"
                " ./.venv/bin/activate;./script/selenium/web_login.py"
                f" --url {str_url_instance}"
            ),
            force_open_terminal=True,
            run_into_workspace=True,
        )""",
                    "name": "action_open_local_view",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, url_instance=None",
                    "sequence": 32,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Reboot") as rec:
        exec_reboot_process = rec._context.get(
            "default_exec_reboot_process", rec.exec_reboot_process
        )
        if rec.is_me:
            if not exec_reboot_process:
                service.server.restart()
            else:
                # Expect already run ;-), no need to validate
                pid = os.getpid()
                rec.execute(
                    cmd=f"sleep {SLEEP_KILL};kill -9 {pid}",
                    force_open_terminal=True,
                    force_exit=True,
                    error_on_status=False,
                )
                rec.execute(
                    cmd=(
                        f"sleep {SLEEP_WAIT_KILL};./run.sh -d"
                        f" {rec.db_name} --http-port={rec.port_http} --longpolling-port={rec.port_longpolling}"
                    ),
                    force_open_terminal=True,
                    error_on_status=False,
                )
        else:
            rec.action_stop()
            rec.action_start()""",
                    "name": "action_reboot",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 33,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Kill process") as rec:
        if sleep_kill:
            cmd = f"sleep {SLEEP_KILL};"
        else:
            cmd = ""
        if not port:
            port = rec.port_http
        exec_id = rec.execute(
            f"lsof -FF -c python -i TCP:{port} -a",
            error_on_status=False,
        )
        if exec_id.log_all:
            lines = [
                a
                for a in exec_id.log_all.split("\\n")
                if a.startswith("p")
            ]
            if len(lines) > 1:
                _logger.warning(
                    "What is the software for the port"
                    f" {port} : {exec_id.log_all}"
                )
            elif len(lines) == 1:
                cmd += f"kill -9 {lines[0][1:]}"
                rec.execute(
                    cmd=cmd,
                    force_open_terminal=True,
                    force_exit=True,
                    error_on_status=False,
                )
                rec_o.is_running = False""",
                    "name": "kill_process",
                    "decorator": "@api.multi",
                    "param": "self, port=None, sleep_kill=0",
                    "sequence": 34,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Install workspace") as rec:
        exec_id = rec.execute(
            cmd=f"ls {rec.folder}", error_on_status=False
        )
        lst_file = exec_id.log_all.strip().split("\\n")
        rec.namespace = os.path.basename(rec.folder)
        if rec.erplibre_mode.mode_source in [
            self.env.ref("erplibre_devops.erplibre_mode_source_docker")
        ]:
            if "docker-compose.yml" in lst_file:
                # TODO try to reuse
                _logger.info(
                    "detect docker-compose.yml, please read it"
                )
            rec.action_pre_install_workspace()
            rec.path_working_erplibre = "/ERPLibre"
        elif rec.erplibre_mode.mode_source in [
            self.env.ref("erplibre_devops.erplibre_mode_source_git")
        ]:
            # TODO this can be move to erplibre_mode
            if rec.erplibre_mode.mode_exec in [
                self.env.ref(
                    "erplibre_devops.erplibre_mode_exec_docker"
                )
            ]:
                rec.path_working_erplibre = "/ERPLibre"
            else:
                rec.path_working_erplibre = rec.folder
            branch_str = ""
            if rec.erplibre_mode.mode_version_erplibre:
                branch_str = (
                    f" -b {rec.erplibre_mode.mode_version_erplibre.value}"
                )
            git_arg = f"{branch_str} {rec.folder}"

            # TTODO bug if file has same key
            # if any(["ls:cannot access " in str_file for str_file in lst_file]):
            # if any(
            #     [
            #         "No such file or directory" in str_file
            #         for str_file in lst_file
            #     ]
            # ):
            is_first_install = False
            if exec_id.exec_status:
                dir_name = os.path.dirname(rec.folder)
                # No such directory
                exec_id = rec.execute(
                    cmd=f"git clone {rec.git_url}{git_arg}",
                    folder=dir_name,
                    error_on_status=False,
                )
                rec.log_workspace = exec_id.log_all
                if exec_id.exec_status:
                    raise Exception(exec_id.log_all)
                is_first_install = True
            else:
                _logger.info(
                    f'Git project already exist for "{rec.folder}"'
                )
                # Check branch
                if self.env.context.get("force_reinstall_workspace"):
                    if (
                        rec.erplibre_mode
                        and rec.erplibre_mode.mode_version_erplibre
                    ):
                        branch_str = (
                            rec.erplibre_mode.mode_version_erplibre.value
                        )
                    else:
                        branch_str = ""

                    exec_id = rec.execute(
                        cmd=(
                            "git fetch --all;git checkout"
                            f" {branch_str}"
                        ),
                        folder=rec.folder,
                        force_open_terminal=True,
                    )
                    if exec_id.exec_status:
                        raise Exception(exec_id.log_all)
            if self.env.context.get("install_dev_workspace"):
                exec_id = rec.execute(
                    cmd=f"./script/install/install_dev.sh",
                    folder=rec.folder,
                    force_open_terminal=True,
                )
                # print(exec_id)
                # Force stop execution, async execution installation
                return
            if is_first_install or self.env.context.get(
                "force_reinstall_workspace"
            ):
                # TODO implement debug with step and open with open-terminal async
                exec_id = rec.execute(
                    cmd=f"./script/install/install_locally_dev.sh",
                    folder=rec.folder,
                    error_on_status=False,
                )
                rec.log_workspace = exec_id.log_all
                if exec_id.exec_status:
                    raise Exception(exec_id.log_all)
                # TODO fix this bug, but activate into install script
                # TODO bug only for local, ssh is good
                # Bug poetry thinks it's installed, so force it
                # result = rec.system_id.execute_with_result(
                #     f"cd {rec.folder};source"
                #     " ./.venv/bin/activate;poetry install"
                # )
                # rec.log_workspace += result
                rec.execute(
                    cmd=(
                        'bash -c "source'
                        ' ./.venv/bin/activate;poetry install"'
                    ),
                    force_open_terminal=True,
                )
                if exec_id.exec_status:
                    raise Exception(exec_id.log_all)
            rec.update_makefile_from_git()

            # lst_file = rec.execute(cmd=f"ls {rec.folder}").log_all.strip().split("\\n")
            # if "docker-compose.yml" in lst_file:
            # if rec.mode_environnement in ["prod", "test"]:
            #     result = rec.system_id.execute_with_result(
            #         f"git clone https://github.com{rec.path_working_erplibre}{rec.path_working_erplibre}"
            #         f"{branch_str}"
            #     )
            # else:
        rec.action_network_change_port_random()
        # TODO this "works" for source git, but source docker, need to check docker inspect
        folder_venv = os.path.join(rec.folder, ".venv")
        rec.is_installed = rec.os_path_exists(
            rec.folder
        ) and rec.os_path_exists(folder_venv)
        # TODO now, robot is this branch, but find another way to identify it
        rec.is_robot = (
            rec.erplibre_mode.mode_version_erplibre.id
            == self.env.ref(
                "erplibre_devops.erplibre_mode_version_erplibre_robot_libre"
            ).id
        )""",
                    "name": "action_install_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 35,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Update makefile") as rec:
        exec_mk_ref_id = rec.execute(
            cmd=(
                "git show"
                f" {rec.erplibre_mode.mode_version_erplibre.value}:Makefile"
            ),
            to_instance=True,
        )
        ref_makefile_content = exec_mk_ref_id.log_all
        exec_mk_now_id = rec.execute(
            cmd=f"cat Makefile", to_instance=True
        )
        now_makefile_content = exec_mk_now_id.log_all

        lst_ref = rec.get_lst_target_makefile(ref_makefile_content)
        lst_now = rec.get_lst_target_makefile(now_makefile_content)

        diff = set(lst_now).difference(set(lst_ref))
        lst_diff = list(diff)
        lst_ignore_target = ("PHONY",)
        for target in lst_diff:
            if target in lst_ignore_target:
                continue
            self.env["devops.log.makefile.target"].create(
                {"name": target, "devops_workspace_id": rec.id}
            )""",
                    "name": "update_makefile_from_git",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 36,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """# TODO search into context if need to parallel or serial
lst_result = []
first_log_debug = True
out = False
# out = ""
# err = ""
# status = False
if force_exit:
    cmd = f"{cmd};exit"
for rec in self:
    rec_force_docker = force_docker
    if to_instance:
        rec.check_devops_workspace()
        if not folder:
            folder = rec.path_working_erplibre
        if rec.erplibre_mode.mode_exec in [
            self.env.ref("erplibre_devops.erplibre_mode_exec_docker")
        ]:
            rec_force_docker = True

    if rec.is_debug_log and cmd:
        if first_log_debug:
            _logger.info(cmd)
            first_log_debug = False

    force_folder = folder if folder else rec.folder
    devops_exec_value = {
        "devops_workspace": rec.id,
        "cmd": cmd,
        "folder": force_folder,
    }
    devops_exec_bundle = self.env.context.get("devops_exec_bundle")
    devops_exec_bundle_id = None
    if devops_exec_bundle:
        devops_exec_bundle_id = (
            self.env["devops.exec.bundle"]
            .browse(devops_exec_bundle)
            .exists()
        )
        devops_exec_value["devops_exec_bundle_id"] = devops_exec_bundle
    id_devops_cg_new_project = self.env.context.get(
        "devops_cg_new_project"
    )
    if id_devops_cg_new_project:
        devops_exec_value["new_project_id"] = id_devops_cg_new_project

    # ### Find who call us ###
    actual_file = str(pathlib.Path(__file__).resolve())
    is_found = False
    str_tb = None
    # When found it, the result is next one, extract filename and line
    for str_tb in traceback.format_stack()[::-1]:
        if is_found:
            break
        if actual_file in str_tb:
            is_found = True
    if is_found:
        # index 0, filename like «file "/home..."»
        # index 1, line number like «line 1234»
        # index 2, keyword
        lst_tb = [a.strip() for a in str_tb.split(",")]
        # Remove absolute path
        filename = lst_tb[0][6:-1][len(rec.folder) + 1 :]
        line_number = int(lst_tb[1][5:])
        keyword = lst_tb[2]
        bp_value = {
            "name": "breakpoint_exec",
            "description": (
                "Breakpoint generate when create an execution."
            ),
            "filename": filename,
            "no_line": line_number,
            "keyword": keyword,
            "ignore_test": True,
            "generated_by_execution": True,
        }
        bp_id = self.env["devops.ide.breakpoint"].create(bp_value)
        devops_exec_value["ide_breakpoint"] = bp_id.id
        devops_exec_value["exec_filename"] = filename
        devops_exec_value["exec_line_number"] = line_number
        devops_exec_value["exec_keyword"] = keyword
    # ### END Find who call us ###

    devops_exec = self.env["devops.exec"].create(devops_exec_value)
    lst_result.append(devops_exec)
    status = None
    if force_open_terminal:
        rec.system_id.execute_terminal_gui(
            folder=force_folder,
            cmd=cmd,
            docker=rec_force_docker,
        )
    elif rec_force_docker:
        out, status = rec.system_id.exec_docker(
            cmd, force_folder, return_status=True
        )
    else:
        if run_into_workspace and not folder:
            folder = force_folder
        out, status = rec.system_id.execute_with_result(
            cmd,
            folder,
            add_stdin_log=add_stdin_log,
            add_stderr_log=add_stderr_log,
            engine=engine,
            delimiter_bash=delimiter_bash,
            return_status=True,
        )

    devops_exec.exec_stop_date = fields.Datetime.now()
    if out is not False and out.strip():
        devops_exec.log_stdout = out.strip()
        rec.find_exec_error_from_log(
            out, devops_exec, devops_exec_bundle_id
        )
        devops_exec.compute_error()
    if status:
        devops_exec.exec_status = int(status)
        if error_on_status:
            parent_root_id = devops_exec_bundle_id.get_parent_root()
            rec.create_exec_error(
                "Detect status > 0 on execution.",
                devops_exec.log_stdout,
                rec,
                devops_exec_bundle_id,
                devops_exec,
                parent_root_id,
                "internal",
            )

if len(self) == 1:
    return lst_result[0]
return self.env["devops.exec"].browse([a.id for a in lst_result])""",
                    "name": "execute",
                    "decorator": "@api.multi",
                    "param": (
                        "self, cmd='', folder='', force_open_terminal=False,"
                        " force_exit=False, force_docker=False,"
                        " add_stdin_log=False, add_stderr_log=True,"
                        " run_into_workspace=False, to_instance=False,"
                        " engine='bash', delimiter_bash=''',"
                        " error_on_status=True"
                    ),
                    "sequence": 37,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """regex = r"^\.PHONY:.*|([\w]+):\s"
targets = re.findall(regex, content, re.MULTILINE)
targets = list(set([target for target in targets if target]))
return targets""",
                    "name": "get_lst_target_makefile",
                    "decorator": "@api.model",
                    "param": "self, content",
                    "sequence": 38,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": '''cmd = f'[ -e "{path}" ] && echo "true" || echo "false"'
result = self.execute(cmd=cmd, to_instance=to_instance)
return result.log_all.strip() == "true"''',
                    "name": "os_path_exists",
                    "decorator": "@api.model",
                    "param": "self, path, to_instance=False",
                    "sequence": 39,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """cmd = f'cat "{path}"'
result = self.execute(cmd=cmd, to_instance=to_instance)
return result.log_all""",
                    "name": "os_read_file",
                    "decorator": "@api.model",
                    "param": "self, path, to_instance=False",
                    "sequence": 40,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """cmd = f'echo "{content}" > "{path}"'
result = self.execute(cmd=cmd, to_instance=to_instance)
return result.log_all""",
                    "name": "os_write_file",
                    "decorator": "@api.model",
                    "param": "self, path, content, to_instance=False",
                    "sequence": 41,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """# nb_error_estimate = log.count("During handling of the above exception, another exception occurred:")
if not devops_exec_bundle_id:
    raise exceptions.Warning(
        f"Executable command {devops_exec.cmd} missing exec.bundle."
    )

index_first_traceback = log.find("Traceback (most recent call last):")
if index_first_traceback == -1:
    # cannot find exception
    return
index_last_traceback = index_first_traceback

lst_exception = (
    "odoo.exceptions.ValidationError:",
    "Exception:",
    "NameError:",
    "TypeError:",
    "AttributeError:",
    "ValueError:",
    "AssertionError:",
    "SyntaxError:",
    "KeyError:",
    "psycopg2.errors.NotNullViolation:",
    "psycopg2.errors.UndefinedTable:",
    "UnboundLocalError:",
    "FileNotFoundError:",
    "RuntimeWarning:",
    "raise ValidationError",
    "odoo.exceptions.CacheMiss:",
    "json.decoder.JSONDecodeError:",
    "RuntimeError:",
)
# TODO move lst_exception into model devops.exec.exception
for exception in lst_exception:
    index_error = log.rfind(exception)
    if index_last_traceback < index_error:
        index_last_traceback = index_error
    # index_endline_error = log.find("\\n", index_error)

if index_last_traceback <= index_first_traceback:
    raise Exception(
        "Cannot find exception, but an exception is detected. TODO"
        " debug it."
    )

parent_root_id = devops_exec_bundle_id.get_parent_root()
escaped_tb_all = log[index_first_traceback:index_last_traceback]
lst_escaped_tb = escaped_tb_all.split(
    "During handling of the above exception, another exception"
    " occurred:"
)
for escaped_tb in lst_escaped_tb:
    escaped_tb = escaped_tb.strip()
    found_same_error_ids = self.env["devops.exec.error"].search(
        [
            (
                "parent_root_exec_bundle_id",
                "=",
                parent_root_id.id,
            ),
            (
                "description",
                "=",
                devops_exec_bundle_id.description,
            ),
            ("escaped_tb", "=", escaped_tb),
        ]
    )
    if not found_same_error_ids:
        self.create_exec_error(
            devops_exec_bundle_id.description,
            escaped_tb,
            self,
            devops_exec_bundle_id,
            devops_exec,
            parent_root_id,
            "execution",
        )""",
                    "name": "find_exec_error_from_log",
                    "decorator": "@api.model",
                    "param": "self, log, devops_exec, devops_exec_bundle_id",
                    "sequence": 42,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle("Poetry install") as rec:
        rec.execute(
            cmd='bash -c "source ./.venv/bin/activate;poetry install"'
        )""",
                    "name": "action_poetry_install",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 43,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle(
        "Pre install workspace"
    ) as rec:
        # Directory must exist
        # TODO make test to validate if remove next line, permission root the project /tmp/project/addons root
        addons_path = os.path.join(rec.folder, "addons", "addons")
        rec.execute(f"mkdir -p '{addons_path}'")""",
                    "name": "action_pre_install_workspace",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 44,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """for rec_o in self:
    with rec_o.devops_create_exec_bundle(
        "Network change port default"
    ) as rec:
        rec.port_http = default_port_http
        rec.port_longpolling = default_port_longpolling""",
                    "name": "action_network_change_port_default",
                    "decorator": "@api.multi;@api.model",
                    "param": (
                        "self, ctx=None, default_port_http=8069,"
                        " default_port_longpolling=8072"
                    ),
                    "sequence": 45,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """# Choose 2 sequence
for rec_o in self:
    with rec_o.devops_create_exec_bundle(
        "Network change port random"
    ) as rec:
        # port_1
        while rec.check_port_is_open(
            rec, rec.system_id.iterator_port_generator
        ):
            rec.system_id.iterator_port_generator += 1
        rec.port_http = rec.system_id.iterator_port_generator
        rec.system_id.iterator_port_generator += 1
        # port_2
        while rec.check_port_is_open(
            rec, rec.system_id.iterator_port_generator
        ):
            rec.system_id.iterator_port_generator += 1
        rec.port_longpolling = rec.system_id.iterator_port_generator
        rec.system_id.iterator_port_generator += 1
        if rec.system_id.iterator_port_generator >= max_port:
            rec.system_id.iterator_port_generator = min_port""",
                    "name": "action_network_change_port_random",
                    "decorator": "@api.multi",
                    "param": "self, ctx=None, min_port=10000, max_port=20000",
                    "sequence": 46,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": '''"""
Return False or the PID integer of the open port
"""
# TODO move to devops_network

# lsof need sudo when it's another process, like a docker run by root
# exec_id = rec.execute(f"lsof -FF -i TCP:{port}")
# if not exec_id.log_all:
#     return False
# return int(exec_id.log_all[1 : exec_id.log_all.find("\\n")])

script = f"""import socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
result = sock.connect_ex(("127.0.0.1",{port}))
if result == 0:
   print("Port is open")
else:
   print("Port is not open")
sock.close()
"""
if rec.system_id.debug_command:
    _logger.info(script)
exec_id = rec.execute(
    cmd=script,
    engine="python",
)
return exec_id.log_all.strip() == "Port is open"''',
                    "name": "check_port_is_open",
                    "decorator": "@staticmethod",
                    "param": "rec, port",
                    "sequence": 47,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """partner_ids = [
    (
        6,
        0,
        [
            a.partner_id.id
            for a in self.message_follower_ids
            if a.partner_id
        ],
    )
]
channel_ids = [
    (
        6,
        0,
        [
            a.channel_id.id
            for a in self.message_follower_ids
            if a.channel_id
        ],
    )
]
return partner_ids, channel_ids""",
                    "name": "get_partner_channel",
                    "decorator": "@api.model",
                    "param": "self",
                    "sequence": 48,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """lst_result = []
for rec in self:
    error_value = {
        "description": description,
        "escaped_tb": escaped_tb,
        "devops_workspace": devops_workspace_id.id,
        "devops_exec_bundle_id": devops_exec_bundle_id.id,
        "parent_root_exec_bundle_id": parent_root_id.id,
        "type_error": type_error,
    }
    if devops_exec_id:
        error_value["devops_exec_id"] = devops_exec_id.id
    if parent_root_id.devops_new_project_ids.exists():
        error_value[
            "new_project_id"
        ] = parent_root_id.devops_new_project_ids[0].id
        error_value[
            "stage_new_project_id"
        ] = parent_root_id.devops_new_project_ids[0].stage_id.id
    # this is not true, cannot associate exec_id to this error
    # exec_id = devops_exec_bundle_id.get_last_exec()
    # if exec_id:
    #     error_value["devops_exec_ids"] = exec_id.id
    partner_ids, channel_ids = rec.get_partner_channel()
    if partner_ids:
        error_value["partner_ids"] = partner_ids
    if channel_ids:
        error_value["channel_ids"] = channel_ids
    if rec._context.get("devops_workspace_create_exec_error"):
        exec_error_id = None
        _logger.warning(
            "Detect infinite loop when create exec_error, stop it."
        )
    else:
        exec_error_id = (
            self.env["devops.exec.error"]
            .with_context(devops_workspace_create_exec_error=True)
            .create(error_value)
        )
    lst_result.append(exec_error_id)
if len(self) == 1:
    return lst_result[0]
return self.env["devops.exec.error"].browse([a.id for a in lst_result])""",
                    "name": "create_exec_error",
                    "decorator": "@api.multi",
                    "param": (
                        "self, description, escaped_tb, devops_workspace_id,"
                        " devops_exec_bundle_id, devops_exec_id,"
                        " parent_root_id, type_error"
                    ),
                    "sequence": 49,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
                {
                    "code": """self.ensure_one()
value_bundle = {
    "devops_workspace": self.id,
    "description": description,
}
if not ignore_parent:
    devops_exec_bundle_parent = self.env.context.get(
        "devops_exec_bundle"
    )
    if devops_exec_bundle_parent:
        value_bundle["parent_id"] = devops_exec_bundle_parent
devops_exec_bundle_id = self.env["devops.exec.bundle"].create(
    value_bundle
)
rec = self.with_context(devops_exec_bundle=devops_exec_bundle_id.id)
if ctx:
    rec = rec.with_context(**ctx)
if devops_cg_new_project:
    rec = rec.with_context(devops_cg_new_project=devops_cg_new_project)
try:
    yield rec
except exceptions.Warning as e:
    raise e
except Exception as e:
    _logger.exception(
        f"'{description}' it.exec.bundle id"
        f" '{devops_exec_bundle_id.id}' failed"
    )
    escaped_tb = tools.html_escape(traceback.format_exc()).replace(
        "&quot;", '"'
    )
    parent_root_id = devops_exec_bundle_id.get_parent_root()
    # detect is different to reduce recursion depth exceeded
    found_same_error_ids = self.env["devops.exec.error"].search(
        [
            ("parent_root_exec_bundle_id", "=", parent_root_id.id),
            ("description", "=", description),
            ("escaped_tb", "=", escaped_tb),
        ]
    )
    if not found_same_error_ids:
        devops_exec = devops_exec_bundle_id.devops_exec_ids.exists()
        if devops_exec:
            devops_exec = devops_exec[0]
        rec.create_exec_error(
            description,
            escaped_tb,
            rec,
            devops_exec_bundle_id,
            devops_exec,
            parent_root_id,
            "internal",
        )
    if rec.show_error_chatter:
        partner_ids, channel_ids = rec.get_partner_channel()
        self.message_post(  # pylint: disable=translation-required
            body="<p>%s</p><pre>%s</pre>"
            % (
                _("devops.workspace '%s' failed.") % description,
                escaped_tb,
            ),
            subtype=self.env.ref(
                "erplibre_devops.mail_message_subtype_failure"
            ),
            author_id=self.env.ref("base.user_root").partner_id.id,
            partner_ids=partner_ids,
            channel_ids=channel_ids,
        )
else:
    if succeed_msg:
        _logger.info(
            "devops_workspace succeeded '%s': %s",
            self.name,
            description,
        )

        partner_ids = [
            (
                6,
                0,
                [
                    a.partner_id.id
                    for a in rec.message_follower_ids
                    if a.partner_id
                ],
            )
        ]
        channel_ids = [
            (
                6,
                0,
                [
                    a.channel_id.id
                    for a in rec.message_follower_ids
                    if a.channel_id
                ],
            )
        ]

        self.message_post(
            body=_("devops_workspace succeeded '%s': %s")
            % (self.name, description),
            subtype=self.env.ref(
                "erplibre_devops.mail_message_subtype_success"
            ),
            author_id=self.env.ref("base.user_root").partner_id.id,
            partner_ids=partner_ids,
            channel_ids=channel_ids,
        )
finally:
    # Finish bundle
    devops_exec_bundle_id.exec_stop_date = fields.Datetime.now()""",
                    "name": "devops_create_exec_bundle",
                    "decorator": "@api.multi;@contextmanager",
                    "param": (
                        "self, description, ignore_parent=False,"
                        " succeed_msg=False, devops_cg_new_project=None,"
                        " ctx=None"
                    ),
                    "sequence": 50,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Generate server action
        # action_server view
        act_server_id = env["ir.actions.server"].search(
            [
                ("name", "=", "Check workspace(s)"),
                ("model_id", "=", model_devops_workspace.id),
            ]
        )
        if not act_server_id:
            act_server_id = env["ir.actions.server"].create(
                {
                    "name": "Check workspace(s)",
                    "model_id": model_devops_workspace.id,
                    "binding_model_id": model_devops_workspace.id,
                    "state": "code",
                    "code": "records.action_check()",
                }
            )

            # Add record id name
            env["ir.model.data"].create(
                {
                    "name": "action_server_devops_workspace_check",
                    "model": "ir.actions.server",
                    "module": MODULE_NAME,
                    "res_id": act_server_id.id,
                    "noupdate": True,
                }
            )
        act_server_id = env["ir.actions.server"].search(
            [
                ("name", "=", "Open terminal folder workspace(s)"),
                ("model_id", "=", model_devops_workspace.id),
            ]
        )
        if not act_server_id:
            act_server_id = env["ir.actions.server"].create(
                {
                    "name": "Open terminal folder workspace(s)",
                    "model_id": model_devops_workspace.id,
                    "binding_model_id": model_devops_workspace.id,
                    "state": "code",
                    "code": "records.action_open_terminal()",
                }
            )

            # Add record id name
            env["ir.model.data"].create(
                {
                    "name": (
                        "action_server_devops_workspace_open_terminal_folder"
                    ),
                    "model": "ir.actions.server",
                    "module": MODULE_NAME,
                    "res_id": act_server_id.id,
                    "noupdate": True,
                }
            )
        act_server_id = env["ir.actions.server"].search(
            [
                ("name", "=", "Reboot workspace(s)"),
                ("model_id", "=", model_devops_workspace.id),
            ]
        )
        if not act_server_id:
            act_server_id = env["ir.actions.server"].create(
                {
                    "name": "Reboot workspace(s)",
                    "model_id": model_devops_workspace.id,
                    "binding_model_id": model_devops_workspace.id,
                    "state": "code",
                    "code": "records.action_reboot()",
                }
            )

            # Add record id name
            env["ir.model.data"].create(
                {
                    "name": "action_server_devops_workspace_reboot",
                    "model": "ir.actions.server",
                    "module": MODULE_NAME,
                    "res_id": act_server_id.id,
                    "noupdate": True,
                }
            )
        act_server_id = env["ir.actions.server"].search(
            [
                ("name", "=", "Start workspace(s)"),
                ("model_id", "=", model_devops_workspace.id),
            ]
        )
        if not act_server_id:
            act_server_id = env["ir.actions.server"].create(
                {
                    "name": "Start workspace(s)",
                    "model_id": model_devops_workspace.id,
                    "binding_model_id": model_devops_workspace.id,
                    "state": "code",
                    "code": "records.action_start()",
                }
            )

            # Add record id name
            env["ir.model.data"].create(
                {
                    "name": "action_server_devops_workspace_start",
                    "model": "ir.actions.server",
                    "module": MODULE_NAME,
                    "res_id": act_server_id.id,
                    "noupdate": True,
                }
            )
        act_server_id = env["ir.actions.server"].search(
            [
                ("name", "=", "Stop workspace(s)"),
                ("model_id", "=", model_devops_workspace.id),
            ]
        )
        if not act_server_id:
            act_server_id = env["ir.actions.server"].create(
                {
                    "name": "Stop workspace(s)",
                    "model_id": model_devops_workspace.id,
                    "binding_model_id": model_devops_workspace.id,
                    "state": "code",
                    "code": "records.action_stop()",
                }
            )

            # Add record id name
            env["ir.model.data"].create(
                {
                    "name": "action_server_devops_workspace_stop",
                    "model": "ir.actions.server",
                    "module": MODULE_NAME,
                    "res_id": act_server_id.id,
                    "noupdate": True,
                }
            )

        # Add/Update Devops Workspace Docker
        model_model = "devops.workspace.docker"
        model_name = "devops_workspace_docker"
        dct_model = {
            "description": "ERPLibre DevOps Workspace Docker",
        }
        dct_field = {
            "docker_cmd_extra": {
                "code_generator_form_simple_view_sequence": 16,
                "code_generator_sequence": 8,
                "field_description": "Docker Cmd Extra",
                "help": "Extra command to share to odoo executable",
                "ttype": "char",
            },
            "docker_compose_ps": {
                "code_generator_form_simple_view_sequence": 20,
                "code_generator_sequence": 6,
                "field_description": "Docker Compose Ps",
                "ttype": "text",
            },
            "docker_config_cache": {
                "code_generator_sequence": 11,
                "field_description": "Docker Config Cache",
                "help": (
                    "Fill when docker_config_gen_cg is True, will be erase"
                    " after"
                ),
                "ttype": "char",
            },
            "docker_config_gen_cg": {
                "code_generator_form_simple_view_sequence": 19,
                "code_generator_sequence": 10,
                "field_description": "Docker Config Gen Cg",
                "help": (
                    "Will reduce config path to improve speed to code"
                    " generator"
                ),
                "ttype": "boolean",
            },
            "docker_initiate_succeed": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 13,
                "field_description": "Docker Initiate Succeed",
                "help": "Docker is ready to run",
                "ttype": "boolean",
            },
            "docker_is_behind_proxy": {
                "code_generator_form_simple_view_sequence": 18,
                "code_generator_sequence": 12,
                "field_description": "Docker Is Behind Proxy",
                "help": "Longpolling need a proxy when workers > 1",
                "ttype": "boolean",
            },
            "docker_is_running": {
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_sequence": 4,
                "default": True,
                "field_description": "Docker Is Running",
                "help": "When false, it's because not running docker.",
                "readonly": True,
                "ttype": "boolean",
            },
            "docker_nb_proc": {
                "code_generator_form_simple_view_sequence": 17,
                "code_generator_sequence": 9,
                "field_description": "Docker Nb Proc",
                "help": (
                    "Number of processor/thread, 0 if not behind a proxy, else"
                    " 2 or more."
                ),
                "ttype": "integer",
            },
            "docker_version": {
                "code_generator_form_simple_view_sequence": 15,
                "code_generator_sequence": 7,
                "default": "technolibre/erplibre:1.5.0_c0c6f23",
                "field_description": "Docker Version",
                "ttype": "char",
            },
            "force_create_docker_compose": {
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_sequence": 5,
                "default": True,
                "field_description": "Force Create Docker Compose",
                "help": "Recreate docker-compose from configuration.",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 3,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
        }
        model_devops_workspace_docker = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import json
import logging
import os
import time

import requests

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_workspace_docker.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": '''for rec in self:
    rec.name = f"{rec.workspace_id.name} - {rec.docker_is_running}"''',
                    "name": "_compute_name",
                    "decorator": (
                        '@api.multi;@api.depends("workspace_id",'
                        ' "docker_is_running")'
                    ),
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    rec.docker_is_running = False

    file_docker_compose = os.path.join(
        rec.workspace_id.folder, "docker-compose.yml"
    )
    if rec.docker_cmd_extra:
        docker_cmd_extra = f" {rec.docker_cmd_extra}"
    else:
        docker_cmd_extra = ""
    if rec.docker_is_behind_proxy:
        docker_behind_proxy = f" --proxy-mode"
        workers = f"--workers {max(2, rec.docker_nb_proc)}"
    else:
        docker_behind_proxy = ""
        workers = f"--workers {rec.docker_nb_proc}"
    docker_compose_content = f\"""version: "3.3"
services:
  ERPLibre:
    image: {rec.docker_version}
    ports:
      - {rec.workspace_id.port_http}:8069
      - {rec.workspace_id.port_longpolling}:8072
    environment:
      HOST: db
      PASSWORD: mysecretpassword
      USER: odoo
      POSTGRES_DB: postgres
      STOP_BEFORE_INIT: "False"
      DB_NAME: ""
      UPDATE_ALL_DB: "False"
    depends_on:
      - db
    # not behind a proxy
    #command: odoo --workers 0
    # behind a proxy
    #command: odoo --workers 2 --proxy-mode
    command: odoo {workers}{docker_behind_proxy}{docker_cmd_extra}
    volumes:
      # See the volume section at the end of the file
      - erplibre_data_dir:/home/odoo/.local/share/Odoo
      - erplibre_conf:/etc/odoo
{'      - ' + '''
- '''.join([f'./{path}:{rec.workspace_id.path_working_erplibre}/{path}' for path in rec.workspace_id.path_code_generator_to_generate.split(";")]) if rec.workspace_id.path_code_generator_to_generate else ''}
    restart: always

  db:
    image: postgis/postgis:12-3.1-alpine
    environment:
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_USER: odoo
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - erplibre-db-data:/var/lib/postgresql/data/pgdata
    restart: always

# We configure volume without specific destination to let docker manage it. To configure it through docker use (read related documentation before continuing) :
# - docker volume --help
# - docker-compose down --help
volumes:
  erplibre_data_dir:
  erplibre_conf:
  erplibre-db-data:\"""
    if rec.force_create_docker_compose or not os.path.exists(
        file_docker_compose
    ):
        rec.workspace_id.execute(
            cmd=(
                f"echo '{docker_compose_content}' >"
                f" {file_docker_compose}"
            ),
            engine="sh",
        )

    exec_id = rec.workspace_id.execute(
        cmd=f"cd {rec.workspace_id.folder};cat docker-compose.yml"
    )
    rec.docker_compose_ps = exec_id.log_all
    exec_id = rec.workspace_id.execute(
        cmd=f"cd {rec.workspace_id.folder};docker compose up -d"
    )
    result = exec_id.log_all

    if (
        "Cannot connect to the Docker daemon at"
        " unix:///var/run/docker.sock. Is the docker daemon"
        " running?"
        in result
    ):
        rec.docker_initiate_succeed = False

    rec.log_workspace = f"\\n{result}"
    exec_id = rec.workspace_id.execute(
        cmd=f"cd {rec.workspace_id.folder};docker compose ps"
    )
    result = exec_id.log_all
    rec.log_workspace += f"\\n{result}"
    rec.update_docker_compose_ps()

    exec_id = rec.workspace_id.execute(
        cmd="cat /etc/odoo/odoo.conf;", force_docker=True
    )
    result = exec_id.log_all
    has_change = False
    if "db_host" not in result:
        # TODO remove this information from executable of docker
        result += (
            "db_host = db\\ndb_port = 5432\\ndb_user ="
            " odoo\\ndb_password = mysecretpassword\\n"
        )
    if "admin_passwd" not in result:
        result += "admin_passwd = admin\\n"
    # TODO remove repo OCA_connector-jira
    str_to_replace = f",{rec.workspace_id.path_working_erplibre}/addons/OCA_connector-jira"
    if str_to_replace in result:
        result = result.replace(str_to_replace, "")
        has_change = True

    if (
        rec.docker_config_gen_cg
        or not rec.docker_config_gen_cg
        and rec.docker_config_cache
    ):
        addons_path = None
        # TODO this is not good, need a script from manifest to rebuild this path
        if rec.docker_config_gen_cg:
            if rec.workspace_id.path_code_generator_to_generate:
                str_path_gen = ",".join(
                    [
                        os.path.join(
                            rec.workspace_id.path_working_erplibre, a
                        )
                        for a in rec.workspace_id.path_code_generator_to_generate.strip().split(
                            ";"
                        )
                    ]
                )
            else:
                str_path_gen = ""
            addons_path = (
                "addons_path ="
                f" {rec.workspace_id.path_working_erplibre}/odoo/addons,"
                f"{str_path_gen},"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_web,"
                f"{rec.workspace_id.path_working_erplibre}/addons/ERPLibre_erplibre_addons,"
                f"{rec.workspace_id.path_working_erplibre}/addons/ERPLibre_erplibre_theme_addons,"
                f"{rec.workspace_id.path_working_erplibre}/addons/MathBenTech_development,"
                f"{rec.workspace_id.path_working_erplibre}/addons/MathBenTech_erplibre-family-management,"
                f"{rec.workspace_id.path_working_erplibre}/addons/MathBenTech_odoo-business-spending-management-quebec-canada,"
                f"{rec.workspace_id.path_working_erplibre}/addons/MathBenTech_scrummer,"
                f"{rec.workspace_id.path_working_erplibre}/addons/Numigi_odoo-partner-addons,"
                f"{rec.workspace_id.path_working_erplibre}/addons/Numigi_odoo-web-addons,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_contract,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_geospatial,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_helpdesk,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_server-auth,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_server-brand,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_server-tools,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_server-ux,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_social,"
                f"{rec.workspace_id.path_working_erplibre}/addons/OCA_website,"
                f"{rec.workspace_id.path_working_erplibre}/addons/TechnoLibre_odoo-code-generator,"
                f"{rec.workspace_id.path_working_erplibre}/addons/TechnoLibre_odoo-code-generator-template,"
                f"{rec.workspace_id.path_working_erplibre}/addons/ajepe_odoo-addons,"
                f"{rec.workspace_id.path_working_erplibre}/addons/muk-it_muk_base,"
                f"{rec.workspace_id.path_working_erplibre}/addons/muk-it_muk_misc,"
                f"{rec.workspace_id.path_working_erplibre}/addons/muk-it_muk_web,"
                f"{rec.workspace_id.path_working_erplibre}/addons/muk-it_muk_website,"
                f"{rec.workspace_id.path_working_erplibre}/addons/odoo_design-themes"
            )
        elif not rec.docker_config_gen_cg and rec.docker_config_cache:
            addons_path = rec.docker_config_cache
            rec.docker_config_cache = ""

        # TODO use configparser instead of string parsing
        if addons_path:
            lst_result = result.split("\\n")
            for i, a_result in enumerate(lst_result):
                if a_result.startswith("addons_path = "):
                    if (
                        rec.docker_config_gen_cg
                        and not rec.docker_config_cache
                    ):
                        rec.docker_config_cache = a_result
                    lst_result[i] = addons_path
                    break
            result = "\\n".join(lst_result)
            has_change = True

    if has_change:
        # TODO rewrite conf file and reformat
        rec.workspace_id.execute(
            cmd=f"echo -e '{result}' > /etc/odoo/odoo.conf",
            force_docker=True,
        )
    # TODO support only one file, and remove /odoo.conf
    rec.workspace_id.execute(
        cmd=(
            f"cd {rec.workspace_id.path_working_erplibre};cp"
            " /etc/odoo/odoo.conf ./config.conf;"
        ),
        force_docker=True,
    )
    rec.action_docker_check_docker_ps()""",
                    "name": "action_start_docker_compose",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    rec.workspace_id.execute(
        cmd=f"cd {rec.workspace_id.folder};docker compose down"
    )
self.update_docker_compose_ps()
self.action_docker_check_docker_ps()""",
                    "name": "action_stop_docker_compose",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 2,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": '''for rec in self:
    exec_id = rec.workspace_id.execute(
        cmd=f"cd {rec.workspace_id.folder};docker compose ps"
    )
    result = exec_id.log_all
    rec.docker_compose_ps = f"\\n{result}"''',
                    "name": "update_docker_compose_ps",
                    "param": "self",
                    "sequence": 3,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": '''for rec in self:
    exec_id = rec.workspace_id.execute(
        cmd=f"cd {rec.workspace_id.folder};docker compose ps"
    )
    result = exec_id.log_all
    rec.docker_compose_ps = f"\\n{result}"''',
                    "name": "action_docker_status",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 4,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    exec_id = rec.workspace_id.execute(
        cmd=(
            f"cd {rec.workspace_id.folder};docker compose ps --format"
            " json"
        )
    )
    result = exec_id.log_all
    # rec.docker_compose_ps = f"\\n{result}"
    rec.docker_is_running = bool(result)
    rec.workspace_id.is_running = rec.docker_is_running""",
                    "name": "action_docker_check_docker_ps",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 5,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    rec.workspace_id.execute(
        cmd="docker compose logs -f",
        force_open_terminal=True,
    )""",
                    "name": "action_docker_logs",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 6,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    workspace = os.path.basename(rec.workspace_id.folder)
    docker_name = f"{workspace}-ERPLibre-1"
    rec.workspace_id.execute(
        cmd=f"docker exec -u root -ti {docker_name} /bin/bash",
        force_open_terminal=True,
    )""",
                    "name": "action_open_terminal_docker",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 7,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    rec.workspace_id.execute(
        cmd=f"apt update;apt install -y tig vim htop tree watch",
        force_docker=True,
    )""",
                    "name": "action_docker_install_dev_soft",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 8,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    rec.workspace_id.execute(
        cmd=(
            "sudo groupadd docker;sudo usermod -aG docker"
            f" {rec.workspace_id.system_id.ssh_user}"
        ),
        force_open_terminal=True,
    )
    rec.workspace_id.execute(
        cmd="sudo systemctl start docker.service",
        force_open_terminal=True,
    )
    # TODO check if all good
self.docker_initiate_succeed = True""",
                    "name": "action_os_user_permission_docker",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 9,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """for rec in self:
    rec.workspace_id.execute(
        cmd=f"dive {rec.docker_version}", force_open_terminal=True
    )""",
                    "name": "action_analyse_docker_image",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 10,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
                {
                    "code": """self.action_docker_status()
self.action_docker_check_docker_ps()""",
                    "name": "action_check",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 11,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_docker.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Devops Workspace Terminal
        model_model = "devops.workspace.terminal"
        model_name = "devops_workspace_terminal"
        dct_model = {
            "description": "ERPLibre DevOps Workspace Terminal",
        }
        dct_field = {
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
            "terminal_is_running": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "default": True,
                "field_description": "Terminal Is Running",
                "help": "When false, it's because not running terminal.",
                "readonly": True,
                "ttype": "boolean",
            },
            "workspace_id": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "field_description": "Workspace",
                "relation": "devops.workspace",
                "ttype": "many2one",
            },
        }
        model_devops_workspace_terminal = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code header
            value = {
                "code": """# Copyright 2023 TechnoLibre inc. - Mathieu Benoit
# License AGPL-3.0 or later (https://www.gnu.org/licenses/agpl).

import json
import logging
import os
import time

import requests

from odoo import _, api, exceptions, fields, models, tools

_logger = logging.getLogger(__name__)""",
                "name": "header",
                "m2o_module": code_generator_id.id,
                "m2o_model": model_devops_workspace_terminal.id,
            }
            env["code.generator.model.code.import"].create(value)

            # Generate code model
            lst_value = [
                {
                    "code": '''for rec in self:
    rec.name = f"{rec.workspace_id.name} - {rec.terminal_is_running}"''',
                    "name": "_compute_name",
                    "decorator": (
                        '@api.multi;@api.depends("workspace_id",'
                        ' "terminal_is_running")'
                    ),
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_terminal.id,
                },
                {
                    "code": """pass""",
                    "name": "action_check",
                    "decorator": "@api.multi",
                    "param": "self",
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_devops_workspace_terminal.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Erplibre Config Path Home
        model_model = "erplibre.config.path.home"
        model_name = "erplibre_config_path_home"
        dct_model = {
            "description": "erplibre_config_path_home",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
        }
        model_erplibre_config_path_home = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code model
            lst_value = [
                {
                    "code": """path_home_id = self.search([("name", "=", path_home)], limit=1)
if not path_home_id:
    path_home_id = self.create([{"name": path_home}])
return path_home_id""",
                    "name": "get_path_home_id",
                    "param": "self, path_home",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_erplibre_config_path_home.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Erplibre Mode
        model_model = "erplibre.mode"
        model_name = "erplibre_mode"
        dct_model = {
            "description": "erplibre_mode",
        }
        dct_field = {
            "mode_env": {
                "code_generator_sequence": 3,
                "field_description": "Mode Env",
                "relation": "erplibre.mode.env",
                "required": True,
                "ttype": "many2one",
            },
            "mode_exec": {
                "code_generator_sequence": 4,
                "field_description": "Mode Exec",
                "relation": "erplibre.mode.exec",
                "required": True,
                "ttype": "many2one",
            },
            "mode_source": {
                "code_generator_sequence": 5,
                "field_description": "Mode Source",
                "relation": "erplibre.mode.source",
                "required": True,
                "ttype": "many2one",
            },
            "mode_version_base": {
                "code_generator_sequence": 6,
                "field_description": "Mode Version Base",
                "help": "Support base version communautaire",
                "relation": "erplibre.mode.version.base",
                "required": True,
                "ttype": "many2one",
            },
            "mode_version_erplibre": {
                "code_generator_sequence": 7,
                "field_description": "Mode Version Erplibre",
                "help": (
                    "Dev to improve, test to test, prod ready for production,"
                    " stage to use a dev and replace a prod"
                ),
                "relation": "erplibre.mode.version.erplibre",
                "required": True,
                "ttype": "many2one",
            },
            "name": {
                "code_generator_compute": "_compute_name",
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "store": True,
                "ttype": "char",
            },
        }
        model_erplibre_mode = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Generate code
        if True:
            # Generate code model
            lst_value = [
                {
                    "code": """for rec in self:
    rec.name = (
        "{"
        f"{rec.mode_env.name} "
        f"{rec.mode_exec.name} "
        f"{rec.mode_source.name} "
        f"{rec.mode_version_base.name} "
        f"{rec.mode_version_erplibre.name}"
        "}"
    )""",
                    "name": "_compute_name",
                    "decorator": (
                        '@api.multi;@api.depends("mode_env", "mode_exec",'
                        ' "mode_source", "mode_version_base",'
                        ' "mode_version_erplibre")'
                    ),
                    "param": "self",
                    "sequence": 0,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_erplibre_mode.id,
                },
                {
                    "code": """mode_version_base_id = self.env["erplibre.mode.version.base"].search(
    [("value", "=", mode_version_base)]
)
if not mode_version_base_id:
    mode_version_base_id = self.env[
        "erplibre.mode.version.base"
    ].create({"value": mode_version_base, "name": mode_version_base})
mode_version_erplibre_id = self.env[
    "erplibre.mode.version.erplibre"
].search([("value", "=", mode_version_erplibre)])
if not mode_version_erplibre_id:
    mode_version_erplibre_id = self.env[
        "erplibre.mode.version.erplibre"
    ].create(
        {"value": mode_version_erplibre, "name": mode_version_erplibre}
    )
mode_id = self.env["erplibre.mode"].search(
    [
        ("mode_env", "=", mode_env_id.id),
        ("mode_exec", "=", mode_exec_id.id),
        ("mode_source", "=", mode_source_id.id),
        ("mode_version_base", "=", mode_version_base_id.id),
        ("mode_version_erplibre", "=", mode_version_erplibre_id.id),
    ],
    limit=1,
)
if not mode_id:
    mode_id = self.create(
        [
            {
                "mode_env": mode_env_id.id,
                "mode_exec": mode_exec_id.id,
                "mode_source": mode_source_id.id,
                "mode_version_base": mode_version_base_id.id,
                "mode_version_erplibre": mode_version_erplibre_id.id,
            }
        ]
    )
return mode_id""",
                    "name": "get_mode",
                    "param": (
                        "self, mode_env_id, mode_exec_id, mode_source_id,"
                        " mode_version_base, mode_version_erplibre"
                    ),
                    "sequence": 1,
                    "m2o_module": code_generator_id.id,
                    "m2o_model": model_erplibre_mode.id,
                },
            ]
            env["code.generator.model.code"].create(lst_value)

        # Add/Update Erplibre Mode Env
        model_model = "erplibre.mode.env"
        model_name = "erplibre_mode_env"
        dct_model = {
            "description": "erplibre_mode_env",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "value": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Value",
                "ttype": "char",
            },
        }
        model_erplibre_mode_env = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Erplibre Mode Exec
        model_model = "erplibre.mode.exec"
        model_name = "erplibre_mode_exec"
        dct_model = {
            "description": "erplibre_mode_exec",
        }
        dct_field = {
            "active": {
                "code_generator_sequence": 3,
                "default": True,
                "field_description": "Active",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "value": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Value",
                "ttype": "char",
            },
        }
        model_erplibre_mode_exec = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Erplibre Mode Source
        model_model = "erplibre.mode.source"
        model_name = "erplibre_mode_source"
        dct_model = {
            "description": "erplibre_mode_source",
        }
        dct_field = {
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "value": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Value",
                "ttype": "char",
            },
        }
        model_erplibre_mode_source = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Erplibre Mode Version Base
        model_model = "erplibre.mode.version.base"
        model_name = "erplibre_mode_version_base"
        dct_model = {
            "description": "erplibre_mode_version_base",
        }
        dct_field = {
            "is_tag": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Is Tag",
                "help": "Is it a tag from Git?",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "value": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Value",
                "ttype": "char",
            },
        }
        model_erplibre_mode_version_base = code_generator_id.add_update_model(
            model_model,
            model_name,
            dct_field=dct_field,
            dct_model=dct_model,
        )

        # Add/Update Erplibre Mode Version Erplibre
        model_model = "erplibre.mode.version.erplibre"
        model_name = "erplibre_mode_version_erplibre"
        dct_model = {
            "description": "erplibre_mode_version_erplibre",
        }
        dct_field = {
            "is_tag": {
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_sequence": 4,
                "code_generator_tree_view_sequence": 12,
                "field_description": "Is Tag",
                "help": "Is it a tag from Git?",
                "ttype": "boolean",
            },
            "name": {
                "code_generator_form_simple_view_sequence": 10,
                "code_generator_sequence": 2,
                "code_generator_tree_view_sequence": 10,
                "field_description": "Name",
                "ttype": "char",
            },
            "value": {
                "code_generator_form_simple_view_sequence": 11,
                "code_generator_sequence": 3,
                "code_generator_tree_view_sequence": 11,
                "field_description": "Value",
                "ttype": "char",
            },
        }
        model_erplibre_mode_version_erplibre = (
            code_generator_id.add_update_model(
                model_model,
                model_name,
                dct_field=dct_field,
                dct_model=dct_model,
            )
        )

        # Added one2many field, many2one need to be create before add one2many
        model_model = "devops.cg"
        dct_field = {
            "module_ids": {
                "field_description": "Module",
                "ttype": "one2many",
                "code_generator_sequence": 5,
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_tree_view_sequence": 11,
                "force_widget": "many2many_tags",
                "relation": "devops.cg.module",
                "relation_field": "code_generator",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.cg.model"
        dct_field = {
            "field_ids": {
                "field_description": "Field",
                "ttype": "one2many",
                "code_generator_sequence": 4,
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_tree_view_sequence": 13,
                "force_widget": "many2many_tags",
                "relation": "devops.cg.field",
                "relation_field": "model_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.cg.module"
        dct_field = {
            "model_ids": {
                "field_description": "Model",
                "ttype": "one2many",
                "code_generator_sequence": 4,
                "code_generator_form_simple_view_sequence": 12,
                "code_generator_tree_view_sequence": 12,
                "force_widget": "many2many_tags",
                "relation": "devops.cg.model",
                "relation_field": "module_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.cg.new_project"
        dct_field = {
            "devops_exec_ids": {
                "field_description": "Executions",
                "ttype": "one2many",
                "code_generator_sequence": 104,
                "code_generator_form_simple_view_sequence": 115,
                "relation": "devops.exec",
                "relation_field": "new_project_id",
            },
            "ide_pycharm_configuration_ids": {
                "field_description": "Pycharm configurations",
                "ttype": "one2many",
                "code_generator_sequence": 103,
                "code_generator_form_simple_view_sequence": 16,
                "force_widget": "many2many_tags",
                "relation": "devops.ide.pycharm.configuration",
                "relation_field": "devops_cg_new_project_id",
            },
            "log_error_ids": {
                "field_description": "Log errors",
                "ttype": "one2many",
                "code_generator_sequence": 105,
                "code_generator_form_simple_view_sequence": 116,
                "readonly": True,
                "relation": "devops.log.error",
                "relation_field": "new_project_id",
            },
            "log_warning_ids": {
                "field_description": "Log warnings",
                "ttype": "one2many",
                "code_generator_sequence": 106,
                "code_generator_form_simple_view_sequence": 117,
                "readonly": True,
                "relation": "devops.log.warning",
                "relation_field": "new_project_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.exec"
        dct_field = {
            "devops_exec_error_ids": {
                "field_description": "Executions errors",
                "ttype": "one2many",
                "code_generator_sequence": 19,
                "code_generator_form_simple_view_sequence": 24,
                "relation": "devops.exec.error",
                "relation_field": "devops_exec_id",
            },
            "log_error_ids": {
                "field_description": "Log errors",
                "ttype": "one2many",
                "code_generator_sequence": 20,
                "code_generator_form_simple_view_sequence": 33,
                "relation": "devops.log.error",
                "relation_field": "exec_id",
            },
            "log_warning_ids": {
                "field_description": "Log warnings",
                "ttype": "one2many",
                "code_generator_sequence": 21,
                "code_generator_form_simple_view_sequence": 34,
                "relation": "devops.log.warning",
                "relation_field": "exec_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.exec.bundle"
        dct_field = {
            "child_ids": {
                "field_description": "Child bundle",
                "ttype": "one2many",
                "code_generator_sequence": 5,
                "code_generator_form_simple_view_sequence": 16,
                "relation": "devops.exec.bundle",
                "relation_field": "parent_id",
            },
            "devops_exec_error_ids": {
                "field_description": "Executions errors",
                "ttype": "one2many",
                "code_generator_sequence": 14,
                "code_generator_form_simple_view_sequence": 26,
                "code_generator_tree_view_sequence": 16,
                "force_widget": "many2many_tags",
                "readonly": True,
                "relation": "devops.exec.error",
                "relation_field": "devops_exec_bundle_id",
            },
            "devops_exec_ids": {
                "field_description": "Executions",
                "ttype": "one2many",
                "code_generator_sequence": 13,
                "code_generator_form_simple_view_sequence": 13,
                "code_generator_tree_view_sequence": 15,
                "force_widget": "many2many_tags",
                "readonly": True,
                "relation": "devops.exec",
                "relation_field": "devops_exec_bundle_id",
            },
            "devops_exec_parent_error_ids": {
                "field_description": "Executions parent errors",
                "ttype": "one2many",
                "code_generator_sequence": 15,
                "code_generator_form_simple_view_sequence": 25,
                "code_generator_tree_view_sequence": 17,
                "force_widget": "many2many_tags",
                "readonly": True,
                "relation": "devops.exec.error",
                "relation_field": "parent_root_exec_bundle_id",
            },
            "devops_new_project_ids": {
                "field_description": "New projects",
                "ttype": "one2many",
                "code_generator_sequence": 16,
                "code_generator_form_simple_view_sequence": 14,
                "code_generator_tree_view_sequence": 18,
                "force_widget": "many2many_tags",
                "readonly": True,
                "relation": "devops.cg.new_project",
                "relation_field": "devops_exec_bundle_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.system"
        dct_field = {
            "devops_workspace_ids": {
                "field_description": "DevOps Workspace",
                "ttype": "one2many",
                "code_generator_sequence": 4,
                "code_generator_form_simple_view_sequence": 29,
                "relation": "devops.workspace",
                "relation_field": "system_id",
            },
            "sub_system_ids": {
                "field_description": "Sub system",
                "ttype": "one2many",
                "code_generator_sequence": 10,
                "code_generator_form_simple_view_sequence": 17,
                "relation": "devops.system",
                "relation_field": "parent_system_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.test.case.exec"
        dct_field = {
            "result_ids": {
                "field_description": "Results",
                "ttype": "one2many",
                "code_generator_sequence": 10,
                "code_generator_form_simple_view_sequence": 16,
                "readonly": True,
                "relation": "devops.test.result",
                "relation_field": "test_case_exec_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.test.plan"
        dct_field = {
            "test_case_ids": {
                "field_description": "Test cases",
                "ttype": "one2many",
                "code_generator_sequence": 3,
                "code_generator_form_simple_view_sequence": 11,
                "relation": "devops.test.case",
                "relation_field": "test_plan_id",
            },
            "test_plan_exec_ids": {
                "field_description": "Test plan executions",
                "ttype": "one2many",
                "code_generator_sequence": 4,
                "code_generator_form_simple_view_sequence": 12,
                "relation": "devops.test.plan.exec",
                "relation_field": "test_plan_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.test.plan.exec"
        dct_field = {
            "exec_ids": {
                "field_description": "Execution",
                "ttype": "one2many",
                "code_generator_sequence": 14,
                "code_generator_form_simple_view_sequence": 30,
                "readonly": True,
                "relation": "devops.test.case.exec",
                "relation_field": "test_plan_exec_id",
            },
            "result_ids": {
                "field_description": "Results",
                "ttype": "one2many",
                "code_generator_sequence": 17,
                "code_generator_form_simple_view_sequence": 31,
                "readonly": True,
                "relation": "devops.test.result",
                "relation_field": "test_plan_exec_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        model_model = "devops.workspace"
        dct_field = {
            "devops_code_todo_ids": {
                "field_description": "Code TODO",
                "ttype": "one2many",
                "code_generator_sequence": 9,
                "relation": "devops.code.todo",
                "relation_field": "workspace_id",
            },
            "devops_exec_bundle_ids": {
                "field_description": "Executions bundle",
                "ttype": "one2many",
                "code_generator_sequence": 19,
                "relation": "devops.exec.bundle",
                "relation_field": "devops_workspace",
            },
            "devops_exec_bundle_root_ids": {
                "field_description": "Executions bundle root",
                "ttype": "one2many",
                "force_domain": [("parent_id", "=", False)],
                "code_generator_sequence": 20,
                "code_generator_form_simple_view_sequence": 49,
                "relation": "devops.exec.bundle",
                "relation_field": "devops_workspace",
            },
            "devops_exec_error_ids": {
                "field_description": "Executions error",
                "ttype": "one2many",
                "code_generator_sequence": 21,
                "code_generator_form_simple_view_sequence": 50,
                "relation": "devops.exec.error",
                "relation_field": "devops_workspace",
            },
            "devops_exec_ids": {
                "field_description": "Executions",
                "ttype": "one2many",
                "code_generator_sequence": 7,
                "code_generator_form_simple_view_sequence": 48,
                "relation": "devops.exec",
                "relation_field": "devops_workspace",
            },
            "devops_test_plan_exec_ids": {
                "field_description": "Test plan exec",
                "ttype": "one2many",
                "code_generator_sequence": 11,
                "relation": "devops.test.plan.exec",
                "relation_field": "workspace_id",
            },
            "devops_test_result_ids": {
                "field_description": "Test result",
                "ttype": "one2many",
                "code_generator_sequence": 13,
                "relation": "devops.test.result",
                "relation_field": "workspace_id",
            },
            "log_makefile_target_ids": {
                "field_description": "Makefile Targets",
                "ttype": "one2many",
                "code_generator_sequence": 25,
                "code_generator_form_simple_view_sequence": 46,
                "relation": "devops.log.makefile.target",
                "relation_field": "devops_workspace_id",
            },
            "new_project_ids": {
                "field_description": (
                    "All new project associate with this workspace"
                ),
                "ttype": "one2many",
                "code_generator_sequence": 55,
                "relation": "devops.cg.new_project",
                "relation_field": "devops_workspace",
            },
            "plan_cg_ids": {
                "field_description": "Plan CG",
                "ttype": "one2many",
                "help": "All plan code generator associate to this workspace",
                "code_generator_sequence": 53,
                "code_generator_form_simple_view_sequence": 45,
                "relation": "devops.plan.cg",
                "relation_field": "workspace_id",
            },
        }
        code_generator_id.add_update_model_one2many(model_model, dct_field)

        # Generate view
        lst_view_id = []
        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_ids",
                    "action_name": "module_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "default_workspace_master",
                    "action_name": "default_workspace_master",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "force_clean_before_generate",
                    "action_name": "force_clean_before_generate",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_cg_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_cg_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_cg_graph",
                    "view_attr_string": "DevOps code generator",
                    "m2o_model": model_devops_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_ids",
                    "action_name": "module_ids",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_ids",
                    "action_name": "module_ids",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_cg_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_cg_pivot",
                    "view_attr_string": "DevOps code generator",
                    "m2o_model": model_devops_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "module_ids",
                    "domain": "[('module_ids','!=',False)]",
                    "label": "No module",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_cg_search",
                    "view_attr_string": "DevOps code generator",
                    "m2o_model": model_devops_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_ids",
                    "widget": "many2many_tags",
                    "action_name": "module_ids",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "force_clean_before_generate",
                    "action_name": "force_clean_before_generate",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "widget": "many2many_tags",
                    "action_name": "devops_workspace_ids",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_cg_tree",
                    "m2o_model": model_devops_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "type",
                    "action_name": "type",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "relation",
                    "attrs": (
                        "{'invisible': [('type', 'not in', ['many2one',"
                        " 'many2many', 'one2many'])]}"
                    ),
                    "action_name": "relation",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "relation_manual",
                    "attrs": (
                        "{'invisible': ['|', ('type', 'not in', ['many2one',"
                        " 'many2many', 'one2many']), ('relation', '!=',"
                        " False)]}"
                    ),
                    "action_name": "relation_manual",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_relation",
                    "attrs": (
                        "{'invisible': [('type', 'not in', ['one2many'])]}"
                    ),
                    "action_name": "field_relation",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_relation_manual",
                    "attrs": (
                        "{'invisible': ['|', ('type', 'not in', ['one2many']),"
                        " ('field_relation', '!=', False)]}"
                    ),
                    "action_name": "field_relation_manual",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "help",
                    "action_name": "help",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_id",
                    "action_name": "model_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_cg_field_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_cg_field.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_cg_field_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "help",
                    "action_name": "help",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "model_id",
                    "action_name": "model_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "type",
                    "action_name": "type",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_cg_field_graph",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_cg_field.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_field_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "help",
                    "action_name": "help",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_id",
                    "action_name": "model_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "type",
                    "action_name": "type",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "help",
                    "action_name": "help",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_id",
                    "action_name": "model_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "type",
                    "action_name": "type",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_cg_field_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_cg_field.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_field_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "help",
                    "action_name": "help",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "model_id",
                    "action_name": "model_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "type",
                    "action_name": "type",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_cg_field_pivot",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_cg_field.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_field_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "help",
                    "domain": "[('help','!=',False)]",
                    "label": "Help",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "model_id",
                    "domain": "[('model_id','!=',False)]",
                    "label": "Model",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "type",
                    "domain": "[('type','!=',False)]",
                    "label": "Type",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_cg_field_search",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_cg_field.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_field_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_error",
                    "invisible": "True",
                    "action_name": "has_error",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_id",
                    "action_name": "model_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "type",
                    "action_name": "type",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "relation",
                    "action_name": "relation",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "relation_manual",
                    "action_name": "relation_manual",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_relation",
                    "action_name": "field_relation",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_relation_manual",
                    "action_name": "field_relation_manual",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "help",
                    "action_name": "help",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "widget": "many2many_tags",
                    "action_name": "devops_workspace_ids",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_cg_field_tree",
                    "view_attr_decoration_danger": "has_error",
                    "m2o_model": model_devops_cg_field.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_field_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_ids",
                    "action_name": "field_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_cg_model_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_cg_model.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_cg_model_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_cg_model_graph",
                    "view_attr_string": "DevOps code generator module model",
                    "m2o_model": model_devops_cg_model.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_model_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_ids",
                    "action_name": "field_ids",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_ids",
                    "action_name": "field_ids",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_cg_model_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_cg_model.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_model_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_cg_model_pivot",
                    "view_attr_string": "DevOps code generator module model",
                    "m2o_model": model_devops_cg_model.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_model_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "description",
                    "domain": "[('description','!=',False)]",
                    "label": "Description",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "module_id",
                    "domain": "[('module_id','!=',False)]",
                    "label": "Module",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "field_ids",
                    "domain": "[('field_ids','!=',False)]",
                    "label": "No field",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_cg_model_search",
                    "view_attr_string": "DevOps code generator module model",
                    "m2o_model": model_devops_cg_model.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_model_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "field_ids",
                    "widget": "many2many_tags",
                    "action_name": "field_ids",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "widget": "many2many_tags",
                    "action_name": "devops_workspace_ids",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_cg_model_tree",
                    "m2o_model": model_devops_cg_model.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_model_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator",
                    "action_name": "code_generator",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_ids",
                    "action_name": "model_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_cg_module_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_cg_module.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_cg_module_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "code_generator",
                    "action_name": "code_generator",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_cg_module_graph",
                    "view_attr_string": "DevOps code generator module",
                    "m2o_model": model_devops_cg_module.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_module_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator",
                    "action_name": "code_generator",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_ids",
                    "action_name": "model_ids",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator",
                    "action_name": "code_generator",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_ids",
                    "action_name": "model_ids",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_cg_module_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_cg_module.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_module_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "code_generator",
                    "action_name": "code_generator",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_cg_module_pivot",
                    "view_attr_string": "DevOps code generator module",
                    "m2o_model": model_devops_cg_module.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_module_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "code_generator",
                    "domain": "[('code_generator','!=',False)]",
                    "label": "Code Generator",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "model_ids",
                    "domain": "[('model_ids','!=',False)]",
                    "label": "No model",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_cg_module_search",
                    "view_attr_string": "DevOps code generator module",
                    "m2o_model": model_devops_cg_module.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_module_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator",
                    "action_name": "code_generator",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_ids",
                    "widget": "many2many_tags",
                    "action_name": "model_ids",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "widget": "many2many_tags",
                    "action_name": "devops_workspace_ids",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_cg_module_tree",
                    "m2o_model": model_devops_cg_module.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_module_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('execution_finish', '=', True)]}"
                    ),
                    "action_name": "action_new_project",
                    "button_type": "oe_highlight",
                    "label": "New project",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('execution_finish', '=', False)]}"
                    ),
                    "action_name": "action_new_project",
                    "button_type": "oe_highlight",
                    "label": "Re-execute",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project_setup_IDE",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('can_setup_ide', '=', False)]}",
                    "action_name": "action_new_project_setup_IDE",
                    "button_type": "oe_highlight",
                    "label": "Setup IDE",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project_clear_pause",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('is_pause', '=', False)]}",
                    "action_name": "action_new_project_clear_pause",
                    "button_type": "oe_highlight",
                    "label": "Clear pause",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project_debug",
                    "class_attr": "oe_highlight",
                    "action_name": "action_new_project_debug",
                    "button_type": "oe_highlight",
                    "label": "Debug",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project_debug",
                    "context": "{'new_project_with_breakpoint': False}",
                    "class_attr": "oe_highlight",
                    "action_name": "action_new_project_debug",
                    "button_type": "oe_highlight",
                    "label": "Debug only",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Start PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_kill_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_kill_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Kill PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_new_project",
                    "context": "{'one_stage_only': True}",
                    "class_attr": "oe_highlight",
                    "action_name": "action_new_project",
                    "button_type": "oe_highlight",
                    "label": "Run this stage only",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "field",
                    "name": "stage_id",
                    "widget": "statusbar",
                    "options": "{'fold_field': 'fold'}",
                    "clickable": "False",
                    "action_name": "stage_id",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "badge-pill badge-info float-right",
                    "attrs": "{'invisible': [('is_pause', '=', False)]}",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Pause",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "badge-pill badge-danger float-right",
                    "attrs": "{'invisible': [('has_error', '=', False)]}",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Error",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "badge-pill badge-warning float-right",
                    "attrs": "{'invisible': [('has_warning', '=', False)]}",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Warning",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Project",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "last_new_project",
                    "action_name": "last_new_project",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_bundle_id",
                    "action_name": "devops_exec_bundle_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Pycharm",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ide_pycharm_configuration_ids",
                    "widget": "many2many_tags",
                    "action_name": "ide_pycharm_configuration_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Execution",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_stop_date",
                    "action_name": "exec_stop_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_time_duration",
                    "action_name": "exec_time_duration",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "State",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_date",
                    "action_name": "create_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "write_date",
                    "action_name": "write_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_pause",
                    "action_name": "is_pause",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_error",
                    "action_name": "has_error",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_warning",
                    "action_name": "has_warning",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_finish",
                    "action_name": "execution_finish",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Configuration",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator_name",
                    "action_name": "code_generator_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "template_name",
                    "action_name": "template_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module",
                    "action_name": "module",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "directory",
                    "action_name": "directory",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "directory_cg",
                    "action_name": "directory_cg",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "directory_template",
                    "action_name": "directory_template",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config",
                    "action_name": "config",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_to_remove",
                    "action_name": "model_to_remove",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "odoo_config",
                    "action_name": "odoo_config",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module",
                    "action_name": "use_existing_meta_module",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module_uca_only",
                    "action_name": "use_existing_meta_module_uca_only",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "uca_option_with_inherit",
                    "action_name": "uca_option_with_inherit",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module_ucb_only",
                    "action_name": "use_existing_meta_module_ucb_only",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "new_project_with_code_generator",
                    "action_name": "new_project_with_code_generator",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 14,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "keep_bd_alive",
                    "action_name": "keep_bd_alive",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 15,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "bd_name_demo",
                    "action_name": "bd_name_demo",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 16,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "bd_name_template",
                    "action_name": "bd_name_template",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 17,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "bd_name_generator",
                    "action_name": "bd_name_generator",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 18,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stop_execution_if_env_not_clean",
                    "action_name": "stop_execution_if_env_not_clean",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 19,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active_coverage",
                    "action_name": "active_coverage",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 20,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "force",
                    "action_name": "force",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 21,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_cg_uca",
                    "label": "CG config UcA",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_uca_enable_export_data",
                    "action_name": "config_uca_enable_export_data",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_cg_config",
                    "label": "CG config view",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view",
                    "action_name": "mode_view",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet",
                    "action_name": "mode_view_snippet",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_enable_template_website_snippet_view",
                    "action_name": "mode_view_snippet_enable_template_website_snippet_view",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_generic_mdl",
                    "action_name": "mode_view_snippet_template_generate_website_snippet_generic_mdl",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_ctrl_featur",
                    "action_name": "mode_view_snippet_template_generate_website_snippet_ctrl_featur",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_enable_javascript",
                    "action_name": "mode_view_snippet_template_generate_website_enable_javascript",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_type",
                    "action_name": "mode_view_snippet_template_generate_website_snippet_type",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_path",
                    "label": "Path",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_path",
                    "action_name": "module_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_path",
                    "action_name": "config_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator_demo_path",
                    "action_name": "code_generator_demo_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator_hooks_path_relative",
                    "action_name": "code_generator_hooks_path_relative",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator_demo_hooks_py",
                    "action_name": "code_generator_demo_hooks_py",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cg_path",
                    "action_name": "cg_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cg_hooks_py",
                    "action_name": "cg_hooks_py",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "template_path",
                    "action_name": "template_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "template_hooks_py",
                    "action_name": "template_hooks_py",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "template_manifest_py",
                    "action_name": "template_manifest_py",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "General breakpoint condition",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Model",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_model_name",
                    "action_name": "breakpoint_condition_model_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_field_name",
                    "action_name": "breakpoint_condition_field_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_field_attribute_name",
                    "action_name": "breakpoint_condition_field_attribute_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_method_name",
                    "action_name": "breakpoint_condition_method_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_module_name",
                    "action_name": "breakpoint_condition_module_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "View",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_xml_id",
                    "action_name": "breakpoint_condition_xml_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_short_xml_id",
                    "action_name": "breakpoint_condition_short_xml_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_value_label_view_item",
                    "action_name": (
                        "breakpoint_condition_value_label_view_item"
                    ),
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_name_view_item",
                    "action_name": "breakpoint_condition_name_view_item",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_item_type_view_item",
                    "action_name": "breakpoint_condition_item_type_view_item",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_condition_view_name",
                    "action_name": "breakpoint_condition_view_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Debug all",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "General",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "can_setup_ide",
                    "action_name": "can_setup_ide",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_before_sync_code",
                    "action_name": "breakpoint_all_before_sync_code",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_before_sync_code'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_write_hook_begin",
                    "action_name": "breakpoint_all_write_hook_begin",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_write_hook_begin'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_write_hook_before_model",
                    "action_name": "breakpoint_all_write_hook_before_model",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_write_hook_before_model'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Write hook write field",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_write_hook_model_write_field",
                    "action_name": (
                        "breakpoint_all_write_hook_model_write_field"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_write_hook_model_write_field'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_prepare_data_before_write",
                    "action_name": "breakpoint_all_prepare_data_before_write",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_prepare_data_before_write'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Debug Uc0",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "General",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_debug_Uc0",
                    "action_name": "config_debug_Uc0",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint general",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_Uc0_cg_Uc0",
                    "action_name": "breakpoint_Uc0_cg_Uc0",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": "{'breakpoint_name': 'breakpoint_Uc0_cg_Uc0'}",
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint hook",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_Uc0_first_line_hook",
                    "action_name": "breakpoint_Uc0_first_line_hook",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name': 'breakpoint_Uc0_first_line_hook'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Debug UcA",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "General",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_debug_UcA",
                    "action_name": "config_debug_UcA",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint general",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_begin_generate_file",
                    "action_name": "breakpoint_all_begin_generate_file",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_begin_generate_file'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint hook",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_first_line_hook",
                    "action_name": "breakpoint_UcA_first_line_hook",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name': 'breakpoint_UcA_first_line_hook'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint extract view",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_view_first_line",
                    "action_name": "breakpoint_UcA_extract_view_first_line",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_view_first_line'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_xml_button",
                    "action_name": "breakpoint_UcA_extract_xml_button",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_xml_button'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_xml_header",
                    "action_name": "breakpoint_UcA_extract_xml_header",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_xml_header'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_xml_title",
                    "action_name": "breakpoint_UcA_extract_xml_title",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_xml_title'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_xml_view_item",
                    "action_name": "breakpoint_UcA_extract_xml_view_item",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_xml_view_item'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_xml_act_window",
                    "action_name": "breakpoint_UcA_extract_xml_act_window",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_xml_act_window'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_xml_div_container",
                    "action_name": "breakpoint_UcA_extract_xml_div_container",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_xml_div_container'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 14,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_view_warning",
                    "action_name": "breakpoint_UcA_extract_view_warning",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 15,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_view_warning'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 16,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint extract Python",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_python_controller_warning",
                    "action_name": (
                        "breakpoint_UcA_extract_python_controller_warning"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_python_controller_warning'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_python_module_warning",
                    "action_name": (
                        "breakpoint_UcA_extract_python_module_warning"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_python_module_warning'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": (
                        "breakpoint_UcA_extract_python_module_file_warning"
                    ),
                    "action_name": (
                        "breakpoint_UcA_extract_python_module_file_warning"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_python_module_file_warning'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_module_get_min_max_crop",
                    "action_name": (
                        "breakpoint_UcA_extract_module_get_min_max_crop"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_module_get_min_max_crop'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_extract_python_detect_field",
                    "action_name": (
                        "breakpoint_UcA_extract_python_detect_field"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_python_detect_field'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint writing code",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": (
                        "breakpoint_UcA_extract_module_create_cg_model_code"
                    ),
                    "action_name": (
                        "breakpoint_UcA_extract_module_create_cg_model_code"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_extract_module_create_cg_model_code'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_write_hook_code",
                    "action_name": "breakpoint_UcA_write_hook_code",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name': 'breakpoint_UcA_write_hook_code'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcA_write_hook_model",
                    "action_name": "breakpoint_UcA_write_hook_model",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcA_write_hook_model'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Debug UcB",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "General",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_debug_UcB",
                    "action_name": "config_debug_UcB",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint general",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_all_begin_generate_file",
                    "action_name": "breakpoint_all_begin_generate_file",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_all_begin_generate_file'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint hook",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_first_line_hook",
                    "action_name": "breakpoint_UcB_first_line_hook",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name': 'breakpoint_UcB_first_line_hook'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint generate view",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_generate_view_specific_form_item",
                    "action_name": (
                        "breakpoint_UcB_generate_view_specific_form_item"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_generate_view_specific_form_item'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_generate_xml_view_object",
                    "action_name": "breakpoint_UcB_generate_xml_view_object",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_generate_xml_view_object'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_generate_view_warning",
                    "action_name": "breakpoint_UcB_generate_view_warning",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_generate_view_warning'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint write code model field",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_write_code_model_field",
                    "action_name": "breakpoint_UcB_write_code_model_field",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_write_code_model_field'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": (
                        "breakpoint_UcB_write_code_model_field_prepare_field"
                    ),
                    "action_name": (
                        "breakpoint_UcB_write_code_model_field_prepare_field"
                    ),
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_write_code_model_field_prepare_field'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint write code",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_write_code_with_cw",
                    "action_name": "breakpoint_UcB_write_code_with_cw",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_write_code_with_cw'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_write_act_window",
                    "action_name": "breakpoint_UcB_write_act_window",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name':"
                        " 'breakpoint_UcB_write_act_window'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Breakpoint generate data",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "breakpoint_UcB_write_data",
                    "action_name": "breakpoint_UcB_write_data",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name': 'breakpoint_UcB_write_data'}"
                    ),
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Open",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Execution",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_ids",
                    "action_name": "devops_exec_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Log",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_error_ids",
                    "action_name": "log_error_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_warning_ids",
                    "action_name": "log_warning_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_new_project_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_cg_new_project.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_new_project_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_new_project_graph",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_cg_new_project.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_new_project_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_new_project_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_cg_new_project.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_new_project_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_new_project_pivot",
                    "view_attr_string": "DevOps code generator new project",
                    "m2o_model": model_devops_cg_new_project.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_new_project_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "action_name": "active",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "active",
                    "domain": "[('active','=',True)]",
                    "help": "Show active",
                    "label": "Active",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "inactive",
                    "domain": "[('active','=',False)]",
                    "help": "Show inactive",
                    "label": "Inactive",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "stage",
                    "context": "{'group_by':'stage_id'}",
                    "label": "Stage",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_new_project_search",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_cg_new_project.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_new_project_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_time_duration",
                    "action_name": "exec_time_duration",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_new_project_tree",
                    "m2o_model": model_devops_cg_new_project.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_new_project_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "fold",
                    "action_name": "fold",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops.cg.new_project.stage.form",
                    "view_attr_string": "Stage",
                    "m2o_model": model_devops_cg_new_project_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_new_project_stage_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "sequence",
                    "action_name": "sequence",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "Stage - Search",
                    "view_attr_string": "Stage Search",
                    "m2o_model": model_devops_cg_new_project_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_new_project_stage_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "sequence",
                    "widget": "handle",
                    "action_name": "sequence",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops.cg.new_project.stage.tree",
                    "view_attr_string": "Stages",
                    "m2o_model": model_devops_cg_new_project_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_new_project_stage_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "install_path",
                    "action_name": "install_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "generated_path",
                    "action_name": "generated_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_generated",
                    "action_name": "module_generated",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_init_ids",
                    "action_name": "module_init_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_search_class",
                    "action_name": "module_search_class",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_tested",
                    "action_name": "module_tested",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module_check",
                    "action_name": "path_module_check",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_meta",
                    "action_name": "path_meta",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_generated",
                    "action_name": "path_generated",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "restore_db_image_name",
                    "action_name": "restore_db_image_name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "file_to_restore",
                    "action_name": "file_to_restore",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "file_to_restore_origin",
                    "action_name": "file_to_restore_origin",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "script_after_init_check",
                    "action_name": "script_after_init_check",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 14,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_name",
                    "action_name": "test_name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 15,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "script_path",
                    "action_name": "script_path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 16,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "run_mode",
                    "action_name": "run_mode",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 17,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "sequence_test",
                    "action_name": "sequence_test",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 18,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "search_class_module",
                    "action_name": "search_class_module",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 19,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "note",
                    "action_name": "note",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 20,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_cg_test_case_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_cg_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_cg_test_case_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "install_path",
                    "action_name": "install_path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path_module_check",
                    "action_name": "path_module_check",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "restore_db_image_name",
                    "action_name": "restore_db_image_name",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "script_after_init_check",
                    "action_name": "script_after_init_check",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "test_name",
                    "action_name": "test_name",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_cg_test_case_graph",
                    "view_attr_string": "Devops cg test case",
                    "m2o_model": model_devops_cg_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_test_case_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "install_path",
                    "action_name": "install_path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_generated",
                    "action_name": "module_generated",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_init_ids",
                    "action_name": "module_init_ids",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_search_class",
                    "action_name": "module_search_class",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_tested",
                    "action_name": "module_tested",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module_check",
                    "action_name": "path_module_check",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "restore_db_image_name",
                    "action_name": "restore_db_image_name",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "script_after_init_check",
                    "action_name": "script_after_init_check",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_name",
                    "action_name": "test_name",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "install_path",
                    "action_name": "install_path",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_generated",
                    "action_name": "module_generated",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_init_ids",
                    "action_name": "module_init_ids",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_search_class",
                    "action_name": "module_search_class",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_tested",
                    "action_name": "module_tested",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module_check",
                    "action_name": "path_module_check",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "restore_db_image_name",
                    "action_name": "restore_db_image_name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "script_after_init_check",
                    "action_name": "script_after_init_check",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_name",
                    "action_name": "test_name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_cg_test_case_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_cg_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_test_case_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "install_path",
                    "action_name": "install_path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path_module_check",
                    "action_name": "path_module_check",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "restore_db_image_name",
                    "action_name": "restore_db_image_name",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "script_after_init_check",
                    "action_name": "script_after_init_check",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "test_name",
                    "action_name": "test_name",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_cg_test_case_pivot",
                    "view_attr_string": "Devops cg test case",
                    "m2o_model": model_devops_cg_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_test_case_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "install_path",
                    "domain": "[('install_path','!=',False)]",
                    "label": "Install Path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "module_generated",
                    "domain": "[('module_generated','!=',False)]",
                    "label": "Module Generated",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "module_init_ids",
                    "domain": "[('module_init_ids','!=',False)]",
                    "label": "Module Init",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "module_search_class",
                    "domain": "[('module_search_class','!=',False)]",
                    "label": "Module Search Class",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "module_tested",
                    "domain": "[('module_tested','!=',False)]",
                    "label": "Module Tested",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "path_module_check",
                    "domain": "[('path_module_check','!=',False)]",
                    "label": "Path Module Check",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "restore_db_image_name",
                    "domain": "[('restore_db_image_name','!=',False)]",
                    "label": "Restore Db Image Name",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "script_after_init_check",
                    "domain": "[('script_after_init_check','!=',False)]",
                    "label": "Script After Init Check",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "test_name",
                    "domain": "[('test_name','!=',False)]",
                    "label": "Test Name",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_cg_test_case_search",
                    "view_attr_string": "Devops cg test case",
                    "m2o_model": model_devops_cg_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_test_case_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "install_path",
                    "action_name": "install_path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_generated",
                    "action_name": "module_generated",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_init_ids",
                    "action_name": "module_init_ids",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_search_class",
                    "action_name": "module_search_class",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_tested",
                    "action_name": "module_tested",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module_check",
                    "action_name": "path_module_check",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "restore_db_image_name",
                    "action_name": "restore_db_image_name",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "script_after_init_check",
                    "action_name": "script_after_init_check",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_name",
                    "action_name": "test_name",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_cg_test_case_tree",
                    "m2o_model": model_devops_cg_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_cg_test_case_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('workspace_id', '=', False)]}",
                    "action_name": "open_file_ide",
                    "button_type": "oe_highlight",
                    "label": "Open into IDE",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "lineno",
                    "action_name": "lineno",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_absolute",
                    "action_name": "path_absolute",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module",
                    "action_name": "path_module",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_code_todo_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_code_todo.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_code_todo_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "measure",
                    "name": "lineno",
                    "action_name": "lineno",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path_absolute",
                    "action_name": "path_absolute",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path_module",
                    "action_name": "path_module",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "measure",
                    "name": "sequence",
                    "action_name": "sequence",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_code_todo_graph",
                    "view_attr_string": "Devops code todo",
                    "m2o_model": model_devops_code_todo.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_code_todo_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "lineno",
                    "action_name": "lineno",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_absolute",
                    "action_name": "path_absolute",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module",
                    "action_name": "path_module",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "lineno",
                    "action_name": "lineno",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_absolute",
                    "action_name": "path_absolute",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module",
                    "action_name": "path_module",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_code_todo_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_code_todo.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_code_todo_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "measure",
                    "name": "lineno",
                    "action_name": "lineno",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path_absolute",
                    "action_name": "path_absolute",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path_module",
                    "action_name": "path_module",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "measure",
                    "name": "sequence",
                    "action_name": "sequence",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_code_todo_pivot",
                    "view_attr_string": "Devops code todo",
                    "m2o_model": model_devops_code_todo.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_code_todo_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_empty",
                    "domain": "[('name','!=',False)]",
                    "label": "Is empty",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "inactive",
                    "domain": "[('active','=',False)]",
                    "label": "Inactive",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "not_hook_file",
                    "domain": "[('filename','!=','hooks.py')]",
                    "label": "Is not hook file",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "group_filename",
                    "context": "{'group_by':'filename'}",
                    "label": "File name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "group_module_id",
                    "context": "{'group_by':'module_id'}",
                    "label": "Module",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "group_workspace_id",
                    "context": "{'group_by':'workspace_id'}",
                    "label": "Workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_code_todo_search",
                    "view_attr_string": "Devops code todo",
                    "m2o_model": model_devops_code_todo.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_code_todo_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "sequence",
                    "widget": "handle",
                    "action_name": "sequence",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "lineno",
                    "action_name": "lineno",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "module_id",
                    "action_name": "module_id",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_module",
                    "action_name": "path_module",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('workspace_id', '=', False)]}",
                    "tabindex": "-1",
                    "action_name": "open_file_ide",
                    "button_type": "oe_stat_button",
                    "icon": "fa-play-circle text-success",
                    "label": "Open into IDE",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_code_todo_tree",
                    "m2o_model": model_devops_code_todo.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_code_todo_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path",
                    "action_name": "path",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_db_image_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_db_image.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_db_image_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path",
                    "action_name": "path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_db_image_graph",
                    "view_attr_string": "DevOps db image",
                    "m2o_model": model_devops_db_image.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_db_image_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path",
                    "action_name": "path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path",
                    "action_name": "path",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_db_image_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_db_image.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_db_image_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "path",
                    "action_name": "path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_db_image_pivot",
                    "view_attr_string": "DevOps db image",
                    "m2o_model": model_devops_db_image.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_db_image_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "path",
                    "domain": "[('path','!=',False)]",
                    "label": "Path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_db_image_search",
                    "view_attr_string": "DevOps db image",
                    "m2o_model": model_devops_db_image.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_db_image_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path",
                    "action_name": "path",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_db_image_tree",
                    "m2o_model": model_devops_db_image.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_db_image_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start_vm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_vm",
                    "button_type": "oe_highlight",
                    "label": "Start",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_stop_vm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_stop_vm",
                    "button_type": "oe_highlight",
                    "label": "Stop",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_vm_exec_running",
                    "action_name": "has_vm_exec_running",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_exec_last_id",
                    "action_name": "vm_exec_last_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "identifiant",
                    "action_name": "identifiant",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_ssh_host",
                    "action_name": "vm_ssh_host",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_info",
                    "action_name": "vm_info",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_description_json",
                    "action_name": "vm_description_json",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "os",
                    "action_name": "os",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "provider",
                    "action_name": "provider",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_id",
                    "action_name": "system_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_ids",
                    "action_name": "workspace_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_deploy_vm_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_deploy_vm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_deploy_vm_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "has_vm_exec_running",
                    "action_name": "has_vm_exec_running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "identifiant",
                    "action_name": "identifiant",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "os",
                    "action_name": "os",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "provider",
                    "action_name": "provider",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "system_id",
                    "action_name": "system_id",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "vm_exec_last_id",
                    "action_name": "vm_exec_last_id",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_deploy_vm_graph",
                    "view_attr_string": "Devops deploy vm",
                    "m2o_model": model_devops_deploy_vm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_vm_exec_running",
                    "action_name": "has_vm_exec_running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "identifiant",
                    "action_name": "identifiant",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_ssh_host",
                    "action_name": "vm_ssh_host",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "os",
                    "action_name": "os",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "provider",
                    "action_name": "provider",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_id",
                    "action_name": "system_id",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_exec_last_id",
                    "action_name": "vm_exec_last_id",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_ids",
                    "action_name": "workspace_ids",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.has_vm_exec_running.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.has_vm_exec_running.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "identifiant",
                    "action_name": "identifiant",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_ssh_host",
                    "action_name": "vm_ssh_host",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "os",
                    "action_name": "os",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "provider",
                    "action_name": "provider",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_id",
                    "action_name": "system_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_exec_last_id",
                    "action_name": "vm_exec_last_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_ids",
                    "action_name": "workspace_ids",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_deploy_vm_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_deploy_vm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "has_vm_exec_running",
                    "action_name": "has_vm_exec_running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "identifiant",
                    "action_name": "identifiant",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "os",
                    "action_name": "os",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "provider",
                    "action_name": "provider",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "system_id",
                    "action_name": "system_id",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "vm_exec_last_id",
                    "action_name": "vm_exec_last_id",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_deploy_vm_pivot",
                    "view_attr_string": "Devops deploy vm",
                    "m2o_model": model_devops_deploy_vm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "has_vm_exec_running",
                    "domain": "[('has_vm_exec_running','=',True)]",
                    "label": "Has Vm Exec Running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "identifiant",
                    "domain": "[('identifiant','!=',False)]",
                    "label": "Identifiant",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "os",
                    "domain": "[('os','!=',False)]",
                    "label": "Os",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "provider",
                    "domain": "[('provider','!=',False)]",
                    "label": "Provider",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "system_id",
                    "domain": "[('system_id','!=',False)]",
                    "label": "System",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "vm_exec_last_id",
                    "domain": "[('vm_exec_last_id','!=',False)]",
                    "label": "VM last exec",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "workspace_ids",
                    "domain": "[('workspace_ids','!=',False)]",
                    "label": "Workspaces",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_deploy_vm_search",
                    "view_attr_string": "Devops deploy vm",
                    "m2o_model": model_devops_deploy_vm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_vm_exec_running",
                    "action_name": "has_vm_exec_running",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_exec_last_id",
                    "action_name": "vm_exec_last_id",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "identifiant",
                    "action_name": "identifiant",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "os",
                    "action_name": "os",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "provider",
                    "action_name": "provider",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_id",
                    "action_name": "system_id",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_ids",
                    "action_name": "workspace_ids",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_deploy_vm_tree",
                    "m2o_model": model_devops_deploy_vm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_running",
                    "action_name": "is_running",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_id",
                    "action_name": "vm_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_deploy_vm_exec_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_deploy_vm_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_deploy_vm_exec_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "is_running",
                    "action_name": "is_running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "vm_id",
                    "action_name": "vm_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_deploy_vm_exec_graph",
                    "view_attr_string": "Devops deploy vm exec",
                    "m2o_model": model_devops_deploy_vm_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_running",
                    "action_name": "is_running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_id",
                    "action_name": "vm_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.is_running.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.is_running.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_id",
                    "action_name": "vm_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_deploy_vm_exec_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_deploy_vm_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "is_running",
                    "action_name": "is_running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "vm_id",
                    "action_name": "vm_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_deploy_vm_exec_pivot",
                    "view_attr_string": "Devops deploy vm exec",
                    "m2o_model": model_devops_deploy_vm_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_running",
                    "domain": "[('is_running','=',True)]",
                    "label": "Is Running",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "stage_id",
                    "domain": "[('stage_id','!=',False)]",
                    "label": "Stage",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "vm_id",
                    "domain": "[('vm_id','!=',False)]",
                    "label": "Vm",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_deploy_vm_exec_search",
                    "view_attr_string": "Devops deploy vm exec",
                    "m2o_model": model_devops_deploy_vm_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_running",
                    "action_name": "is_running",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stage_id",
                    "action_name": "stage_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "vm_id",
                    "action_name": "vm_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_deploy_vm_exec_tree",
                    "m2o_model": model_devops_deploy_vm_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_deploy_vm_exec_stage_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_deploy_vm_exec_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_deploy_vm_exec_stage_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_deploy_vm_exec_stage_graph",
                    "view_attr_string": "Devops deploy vm exec stage",
                    "m2o_model": model_devops_deploy_vm_exec_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_stage_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_deploy_vm_exec_stage_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_deploy_vm_exec_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_stage_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_deploy_vm_exec_stage_pivot",
                    "view_attr_string": "Devops deploy vm exec stage",
                    "m2o_model": model_devops_deploy_vm_exec_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_stage_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_deploy_vm_exec_stage_search",
                    "view_attr_string": "Devops deploy vm exec stage",
                    "m2o_model": model_devops_deploy_vm_exec_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_stage_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_deploy_vm_exec_stage_tree",
                    "m2o_model": model_devops_deploy_vm_exec_stage.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_exec_stage_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_deploy_vm_snapshot_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_deploy_vm_snapshot.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_deploy_vm_snapshot_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_deploy_vm_snapshot_graph",
                    "view_attr_string": "Devops deploy vm snapshot",
                    "m2o_model": model_devops_deploy_vm_snapshot.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_snapshot_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_deploy_vm_snapshot_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_deploy_vm_snapshot.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_snapshot_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_deploy_vm_snapshot_pivot",
                    "view_attr_string": "Devops deploy vm snapshot",
                    "m2o_model": model_devops_deploy_vm_snapshot.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_snapshot_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_deploy_vm_snapshot_search",
                    "view_attr_string": "Devops deploy vm snapshot",
                    "m2o_model": model_devops_deploy_vm_snapshot.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_snapshot_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_deploy_vm_snapshot_tree",
                    "m2o_model": model_devops_deploy_vm_snapshot.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_deploy_vm_snapshot_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('ide_breakpoint', '=', False)]}",
                    "action_name": "open_file_ide",
                    "button_type": "oe_highlight",
                    "label": "Open into IDE",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "new_project_id",
                    "action_name": "new_project_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Date",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_finish",
                    "action_name": "execution_finish",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "time_duration_result",
                    "action_name": "time_duration_result",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_stop_date",
                    "action_name": "exec_stop_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_time_duration",
                    "action_name": "exec_time_duration",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_date",
                    "action_name": "create_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "write_date",
                    "action_name": "write_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "CMD",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "folder",
                    "action_name": "folder",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cmd",
                    "action_name": "cmd",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Error",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_status",
                    "action_name": "exec_status",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_error_ids",
                    "action_name": "devops_exec_error_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Code",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ide_breakpoint",
                    "action_name": "ide_breakpoint",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_filename",
                    "action_name": "exec_filename",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_keyword",
                    "action_name": "exec_keyword",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_line_number",
                    "action_name": "exec_line_number",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "page_log_all",
                    "label": "Log All",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_all",
                    "action_name": "log_all",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "page_log_stdout",
                    "label": "Log stdout",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_stdout",
                    "action_name": "log_stdout",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "page_log_stderr",
                    "label": "Log stderr",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_stderr",
                    "action_name": "log_stderr",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "page_log_stdin",
                    "label": "Log stdin",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_stdin",
                    "action_name": "log_stdin",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "page_log_error",
                    "label": "Log error",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_error_ids",
                    "action_name": "log_error_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_warning_ids",
                    "action_name": "log_warning_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_exec_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_exec_graph",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_exec_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_exec_pivot",
                    "view_attr_string": "DevOps code generator new project",
                    "m2o_model": model_devops_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "filter_domain": "['|',('devops_workspace','ilike',self),('name','ilike',self)]",
                    "action_name": "name",
                    "label": "Execution",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "action_name": "active",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cmd",
                    "action_name": "cmd",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_all",
                    "action_name": "log_all",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "folder",
                    "action_name": "folder",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "label": "Workspace",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "active",
                    "domain": "[('active','=',True)]",
                    "help": "Show active",
                    "label": "Active",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "inactive",
                    "domain": "[('active','=',False)]",
                    "help": "Show inactive",
                    "label": "Inactive",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "more_1_sec",
                    "domain": "[('exec_time_duration', '>', 1)]",
                    "label": "More 1 sec",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "workspace",
                    "context": "{'group_by':'devops_workspace'}",
                    "label": "Workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "group_devops_exec_bundle_id",
                    "context": "{'group_by':'devops_exec_bundle_id'}",
                    "label": "Bundle",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_exec_search",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "time_duration_result",
                    "action_name": "time_duration_result",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_bundle_id",
                    "action_name": "devops_exec_bundle_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "folder",
                    "action_name": "folder",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cmd",
                    "action_name": "cmd",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ide_breakpoint",
                    "invisible": "True",
                    "action_name": "ide_breakpoint",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('ide_breakpoint', '=', False)]}",
                    "tabindex": "-1",
                    "action_name": "open_file_ide",
                    "button_type": "oe_stat_button",
                    "icon": "fa-play-circle text-success",
                    "label": "Open into IDE",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_exec_tree",
                    "m2o_model": model_devops_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "IT",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_ids",
                    "action_name": "devops_exec_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_new_project_ids",
                    "action_name": "devops_new_project_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Dependencies",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "parent_id",
                    "action_name": "parent_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "child_ids",
                    "action_name": "child_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Date",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_finish",
                    "action_name": "execution_finish",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "time_duration_result",
                    "action_name": "time_duration_result",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_stop_date",
                    "action_name": "exec_stop_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_time_duration",
                    "action_name": "exec_time_duration",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_date",
                    "action_name": "create_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "write_date",
                    "action_name": "write_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Info",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "error_all",
                    "label": "Errors all",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_parent_error_ids",
                    "action_name": "devops_exec_parent_error_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "error",
                    "label": "Errors",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_error_ids",
                    "action_name": "devops_exec_error_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_exec_bundle_form",
                    "view_attr_string": "Bundle execution",
                    "m2o_model": model_devops_exec_bundle.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_bundle_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_exec_bundle_graph",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_exec_bundle.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_bundle_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_exec_bundle_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_exec_bundle.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_bundle_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_exec_bundle_pivot",
                    "view_attr_string": "DevOps code generator new project",
                    "m2o_model": model_devops_exec_bundle.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_bundle_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "filter_domain": "['|',('devops_workspace','ilike',self),('name','ilike',self)]",
                    "action_name": "name",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "action_name": "active",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "label": "Workspace",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "root",
                    "domain": "[('parent_id','=',False)]",
                    "help": "Show roots",
                    "label": "Is root",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "child",
                    "domain": "[('parent_id','=',True)]",
                    "help": "Show childs",
                    "label": "Is child",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "active",
                    "domain": "[('active','=',True)]",
                    "help": "Show active",
                    "label": "Active",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "inactive",
                    "domain": "[('active','=',False)]",
                    "help": "Show inactive",
                    "label": "Inactive",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_finish",
                    "domain": "[('execution_finish','=',True)]",
                    "help": "Show finish",
                    "label": "Finish",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_running",
                    "domain": "[('execution_finish','=',False)]",
                    "help": "Show not finish",
                    "label": "Running",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "more_1_sec",
                    "domain": "[('exec_time_duration', '>', 1)]",
                    "label": "More 1 sec",
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "workspace",
                    "context": "{'group_by':'devops_workspace'}",
                    "label": "Workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "parent",
                    "context": "{'group_by':'parent_id'}",
                    "label": "Parent",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_exec_bundle_search",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_exec_bundle.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_bundle_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "time_duration_result",
                    "action_name": "time_duration_result",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_stop_date",
                    "action_name": "exec_stop_date",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_ids",
                    "widget": "many2many_tags",
                    "options": "{'no_create':True}",
                    "action_name": "devops_exec_ids",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_error_ids",
                    "widget": "many2many_tags",
                    "options": "{'no_create':True}",
                    "action_name": "devops_exec_error_ids",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_parent_error_ids",
                    "widget": "many2many_tags",
                    "options": "{'no_create':True}",
                    "action_name": "devops_exec_parent_error_ids",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_new_project_ids",
                    "widget": "many2many_tags",
                    "options": "{'no_create':True}",
                    "action_name": "devops_new_project_ids",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_exec_bundle_tree",
                    "m2o_model": model_devops_exec_bundle.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_bundle_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_set_breakpoint_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_set_breakpoint_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Set breakpoint Pycharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Start PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_kill_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_kill_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Kill PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_reboot_force_os_workspace",
                    "class_attr": "oe_highlight",
                    "action_name": "action_reboot_force_os_workspace",
                    "button_type": "oe_highlight",
                    "label": "Reboot outside PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_kill_workspace",
                    "class_attr": "oe_highlight",
                    "action_name": "action_kill_workspace",
                    "button_type": "oe_highlight",
                    "label": "Stop outside",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_debug_new_project",
                    "class_attr": "btn-warning",
                    "action_name": "action_debug_new_project",
                    "button_type": "btn-warning",
                    "label": "Debug",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('ide_breakpoint', '=', False)]}",
                    "action_name": "open_file_ide",
                    "button_type": "oe_highlight",
                    "label": "Open into IDE",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "badge-pill badge-info float-right",
                    "attrs": (
                        "{'invisible': [('diagnostic_idea', '=', False)]}"
                    ),
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Diagnostic",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "IT",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_bundle_id",
                    "action_name": "devops_exec_bundle_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_id",
                    "action_name": "devops_exec_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "parent_root_exec_bundle_id",
                    "action_name": "parent_root_exec_bundle_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stage_new_project_id",
                    "action_name": "stage_new_project_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "new_project_id",
                    "action_name": "new_project_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Info",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "type_error",
                    "action_name": "type_error",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "find_resolution",
                    "action_name": "find_resolution",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exception_name",
                    "action_name": "exception_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ide_breakpoint",
                    "action_name": "ide_breakpoint",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_filename",
                    "action_name": "exec_filename",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_keyword",
                    "action_name": "exec_keyword",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_line_number",
                    "action_name": "exec_line_number",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Date",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_date",
                    "action_name": "create_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "write_date",
                    "action_name": "write_date",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "line_file_tb_detected",
                    "action_name": "line_file_tb_detected",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Traceback",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "escaped_tb",
                    "action_name": "escaped_tb",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Diagnostic",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "context": (
                        "{'breakpoint_name': 'breakpoint_devops_diagnostic'}"
                    ),
                    "class_attr": "btn-secondary",
                    "action_name": "action_start_pycharm",
                    "button_type": "btn-secondary",
                    "label": "Code it",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "diagnostic_idea",
                    "action_name": "diagnostic_idea",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_exec_error_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_exec_error.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_exec_error_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_exec_error_graph",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_exec_error.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_error_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_exec_error_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_exec_error.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_error_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_exec_error_pivot",
                    "view_attr_string": "DevOps code generator new project",
                    "m2o_model": model_devops_exec_error.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_error_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "action_name": "active",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "label": "Workspace",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "escaped_tb",
                    "action_name": "escaped_tb",
                    "label": "Traceback",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "line_file_tb_detected",
                    "action_name": "line_file_tb_detected",
                    "label": "Line detected",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "diagnostic_idea",
                    "action_name": "diagnostic_idea",
                    "label": "Suggested diagnostic",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "active",
                    "domain": "[('active','=',True)]",
                    "help": "Show active",
                    "label": "Active",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "inactive",
                    "domain": "[('active','=',False)]",
                    "help": "Show inactive",
                    "label": "Inactive",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "workspace",
                    "context": "{'group_by':'devops_workspace'}",
                    "label": "Workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_exec_error_search",
                    "view_attr_string": (
                        "DevOps code generator module model field"
                    ),
                    "m2o_model": model_devops_exec_error.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_error_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "type_error",
                    "action_name": "type_error",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "escaped_tb",
                    "action_name": "escaped_tb",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "line_file_tb_detected",
                    "action_name": "line_file_tb_detected",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_date",
                    "action_name": "create_date",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "find_resolution",
                    "action_name": "find_resolution",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ide_breakpoint",
                    "invisible": "True",
                    "action_name": "ide_breakpoint",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('ide_breakpoint', '=', False)]}",
                    "tabindex": "-1",
                    "action_name": "open_file_ide",
                    "button_type": "oe_stat_button",
                    "icon": "fa-play-circle text-success",
                    "label": "Open into IDE",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_exec_error_tree",
                    "view_attr_decoration_danger": "find_resolution=='error'",
                    "view_attr_decoration_success": "find_resolution=='find'",
                    "view_attr_decoration_primary": (
                        "find_resolution=='diagnostic'"
                    ),
                    "m2o_model": model_devops_exec_error.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_exec_error_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('filename', '=', False)]}",
                    "action_name": "open_file_ide",
                    "button_type": "oe_highlight",
                    "label": "Open into IDE",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Description",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "keyword",
                    "action_name": "keyword",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "no_line",
                    "action_name": "no_line",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Filename",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename_is_code_generator_demo_hooks_py",
                    "action_name": "filename_is_code_generator_demo_hooks_py",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename_is_template_hooks_py",
                    "action_name": "filename_is_template_hooks_py",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename_is_cg_hooks_py",
                    "action_name": "filename_is_cg_hooks_py",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Condition name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_model_name",
                    "action_name": "condition_var_model_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_field_name",
                    "action_name": "condition_var_field_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_field_attr_name",
                    "action_name": "condition_var_field_attr_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_method_name",
                    "action_name": "condition_var_method_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Other",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ignore_test",
                    "action_name": "ignore_test",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "generated_by_execution",
                    "action_name": "generated_by_execution",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_ide_breakpoint_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_ide_breakpoint.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_ide_breakpoint_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "measure",
                    "name": "no_line",
                    "action_name": "no_line",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_ide_breakpoint_graph",
                    "view_attr_string": "Devops ide breakpoint",
                    "m2o_model": model_devops_ide_breakpoint.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_breakpoint_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "no_line",
                    "action_name": "no_line",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "no_line",
                    "action_name": "no_line",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_ide_breakpoint_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_ide_breakpoint.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_breakpoint_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "measure",
                    "name": "no_line",
                    "action_name": "no_line",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_ide_breakpoint_pivot",
                    "view_attr_string": "Devops ide breakpoint",
                    "m2o_model": model_devops_ide_breakpoint.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_breakpoint_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "filename",
                    "domain": "[('filename','!=',False)]",
                    "label": "Filename",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "no_line",
                    "domain": "[('no_line','!=',False)]",
                    "label": "No Line",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "filename",
                    "context": "{'group_by':'filename'}",
                    "label": "Filename",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_ide_breakpoint_search",
                    "view_attr_string": "Devops ide breakpoint",
                    "m2o_model": model_devops_ide_breakpoint.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_breakpoint_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "no_line",
                    "action_name": "no_line",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "keyword",
                    "action_name": "keyword",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename",
                    "action_name": "filename",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename_is_code_generator_demo_hooks_py",
                    "action_name": "filename_is_code_generator_demo_hooks_py",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename_is_template_hooks_py",
                    "action_name": "filename_is_template_hooks_py",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "filename_is_cg_hooks_py",
                    "action_name": "filename_is_cg_hooks_py",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "description",
                    "action_name": "description",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "generated_by_execution",
                    "action_name": "generated_by_execution",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_model_name",
                    "action_name": "condition_var_model_name",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_field_name",
                    "action_name": "condition_var_field_name",
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_field_attr_name",
                    "action_name": "condition_var_field_attr_name",
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "condition_var_method_name",
                    "action_name": "condition_var_method_name",
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "open_file_ide",
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('filename', '=', False)]}",
                    "tabindex": "-1",
                    "action_name": "open_file_ide",
                    "button_type": "oe_stat_button",
                    "icon": "fa-play-circle text-success",
                    "label": "Open into IDE",
                    "sequence": 14,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_ide_breakpoint_tree",
                    "m2o_model": model_devops_ide_breakpoint.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_breakpoint_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_pycharm_check",
                    "class_attr": "oe_highlight",
                    "action_name": "action_pycharm_check",
                    "button_type": "oe_highlight",
                    "label": "Check",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_pycharm_conf_init",
                    "class_attr": "oe_highlight",
                    "action_name": "action_pycharm_conf_init",
                    "button_type": "oe_highlight",
                    "label": "Conf init",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_cg_setup_pycharm_debug",
                    "class_attr": "oe_highlight",
                    "attrs": "{'invisible': [('is_installed', '=', False)]}",
                    "action_name": "action_cg_setup_pycharm_debug",
                    "button_type": "oe_highlight",
                    "label": "Setup debug from last execution",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Start PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_kill_pycharm",
                    "class_attr": "oe_highlight",
                    "action_name": "action_kill_pycharm",
                    "button_type": "oe_highlight",
                    "label": "Kill PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_reboot_force_os_workspace",
                    "class_attr": "oe_highlight",
                    "action_name": "action_reboot_force_os_workspace",
                    "button_type": "oe_highlight",
                    "label": "Reboot outside PyCharm",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_kill_workspace",
                    "class_attr": "oe_highlight",
                    "action_name": "action_kill_workspace",
                    "button_type": "oe_highlight",
                    "label": "Stop outside",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_installed",
                    "action_name": "is_installed",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace",
                    "action_name": "devops_workspace",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "line_file_tb_detected",
                    "action_name": "line_file_tb_detected",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_ide_pycharm_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_ide_pycharm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_ide_pycharm_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_ide_pycharm_graph",
                    "view_attr_string": "DevOps ide pycharm",
                    "m2o_model": model_devops_ide_pycharm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_pycharm_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_ide_pycharm_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_ide_pycharm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_pycharm_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_ide_pycharm_pivot",
                    "view_attr_string": "DevOps code generator new project",
                    "m2o_model": model_devops_ide_pycharm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_pycharm_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_ide_pycharm_search",
                    "view_attr_string": "DevOps ide pycharm",
                    "m2o_model": model_devops_ide_pycharm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_pycharm_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_installed",
                    "action_name": "is_installed",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_ide_pycharm_tree",
                    "m2o_model": model_devops_ide_pycharm.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_ide_pycharm_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_id",
                    "action_name": "devops_workspace_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_log_makefile_target_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_log_makefile_target.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_log_makefile_target_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_log_makefile_target_graph",
                    "view_attr_string": "DevOps db image",
                    "m2o_model": model_devops_log_makefile_target.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_log_makefile_target_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_id",
                    "action_name": "devops_workspace_id",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_id",
                    "action_name": "devops_workspace_id",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_log_makefile_target_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_log_makefile_target.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_log_makefile_target_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_log_makefile_target_pivot",
                    "view_attr_string": "DevOps db image",
                    "m2o_model": model_devops_log_makefile_target.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_log_makefile_target_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_log_makefile_target_search",
                    "view_attr_string": "DevOps db image",
                    "m2o_model": model_devops_log_makefile_target.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_log_makefile_target_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_id",
                    "action_name": "devops_workspace_id",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_launch_target",
                    "class_attr": "oe_stat_button",
                    "tabindex": "-1",
                    "action_name": "action_launch_target",
                    "button_type": "oe_stat_button",
                    "icon": "fa-play-circle text-success",
                    "label": "Launch target",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_log_makefile_target_tree",
                    "m2o_model": model_devops_log_makefile_target.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_log_makefile_target_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_xpath_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "xpath",
                    "expr": "//button[@name='open_next']",
                    "position": "replace",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_xpath_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "open_next",
                    "class_attr": "btn-primary",
                    "attrs": "{'invisible': [('has_next', '=', False)]}",
                    "action_name": "open_next",
                    "button_type": "btn-primary",
                    "label": "Next",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_xpath_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "xpath",
                    "expr": "//footer",
                    "position": "inside",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_xpath_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_commit",
                    "class_attr": "btn btn-success",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'code_module'),('plan_cg_id', '=', False)]}"
                    ),
                    "action_name": "action_git_commit",
                    "button_type": "btn-success",
                    "label": "Git commit module",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_commit",
                    "class_attr": "btn btn-success",
                    "attrs": (
                        "{'invisible': ['|','|','|',('state', '!=',"
                        " 'code_module'),('plan_cg_id', '=',"
                        " False),('use_existing_meta_module', '==',"
                        " False),('use_existing_meta_module_ucb_only','==',True)]}"
                    ),
                    "action_name": "action_git_commit",
                    "button_type": "btn-success",
                    "label": "Git commit UcA",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_commit",
                    "class_attr": "btn btn-success",
                    "attrs": (
                        "{'invisible': ['|','|','|',('state', '!=',"
                        " 'code_module'),('plan_cg_id', '=',"
                        " False),('use_existing_meta_module', '==',"
                        " False),('use_existing_meta_module_uca_only','==',True)]}"
                    ),
                    "action_name": "action_git_commit",
                    "button_type": "btn-success",
                    "label": "Git commit UcB",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_meld_remote",
                    "class_attr": "btn btn-success",
                    "attrs": (
                        "{'invisible': ['|','|',('state', '!=',"
                        " 'code_module'),('plan_cg_id', '=',"
                        " False),('is_remote_cg', '=', False)]}"
                    ),
                    "action_name": "action_git_meld_remote",
                    "button_type": "btn-success",
                    "label": "Git meld remote",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_clean_remote",
                    "class_attr": "btn btn-success",
                    "attrs": (
                        "{'invisible': ['|','|',('state', '!=',"
                        " 'code_module'),('plan_cg_id', '=',"
                        " False),('is_remote_cg', '=', False)]}"
                    ),
                    "action_name": "action_git_clean_remote",
                    "button_type": "btn-success",
                    "label": "Git clean remote",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_xpath_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "xpath",
                    "expr": "//footer",
                    "position": "before",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_xpath_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "root_workspace_id_is_me",
                    "invisible": "True",
                    "action_name": "root_workspace_id_is_me",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "root_workspace_id",
                    "invisible": "True",
                    "action_name": "root_workspace_id",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_next",
                    "invisible": "True",
                    "action_name": "has_next",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_ssh_connection_status",
                    "invisible": "True",
                    "action_name": "system_ssh_connection_status",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_update_system",
                    "invisible": "True",
                    "action_name": "is_update_system",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_new_or_exist_ssh",
                    "invisible": "True",
                    "action_name": "is_new_or_exist_ssh",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "can_search_workspace",
                    "invisible": "True",
                    "action_name": "can_search_workspace",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_force_local_system",
                    "invisible": "True",
                    "action_name": "is_force_local_system",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "force_show_final",
                    "invisible": "True",
                    "action_name": "force_show_final",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_configured_path",
                    "invisible": "True",
                    "action_name": "has_configured_path",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": "{'invisible': [('state', '!=', 'init')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "Choose an action into the system development life"
                        " cycle."
                    ),
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'code_module'),('has_configured_path', '==', True)]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "2 Code - Module generator",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_p_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_p_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "1. Choose an existing module or create a new one."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "2. Press button «Auto-complete» after complete A to"
                        " detect conflict."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "3. Adjust B to change path, with C for parameters."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_autocomplete_module_path",
                    "class_attr": "btn btn-success",
                    "action_name": (
                        "action_code_module_autocomplete_module_path"
                    ),
                    "button_type": "btn-success",
                    "label": "Auto-complete",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": (
                        "{'invisible': ['|','|',('state', '!=',"
                        " 'code_module'),('has_configured_path', '==',"
                        " False),('force_show_final', '==', True)]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "2 Code - Module generator",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_p_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_p_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "1. Choose an existing module or create a new one."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "2. Press button «Auto-complete» after complete A to"
                        " detect conflict."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "3. Adjust B to change path, with C for parameters."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_p_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_p_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "4. Create models and options.",
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_autocomplete_module_path",
                    "class_attr": "btn btn-default",
                    "action_name": (
                        "action_code_module_autocomplete_module_path"
                    ),
                    "button_type": "btn-default",
                    "label": "Auto-complete",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_generate",
                    "class_attr": "btn btn-success",
                    "action_name": "action_code_module_generate",
                    "button_type": "btn-success",
                    "label": "Generate",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": (
                        "{'invisible': ['|','|',('state', '!=',"
                        " 'code_module'),('has_configured_path', '==',"
                        " False),('force_show_final', '==', False)]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 14,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "2 Code - Module generator",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_p_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_p_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "1. Choose an existing module or create a new one."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "2. Press button «Auto-complete» after complete A to"
                        " detect conflict."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "3. Adjust B to change path, with C for parameters."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "4. Create models and options.",
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_p_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_p_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "5. Result",
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_autocomplete_module_path",
                    "class_attr": "btn btn-default",
                    "action_name": (
                        "action_code_module_autocomplete_module_path"
                    ),
                    "button_type": "btn-default",
                    "label": "Auto-complete",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_generate",
                    "class_attr": "btn btn-default",
                    "action_name": "action_code_module_generate",
                    "button_type": "btn-default",
                    "label": "Generate",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'code_shortcut')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 15,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "2 Code - Shortcut",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_p_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_p_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "Fast auto-complete module Odoo code generator."
                    ),
                    "parent_id": view_item_body_p_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": "{'invisible': [('state', '!=', 'h_run_test')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 16,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "4 Quality",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Run test",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_context",
                    "attrs": (
                        "{'invisible': [('state', '!=',"
                        " 'i_new_remote_system')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 17,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "6 Deploy",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Deploy a system",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_context",
                    "action_name": "mode_context",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_soft_dev",
                    "attrs": "{'invisible': [('state', '!=', 'init')]}",
                    "label": "Software development",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 18,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "Iterate between 4 steps and interact with Operates."
                    ),
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init",
                    "attrs": "{'invisible': [('state', '!=', 'init')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 19,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "1 Plan",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Requirement",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Analyse/Observe/Audit",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Conception",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "2 Code",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_code_shortcut",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_code_shortcut",
                    "button_type": "btn-default",
                    "label": "Auto-complete module",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_code_module",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_code_module",
                    "button_type": "btn-default",
                    "label": "Module",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Project",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "3 Build",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Container/Package",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "4 Quality",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_h_run_test",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_h_run_test",
                    "button_type": "btn-default",
                    "label": "Test",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Inspection",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_it_ops",
                    "attrs": "{'invisible': [('state', '!=', 'init')]}",
                    "label": "It operations",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 20,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "Operating automation about usage of the software,"
                        " create reports and feedback for development."
                    ),
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "init_2",
                    "attrs": "{'invisible': [('state', '!=', 'init')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 21,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "5 Release",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Documentation",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Versioning",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "6 Deploy",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_i_local_system",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_i_local_system",
                    "button_type": "btn-default",
                    "label": "Local system",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_i_new_remote_system",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_i_new_remote_system",
                    "button_type": "btn-default",
                    "label": "Remote system",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Migration",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Backup/Restoration",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Install/Update/Remove",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "7 Operate",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Manage problems",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Live observation",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Configuration",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_h2_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "h2",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_h2_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "8 Monitor",
                    "parent_id": view_item_body_h2_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Collect data monitoring",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Alerts",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Performance analysing",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Correlate incident",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Continuous amelioration",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_code_shortcut",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'code_shortcut')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 22,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Autopoieses",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": (
                        "state_goto_code_module_shortcut_autopoieses_devops"
                    ),
                    "class_attr": "btn btn-default",
                    "action_name": (
                        "state_goto_code_module_shortcut_autopoieses_devops"
                    ),
                    "button_type": "btn-default",
                    "label": "DevOps",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_code_module_shortcut_autopoieses_code_generator",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_code_module_shortcut_autopoieses_code_generator",
                    "button_type": "btn-default",
                    "label": "Code Generator UcB",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_code_module_shortcut_autopoieses_code_generator_code_generator",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_code_module_shortcut_autopoieses_code_generator_code_generator",
                    "button_type": "btn-default",
                    "label": "Code Generator UcA",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_a_a_model",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'a_a_model'),('state',"
                        " '!=', 'c_a_model')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 23,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Module",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_id",
                    "action_name": "working_module_id",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_name",
                    "action_name": "working_module_name",
                    "label": "OR Working Module Name",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Feature",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_external_cg",
                    "action_name": "use_external_cg",
                    "label": "CG with metadata",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module",
                    "action_name": "use_existing_meta_module",
                    "label": "Meta module",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module_uca_only",
                    "action_name": "use_existing_meta_module_uca_only",
                    "label": "UcA only",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "uca_option_with_inherit",
                    "action_name": "uca_option_with_inherit",
                    "label": "UcA option with inherit",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module_ucb_only",
                    "action_name": "use_existing_meta_module_ucb_only",
                    "label": "UcB only",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_a_a_model",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'a_a_model'),('state',"
                        " '!=', 'c_a_model')]}"
                    ),
                    "label": "Model",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 24,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_ids",
                    "action_name": "model_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_to_remove_ids",
                    "action_name": "model_to_remove_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_g_test_erplibre",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'g_test_erplibre')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 25,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Where",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_g_a_local",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_g_a_local",
                    "button_type": "btn-default",
                    "label": "Local",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_code_module",
                    "attrs": "{'invisible': [('state', '!=', 'code_module')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 26,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "A-Module name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_id",
                    "action_name": "working_module_id",
                    "label": "Existing module",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_name",
                    "attrs": (
                        "{'invisible': [('working_module_id', '!=', False)]}"
                    ),
                    "action_name": "working_module_name",
                    "label": "OR module name",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_new_module",
                    "action_name": "is_new_module",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_autocomplete_module_path",
                    "class_attr": "btn btn-default",
                    "action_name": (
                        "action_code_module_autocomplete_module_path"
                    ),
                    "button_type": "btn-default",
                    "label": "Auto-complete 'B-Module path'",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "B-Module path",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_path_suggestion",
                    "action_name": "working_module_path_suggestion",
                    "label": "Suggested path",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_path",
                    "attrs": (
                        "{'invisible': [('working_module_path_suggestion',"
                        " '!=', '#')]}"
                    ),
                    "action_name": "working_module_path",
                    "label": "OR Manual path",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": "{'invisible': [('state', '!=', 'code_module')]}",
                    "label": "C-Parameter",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_generator",
                    "action_name": "mode_view_generator",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "force_generate",
                    "action_name": "force_generate",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_remote_cg",
                    "action_name": "is_remote_cg",
                    "label": "Generate outside ME",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": "{'invisible': [('state', '!=', 'code_module')]}",
                    "label": "C-Parameter Meta UcA & UcB",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_external_cg",
                    "action_name": "use_external_cg",
                    "label": "With UcA UcB",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module",
                    "attrs": (
                        "{'invisible': [('use_external_cg', '==', False)]}"
                    ),
                    "action_name": "use_existing_meta_module",
                    "label": "Select a meta",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module_uca_only",
                    "attrs": (
                        "{'invisible': ['|','|',('use_external_cg', '==',"
                        " False),('use_existing_meta_module', '==',"
                        " False),('use_existing_meta_module_ucb_only','==',True)]}"
                    ),
                    "action_name": "use_existing_meta_module_uca_only",
                    "label": "UcA only",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_generator_name",
                    "attrs": (
                        "{'invisible': ['|',('use_external_cg', '!=',"
                        " True),('use_existing_meta_module_ucb_only','==',True)]}"
                    ),
                    "action_name": "code_generator_name",
                    "label": "UcA name",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_cg_path_suggestion",
                    "attrs": (
                        "{'invisible': ['|',('use_external_cg', '!=',"
                        " True),('use_existing_meta_module_ucb_only','==',True)]}"
                    ),
                    "action_name": "working_module_cg_path_suggestion",
                    "label": "UcA suggested path",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_cg_path",
                    "attrs": (
                        "{'invisible':"
                        " ['|','|',('working_module_cg_path_suggestion', '!=',"
                        " '#'),('use_external_cg', '!=',"
                        " True),('use_existing_meta_module_ucb_only','==',True)]}"
                    ),
                    "action_name": "working_module_cg_path",
                    "label": "OR Manual UcA path",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "uca_option_with_inherit",
                    "attrs": (
                        "{'invisible': ['|',('use_external_cg', '==',"
                        " False),('use_existing_meta_module_ucb_only','==',True)]}"
                    ),
                    "action_name": "uca_option_with_inherit",
                    "label": "UcA option with inherit",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_existing_meta_module_ucb_only",
                    "attrs": (
                        "{'invisible': ['|','|',('use_external_cg', '==',"
                        " False),('use_existing_meta_module', '==',"
                        " False),('use_existing_meta_module_uca_only','==',True)]}"
                    ),
                    "action_name": "use_existing_meta_module_ucb_only",
                    "label": "UcB only",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "template_name",
                    "attrs": (
                        "{'invisible': ['|',('use_external_cg', '!=',"
                        " True),('use_existing_meta_module_uca_only','==',True)]}"
                    ),
                    "action_name": "template_name",
                    "label": "UcB name",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_template_path_suggestion",
                    "attrs": (
                        "{'invisible': ['|',('use_external_cg', '!=',"
                        " True),('use_existing_meta_module_uca_only','==',True)]}"
                    ),
                    "action_name": "working_module_template_path_suggestion",
                    "label": "UcB suggested path",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_module_template_path",
                    "attrs": (
                        "{'invisible':"
                        " ['|','|',('working_module_template_path_suggestion',"
                        " '!=', '#'),('use_external_cg', '!=',"
                        " True),('use_existing_meta_module_uca_only','==',True)]}"
                    ),
                    "action_name": "working_module_template_path",
                    "label": "OR Manual UcB path",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'code_module'),('has_configured_path', '==',"
                        " False)]}"
                    ),
                    "label": "D-Model",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 27,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_ids",
                    "action_name": "model_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "model_to_remove_ids",
                    "action_name": "model_to_remove_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_code_module_2",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'code_module'),('has_configured_path', '==',"
                        " False)]}"
                    ),
                    "label": "E-Options",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 28,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Snippet",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet",
                    "action_name": "mode_view_snippet",
                    "label": "Mode",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_generic_mdl",
                    "attrs": (
                        "{'invisible': [('mode_view_snippet', '==',"
                        " 'no_snippet')]}"
                    ),
                    "action_name": "mode_view_snippet_template_generate_website_snippet_generic_mdl",
                    "label": "Models",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_enable_template_website_snippet_view",
                    "attrs": (
                        "{'invisible': [('mode_view_snippet', '==',"
                        " 'no_snippet')]}"
                    ),
                    "action_name": "mode_view_snippet_enable_template_website_snippet_view",
                    "label": "Generate by template",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_ctrl_featur",
                    "attrs": (
                        "{'invisible': [('mode_view_snippet', '==',"
                        " 'no_snippet')]}"
                    ),
                    "action_name": "mode_view_snippet_template_generate_website_snippet_ctrl_featur",
                    "label": "Template feature",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_enable_javascript",
                    "attrs": (
                        "{'invisible': [('mode_view_snippet', '==',"
                        " 'no_snippet')]}"
                    ),
                    "action_name": "mode_view_snippet_template_generate_website_enable_javascript",
                    "label": "With Javascript",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_type",
                    "attrs": (
                        "{'invisible': [('mode_view_snippet', '==',"
                        " 'no_snippet')]}"
                    ),
                    "action_name": "mode_view_snippet_template_generate_website_snippet_type",
                    "label": "Snippet type",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': [('use_external_cg', '==', True)]}"
                    ),
                    "label": "Portal",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal",
                    "action_name": "mode_view_portal",
                    "label": "Mode",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_models",
                    "attrs": (
                        "{'invisible': [('mode_view_portal', '==',"
                        " 'no_portal')]}"
                    ),
                    "action_name": "mode_view_portal_models",
                    "label": "Models",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_create",
                    "attrs": (
                        "{'invisible': [('mode_view_portal', '==',"
                        " 'no_portal')]}"
                    ),
                    "action_name": "mode_view_portal_enable_create",
                    "label": "Support create",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_read",
                    "attrs": (
                        "{'invisible': [('mode_view_portal', '==',"
                        " 'no_portal')]}"
                    ),
                    "action_name": "mode_view_portal_enable_read",
                    "label": "Support read",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_update",
                    "attrs": (
                        "{'invisible': [('mode_view_portal', '==',"
                        " 'no_portal')]}"
                    ),
                    "action_name": "mode_view_portal_enable_update",
                    "label": "Support update",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_delete",
                    "attrs": (
                        "{'invisible': [('mode_view_portal', '==',"
                        " 'no_portal')]}"
                    ),
                    "action_name": "mode_view_portal_enable_delete",
                    "label": "Support delete",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Data",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_uca_enable_export_data",
                    "attrs": (
                        "{'invisible': [('use_external_cg', '==', True)]}"
                    ),
                    "action_name": "config_uca_enable_export_data",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'code_module'),('has_configured_path', '==',"
                        " False)]}"
                    ),
                    "label": "F-Generate",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 29,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_module_generate",
                    "class_attr": "btn btn-success",
                    "action_name": "action_code_module_generate",
                    "button_type": "btn-success",
                    "label": "Generate",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_g_a_local",
                    "attrs": "{'invisible': [('state', '!=', 'g_a_local')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 30,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "DB",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "image_db_selection",
                    "action_name": "image_db_selection",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Package",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "enable_package_srs",
                    "action_name": "enable_package_srs",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_f_new_project_society",
                    "attrs": (
                        "{'invisible': [('state', '!=',"
                        " 'f_new_project_society')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 31,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_a_a_model",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_a_a_model",
                    "button_type": "btn-default",
                    "label": "Add model",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_a_b_field",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_a_b_field",
                    "button_type": "btn-default",
                    "label": "Add field",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_a_c_action",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_a_c_action",
                    "button_type": "btn-default",
                    "label": "Add action",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_a_d_view",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_a_d_view",
                    "button_type": "btn-default",
                    "label": "Add view",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_i_new_remote_system",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'i_new_remote_system'),('is_force_local_system',"
                        " '=', True)]}"
                    ),
                    "label": "Introduction",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 32,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Choose existing system or a remote system.",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Requirement to create a remote system :",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_ul_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_ul_p4.id)

            view_item_body_li_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "parent_id": view_item_body_ul_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Ubuntu OS (22.04 tested)",
                    "parent_id": view_item_body_li_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "parent_id": view_item_body_ul_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Install openssh-server",
                    "parent_id": view_item_body_li_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "parent_id": view_item_body_ul_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Get your username, password and your ip",
                    "parent_id": view_item_body_li_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "(or your host name)",
                    "parent_id": view_item_body_li_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "search_subsystem_workspace",
                    "class_attr": "btn btn-default",
                    "action_name": "search_subsystem_workspace",
                    "button_type": "btn-default",
                    "label": "Update sub-system to find remote system",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'i_new_remote_system'),('is_force_local_system',"
                        " '=', True)]}"
                    ),
                    "label": "Choose a system",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 33,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_system_id",
                    "options": "{'no_create': True}",
                    "action_name": "working_system_id",
                    "label": "Existing system",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "clear_working_system_id",
                    "class_attr": "btn btn-default",
                    "attrs": (
                        "{'invisible': [('working_system_id', '=', False)]}"
                    ),
                    "action_name": "clear_working_system_id",
                    "button_type": "btn-default",
                    "label": "A new system please",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': [('state', '!=',"
                        " 'i_new_remote_system')]}"
                    ),
                    "label": "System information",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 36,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_name",
                    "action_name": "system_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_user",
                    "attrs": (
                        "{'invisible': [('is_new_or_exist_ssh', '=', False)]}"
                    ),
                    "action_name": "ssh_user",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_password",
                    "attrs": (
                        "{'invisible': [('is_new_or_exist_ssh', '=', False)]}"
                    ),
                    "action_name": "ssh_password",
                    "password": True,
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_host",
                    "attrs": (
                        "{'invisible': [('is_new_or_exist_ssh', '=', False)]}"
                    ),
                    "action_name": "ssh_host",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_port",
                    "attrs": (
                        "{'invisible': [('is_new_or_exist_ssh', '=', False)]}"
                    ),
                    "action_name": "ssh_port",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_create_and_test",
                    "class_attr": "btn btn-default",
                    "attrs": (
                        "{'invisible': ['|',('is_new_or_exist_ssh', '=',"
                        " False),('working_system_id', '!=', False)]}"
                    ),
                    "action_name": "ssh_create_and_test",
                    "button_type": "btn-default",
                    "label": "Create system and test",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_test_system_exist",
                    "class_attr": "btn btn-default",
                    "attrs": (
                        "{'invisible': ['|',('is_new_or_exist_ssh', '=',"
                        " False),('working_system_id', '=', False)]}"
                    ),
                    "action_name": "ssh_test_system_exist",
                    "button_type": "btn-default",
                    "label": "Update system and re-test",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "html",
                    "class_attr": "bg-warning",
                    "attrs": (
                        "{'invisible': ['|','|',('is_new_or_exist_ssh', '=',"
                        " False),('system_ssh_connection_status', '=',"
                        " True),('working_system_id', '=', False)]}"
                    ),
                    "background_type": "bg-warning",
                    "label": "Test SSH connection fail.",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "search_workspace_from_system",
                    "class_attr": "btn btn-default",
                    "attrs": (
                        "{'invisible': [('can_search_workspace', '=', False)]}"
                    ),
                    "action_name": "search_workspace_from_system",
                    "button_type": "btn-default",
                    "label": "Search workspace",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'i_new_remote_system'),('can_search_workspace', '=',"
                        " False)]}"
                    ),
                    "label": "A-Installation",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 37,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "1-Test comm",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_open_terminal",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_open_terminal",
                    "button_type": "btn-default",
                    "label": "Test open terminal",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "2-OS",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_install_minimal",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_install_minimal",
                    "button_type": "btn-default",
                    "label": "Minimal installation",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_install_docker",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_install_docker",
                    "button_type": "btn-default",
                    "label": "Docker installation",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_install_dev",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_install_dev",
                    "button_type": "btn-default",
                    "label": "Dev installation",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_install_production",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_install_production",
                    "button_type": "btn-default",
                    "label": "Production installation",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_install_all",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_install_all",
                    "button_type": "btn-default",
                    "label": "All installation",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': ['|',('state', '!=',"
                        " 'i_new_remote_system'),('can_search_workspace', '=',"
                        " False)]}"
                    ),
                    "label": "B-Workspace",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 38,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Information",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_erplibre_config_path_home_ids",
                    "invisible": "True",
                    "action_name": "system_erplibre_config_path_home_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_erplibre_config_path_home_id",
                    "domain": (
                        "[('id','in', system_erplibre_config_path_home_ids)]"
                    ),
                    "options": "{'no_create':true}",
                    "action_name": "working_erplibre_config_path_home_id",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_relative_folder",
                    "action_name": "working_relative_folder",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_folder",
                    "action_name": "workspace_folder",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "erplibre_mode",
                    "action_name": "erplibre_mode",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "image_db_selection",
                    "action_name": "image_db_selection",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "ssh_system_create_workspace",
                    "class_attr": "btn btn-default",
                    "action_name": "ssh_system_create_workspace",
                    "button_type": "btn-default",
                    "label": "Create workspace",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_workspace_id",
                    "attrs": (
                        "{'invisible': [('create_workspace_id', '=', False)]}"
                    ),
                    "action_name": "create_workspace_id",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_h_run_test",
                    "attrs": "{'invisible': [('state', '!=', 'h_run_test')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 39,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Test plan",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "state_goto_h_a_test_plan_exec",
                    "class_attr": "btn btn-default",
                    "action_name": "state_goto_h_a_test_plan_exec",
                    "button_type": "btn-default",
                    "label": "Run new test plan execution",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_h_b_cg",
                    "attrs": "{'invisible': [('state', '!=', 'h_b_cg')]}",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 40,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Test type",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "not_supported",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'not_supported')]}"
                    ),
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 41,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_p_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_p_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "This state is not supported, please go back."
                    ),
                    "parent_id": view_item_body_p_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "final",
                    "attrs": (
                        "{'invisible': [('state', '!=', 'final'),"
                        " ('force_show_final', '!=', True)]}"
                    ),
                    "label": "Result",
                    "parent_id": view_item_body_xpath_p1.id,
                    "sequence": 42,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_p_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "p",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_p_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": (
                        "Your action is done, close this dialog below."
                    ),
                    "parent_id": view_item_body_p_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "plan_cg_id",
                    "attrs": "{'invisible': [('plan_cg_id', '=', False)]}",
                    "action_name": "plan_cg_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "generated_new_project_id",
                    "attrs": (
                        "{'invisible': [('generated_new_project_id', '=',"
                        " False)]}"
                    ),
                    "action_name": "generated_new_project_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "create_workspace_id",
                    "attrs": (
                        "{'invisible': [('create_workspace_id', '=', False)]}"
                    ),
                    "action_name": "create_workspace_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_system_id",
                    "attrs": (
                        "{'invisible': [('working_system_id', '=', False)]}"
                    ),
                    "action_name": "working_system_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_cg_module_id",
                    "attrs": (
                        "{'invisible': [('working_cg_module_id', '=', False)]}"
                    ),
                    "action_name": "working_cg_module_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "working_cg_writer_id",
                    "attrs": (
                        "{'invisible': [('working_cg_writer_id', '=', False)]}"
                    ),
                    "action_name": "working_cg_writer_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops.plan.action.form",
                    "m2o_model": model_devops_plan_action_wizard.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_plan_action_form",
                    "inherit_view_name": (
                        "multi_step_wizard.multi_step_wizard_form"
                    ),
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_execute_last_stage_new_project",
                    "class_attr": "btn-warning",
                    "attrs": (
                        "{'invisible': [('has_re_execute_new_project', '=',"
                        " False)]}"
                    ),
                    "action_name": "action_execute_last_stage_new_project",
                    "button_type": "btn-warning",
                    "label": "Re-execute last",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_execute_last_stage_new_project",
                    "context": "{'default_stage_Uc0': True}",
                    "class_attr": "btn-warning",
                    "attrs": (
                        "{'invisible': [('has_re_execute_new_project', '=',"
                        " False)]}"
                    ),
                    "action_name": "action_execute_last_stage_new_project",
                    "button_type": "btn-warning",
                    "label": "Re-execute Uc0",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "invisible": "True",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_re_execute_new_project",
                    "action_name": "has_re_execute_new_project",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "html",
                    "class_attr": "bg-warning",
                    "background_type": "bg-warning",
                    "label": "Create new project with code generator",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Action CG",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_install_and_generate_all_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": (
                        "action_install_and_generate_all_generated_module"
                    ),
                    "button_type": "oe_highlight",
                    "label": "All",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_code_generator_generate_all",
                    "class_attr": "oe_highlight",
                    "action_name": "action_code_generator_generate_all",
                    "button_type": "oe_highlight",
                    "label": "Generate all",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_install_all_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": "action_install_all_generated_module",
                    "button_type": "oe_highlight",
                    "label": "Install all",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_refresh_meta_cg_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": "action_refresh_meta_cg_generated_module",
                    "button_type": "oe_highlight",
                    "label": "Refresh CG",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_install_all_uca_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": "action_install_all_uca_generated_module",
                    "button_type": "oe_highlight",
                    "label": "Install UCA",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_install_all_ucb_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": "action_install_all_ucb_generated_module",
                    "button_type": "oe_highlight",
                    "label": "Install UCB",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Action addons",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_clear_all_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": "action_clear_all_generated_module",
                    "button_type": "oe_highlight",
                    "label": "Clear all",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_commit_all_generated_module",
                    "class_attr": "oe_highlight",
                    "action_name": "action_git_commit_all_generated_module",
                    "button_type": "oe_highlight",
                    "label": "Git commit",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_terminal_tig",
                    "class_attr": "oe_highlight",
                    "action_name": "action_open_terminal_tig",
                    "button_type": "oe_highlight",
                    "label": "Terminal tig",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_terminal_addons",
                    "class_attr": "oe_highlight",
                    "action_name": "action_open_terminal_addons",
                    "button_type": "oe_highlight",
                    "label": "Terminal addons",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "need_debugger_cg_erplibre_devops",
                    "invisible": "True",
                    "action_name": "need_debugger_cg_erplibre_devops",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "CG new project",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_terminal_path_erplibre_devops",
                    "class_attr": "oe_highlight",
                    "action_name": "action_open_terminal_path_erplibre_devops",
                    "button_type": "oe_highlight",
                    "label": "Terminal path erplibre_devops",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_format_erplibre_devops",
                    "class_attr": "oe_highlight",
                    "action_name": "action_format_erplibre_devops",
                    "button_type": "oe_highlight",
                    "label": "Format module erplibre_devops",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_update_erplibre_devops",
                    "class_attr": "oe_highlight",
                    "action_name": "action_update_erplibre_devops",
                    "button_type": "oe_highlight",
                    "label": "Update module erplibre_devops",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "workspace_CG_remove_module",
                    "class_attr": "oe_highlight",
                    "action_name": "workspace_CG_remove_module",
                    "button_type": "oe_highlight",
                    "label": "Clear modules",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_git_commit",
                    "class_attr": "oe_highlight",
                    "action_name": "action_git_commit",
                    "button_type": "oe_highlight",
                    "label": "Git commit",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_cg_setup_pycharm_debug",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('need_debugger_cg_erplibre_devops',"
                        " '=', False)]}"
                    ),
                    "action_name": "action_cg_setup_pycharm_debug",
                    "button_type": "oe_highlight",
                    "label": "Setup Pycharm debug",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Action other",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_cg_generate_demo",
                    "class_attr": "oe_highlight",
                    "action_name": "action_cg_generate_demo",
                    "button_type": "oe_highlight",
                    "label": "Generate demo",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_clear_before_cg_demo",
                    "action_name": "is_clear_before_cg_demo",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cg_demo_type_data",
                    "action_name": "cg_demo_type_data",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Execution",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "last_new_project_cg",
                    "action_name": "last_new_project_cg",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "last_code_generator_module",
                    "action_name": "last_code_generator_module",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "last_code_generator_writer",
                    "action_name": "last_code_generator_writer",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "stop_execution_if_env_not_clean",
                    "action_name": "stop_execution_if_env_not_clean",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "cg_self_add_config_cg",
                    "action_name": "cg_self_add_config_cg",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_cg_uca",
                    "label": "CG config UcA",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "config_uca_enable_export_data",
                    "action_name": "config_uca_enable_export_data",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Log",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_erplibre_devops_error_log",
                    "attrs": (
                        "{'invisible':"
                        " [('devops_cg_erplibre_devops_error_log', '=',"
                        " False)]}"
                    ),
                    "action_name": "devops_cg_erplibre_devops_error_log",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_erplibre_devops_log",
                    "action_name": "devops_cg_erplibre_devops_log",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "name": "group_cg_config",
                    "label": "CG config view",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view",
                    "action_name": "mode_view",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet",
                    "action_name": "mode_view_snippet",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_enable_template_website_snippet_view",
                    "action_name": "mode_view_snippet_enable_template_website_snippet_view",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_generic_mdl",
                    "action_name": "mode_view_snippet_template_generate_website_snippet_generic_mdl",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_ctrl_featur",
                    "action_name": "mode_view_snippet_template_generate_website_snippet_ctrl_featur",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_enable_javascript",
                    "action_name": "mode_view_snippet_template_generate_website_enable_javascript",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_snippet_template_generate_website_snippet_type",
                    "action_name": "mode_view_snippet_template_generate_website_snippet_type",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal",
                    "action_name": "mode_view_portal",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_create",
                    "action_name": "mode_view_portal_enable_create",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_read",
                    "action_name": "mode_view_portal_enable_read",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_update",
                    "action_name": "mode_view_portal_enable_update",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_enable_delete",
                    "action_name": "mode_view_portal_enable_delete",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_view_portal_models",
                    "action_name": "mode_view_portal_models",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Configuration",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "code_mode_context_generator",
                    "action_name": "code_mode_context_generator",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_code_generator_to_generate",
                    "action_name": "path_code_generator_to_generate",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_code_generator_to_generate_cg",
                    "action_name": "path_code_generator_to_generate_cg",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_code_generator_to_generate_template",
                    "action_name": "path_code_generator_to_generate_template",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "path_working_erplibre",
                    "action_name": "path_working_erplibre",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Generator",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "id",
                    "invisible": "True",
                    "action_name": "id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_ids",
                    "widget": "many2many",
                    "context": "{'default_devops_workspace_ids': [id]}",
                    "options": "{'always_reload': True}",
                    "action_name": "devops_cg_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_module_ids",
                    "widget": "many2many",
                    "context": "{'default_devops_workspace_ids': [id]}",
                    "options": "{'always_reload': True}",
                    "action_name": "devops_cg_module_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_model_ids",
                    "widget": "many2many",
                    "context": "{'default_devops_workspace_ids': [id]}",
                    "options": "{'always_reload': True}",
                    "action_name": "devops_cg_model_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_field_ids",
                    "widget": "many2many",
                    "context": "{'default_devops_workspace_ids': [id]}",
                    "options": "{'always_reload': True}",
                    "action_name": "devops_cg_field_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_model_to_remove_ids",
                    "widget": "many2many",
                    "context": "{'default_devops_workspace_ids': [id]}",
                    "options": "{'always_reload': True}",
                    "action_name": "devops_cg_model_to_remove_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "code_generator_info_diff",
                    "label": "Diff",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_diff",
                    "action_name": "devops_cg_diff",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "code_generator_info_status",
                    "label": "Status",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_status",
                    "action_name": "devops_cg_status",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "code_generator_info_stat",
                    "label": "Stat",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_stat",
                    "action_name": "devops_cg_stat",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "code_generator_info_tree",
                    "label": "Tree",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_check_tree_addons",
                    "class_attr": "oe_highlight",
                    "action_name": "action_check_tree_addons",
                    "button_type": "oe_highlight",
                    "label": "Update tree",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_tree_addons",
                    "action_name": "devops_cg_tree_addons",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "log",
                    "label": "Log",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_cg_log_addons",
                    "action_name": "devops_cg_log_addons",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_plan_cg_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_plan_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_plan_cg_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_plan_cg_graph",
                    "view_attr_string": "Devops plan cg",
                    "m2o_model": model_devops_plan_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_plan_cg_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_plan_cg_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_plan_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_plan_cg_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_plan_cg_pivot",
                    "view_attr_string": "Devops plan cg",
                    "m2o_model": model_devops_plan_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_plan_cg_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_plan_cg_search",
                    "view_attr_string": "Devops plan cg",
                    "m2o_model": model_devops_plan_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_plan_cg_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_plan_cg_tree",
                    "m2o_model": model_devops_plan_cg.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_plan_cg_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_search_all",
                    "class_attr": "oe_highlight",
                    "action_name": "action_search_all",
                    "button_type": "oe_highlight",
                    "label": "Search ALL",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_refresh_db_image",
                    "action_name": "action_refresh_db_image",
                    "label": "Reload db image",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_search_workspace",
                    "action_name": "action_search_workspace",
                    "label": "Search workspace",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_search_vm",
                    "action_name": "action_search_vm",
                    "label": "Search VM",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_show_security_ssh_keygen",
                    "action_name": "action_show_security_ssh_keygen",
                    "label": "Show SSH key security",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "get_local_system_id_from_ssh_config",
                    "action_name": "get_local_system_id_from_ssh_config",
                    "label": "Search sub-system",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_install_dev_system",
                    "action_name": "action_install_dev_system",
                    "label": "Install dev system",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "html",
                    "class_attr": "bg-danger",
                    "attrs": "{'invisible': [('terminal', '!=', False)]}",
                    "background_type": "bg-danger",
                    "label": (
                        "The system need to select a validate terminal option"
                        " for a good execution."
                    ),
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Basic",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "method",
                    "action_name": "method",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "terminal",
                    "action_name": "terminal",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "keep_terminal_open",
                    "action_name": "keep_terminal_open",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_search_cmd",
                    "action_name": "use_search_cmd",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "debug_command",
                    "action_name": "debug_command",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Connected system",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "parent_system_id",
                    "action_name": "parent_system_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "sub_system_ids",
                    "action_name": "sub_system_ids",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "VM",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_deploy_vm_id",
                    "action_name": "devops_deploy_vm_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "attrs": "{'invisible': [('method', '!=', 'ssh')]}",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "html",
                    "class_attr": "bg-warning",
                    "background_type": "bg-warning",
                    "label": "Use SSH with caution!",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "SSH Settings",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_host_name",
                    "action_name": "ssh_host_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_host",
                    "action_name": "ssh_host",
                    "placeholder": "ssh.example.com",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_use_sshpass",
                    "action_name": "ssh_use_sshpass",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_port",
                    "action_name": "ssh_port",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_user",
                    "action_name": "ssh_user",
                    "placeholder": "john",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_password",
                    "action_name": "ssh_password",
                    "password": True,
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_private_key",
                    "action_name": "ssh_private_key",
                    "placeholder": "/home/odoo/.ssh/id_rsa",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_public_host_key",
                    "action_name": "ssh_public_host_key",
                    "placeholder": "AAAA...",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_connection_status",
                    "action_name": "ssh_connection_status",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_ssh_test_connection",
                    "action_name": "action_ssh_test_connection",
                    "icon": "fa-television",
                    "label": "Test SSH Connection",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Information",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "erplibre_config_path_home_ids",
                    "action_name": "erplibre_config_path_home_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_workspace_ids",
                    "action_name": "devops_workspace_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops.system form",
                    "m2o_model": model_devops_system.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_system_conf_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_system_graph",
                    "view_attr_string": "Devops system",
                    "m2o_model": model_devops_system.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_system_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_status",
                    "action_name": "system_status",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_deploy_vm_id",
                    "action_name": "devops_deploy_vm_id",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.system_status.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.system_status.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_vm_power",
                    "class_attr": "oe_button bg-success",
                    "attrs": "{'invisible':['|',('devops_deploy_vm_id','=',False),('system_status','=',True)]}",
                    "action_name": "action_vm_power",
                    "icon": "fa-refresh",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_button_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "class_attr": "fa fa-fw o_button_icon fa-power-off",
                    "parent_id": view_item_body_button_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_vm_power",
                    "class_attr": "oe_button bg-danger",
                    "attrs": "{'invisible':['|',('devops_deploy_vm_id','=',False),('system_status','=',False)]}",
                    "action_name": "action_vm_power",
                    "icon": "fa-refresh",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_button_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "class_attr": "fa fa-fw o_button_icon fa-power-off",
                    "parent_id": view_item_body_button_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_search_all",
                    "class_attr": "oe_button bg-success",
                    "attrs": "{'invisible':[('system_status','=',False)]}",
                    "action_name": "action_search_all",
                    "icon": "fa-refresh",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_button_p5.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "class_attr": "fa fa-fw o_button_icon fa-refresh",
                    "parent_id": view_item_body_button_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_system_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_system.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_system_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_system_pivot",
                    "view_attr_string": "Devops system",
                    "m2o_model": model_devops_system.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_system_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_host",
                    "action_name": "ssh_host",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "method",
                    "context": "{'group_by':'method'}",
                    "label": "Method",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "parent_system_id",
                    "context": "{'group_by':'parent_system_id'}",
                    "label": "Parent system",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "terminal",
                    "context": "{'group_by':'terminal'}",
                    "label": "Terminal",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "use_search_cmd",
                    "context": "{'group_by':'use_search_cmd'}",
                    "label": "Searching command",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "path_home",
                    "context": "{'group_by':'path_home'}",
                    "label": "Path home",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops.system search",
                    "m2o_model": model_devops_system.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_system_conf_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_connection_status",
                    "action_name": "ssh_connection_status",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ssh_host",
                    "action_name": "ssh_host",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "method",
                    "action_name": "method",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "terminal",
                    "action_name": "terminal",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "use_search_cmd",
                    "action_name": "use_search_cmd",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops.system tree",
                    "m2o_model": model_devops_system.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_system_conf_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_plan_id",
                    "action_name": "test_plan_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_cb_method_name",
                    "action_name": "test_cb_method_name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_cb_method_cg_id",
                    "action_name": "test_cb_method_cg_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "note",
                    "action_name": "note",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_test_case_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_test_case_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_test_case_graph",
                    "view_attr_string": "Devops test case",
                    "m2o_model": model_devops_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_test_case_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_test_case_pivot",
                    "view_attr_string": "Devops test case",
                    "m2o_model": model_devops_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_test_case_search",
                    "view_attr_string": "Devops test case",
                    "m2o_model": model_devops_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_test_case_tree",
                    "m2o_model": model_devops_test_case.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_devops_action",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('has_devops_action', '=', False)]}"
                    ),
                    "action_name": "open_devops_action",
                    "button_type": "oe_highlight",
                    "label": "Run into new action",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_new_test_plan_execution",
                    "class_attr": "oe_highlight",
                    "action_name": "open_new_test_plan_execution",
                    "button_type": "oe_highlight",
                    "label": "Open new testplan",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_devops_action",
                    "invisible": "True",
                    "action_name": "has_devops_action",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_finish",
                    "action_name": "is_finish",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_pass",
                    "action_name": "is_pass",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_plan_exec_id",
                    "action_name": "test_plan_exec_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "result_ids",
                    "action_name": "result_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_case_id",
                    "action_name": "test_case_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Log",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_html",
                    "action_name": "log_html",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_test_case_exec_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_test_case_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_exec_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_test_case_exec_graph",
                    "view_attr_string": "Devops test case exec",
                    "m2o_model": model_devops_test_case_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_exec_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_test_case_exec_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_test_case_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_exec_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_test_case_exec_pivot",
                    "view_attr_string": "Devops test case exec",
                    "m2o_model": model_devops_test_case_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_exec_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_finish",
                    "context": "{'group_by':'is_finish'}",
                    "label": "Is finish",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_pass",
                    "context": "{'group_by':'is_pass'}",
                    "label": "Is pass",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "test_plan_exec_id",
                    "context": "{'group_by':'test_plan_exec_id'}",
                    "label": "Test plan exec",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "test_case_id",
                    "context": "{'group_by':'test_case_id'}",
                    "label": "Test case",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "workspace_id",
                    "context": "{'group_by':'workspace_id'}",
                    "label": "Workspace",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_test_case_exec_search",
                    "view_attr_string": "Devops test case exec",
                    "m2o_model": model_devops_test_case_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_exec_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_finish",
                    "action_name": "is_finish",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_pass",
                    "action_name": "is_pass",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_test_case_exec_tree",
                    "m2o_model": model_devops_test_case_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_case_exec_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Information",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_case_ids",
                    "action_name": "test_case_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Result",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_plan_exec_ids",
                    "action_name": "test_plan_exec_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_test_plan_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_test_plan.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "devops_test_plan_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_test_plan_graph",
                    "view_attr_string": "Devops test plan",
                    "m2o_model": model_devops_test_plan.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_test_plan_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_test_plan.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_test_plan_pivot",
                    "view_attr_string": "Devops test plan",
                    "m2o_model": model_devops_test_plan.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_test_plan_search",
                    "view_attr_string": "Devops test plan",
                    "m2o_model": model_devops_test_plan.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_test_plan_tree",
                    "m2o_model": model_devops_test_plan.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_execute_test",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('execution_is_launched', '=', True)]}"
                    ),
                    "action_name": "action_execute_test",
                    "button_type": "oe_highlight",
                    "label": "Execute",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_rerun_fail_testcase",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|','|',('execution_is_launched', '=',"
                        " False),('execution_is_finished', '=',"
                        " False),('global_success', '=', True)]}"
                    ),
                    "action_name": "action_rerun_fail_testcase",
                    "button_type": "oe_highlight",
                    "label": "Rerun failed test only",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_configuration",
                    "invisible": "True",
                    "action_name": "has_configuration",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Information",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Status execution",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "global_success",
                    "action_name": "global_success",
                    "label": "Global PASS",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_is_launched",
                    "action_name": "execution_is_launched",
                    "label": "Launched",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_is_finished",
                    "action_name": "execution_is_finished",
                    "label": "Finished",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_id",
                    "action_name": "exec_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_start_date",
                    "action_name": "exec_start_date",
                    "label": "Start",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_stop_date",
                    "action_name": "exec_stop_date",
                    "label": "End",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "time_exec_time_duration",
                    "action_name": "time_exec_time_duration",
                    "label": "Duration",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Test",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_plan_id",
                    "options": '{"no_create": True}',
                    "action_name": "test_plan_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_case_ids",
                    "attrs": "{'invisible': [('test_plan_id', '!=', False)]}",
                    "action_name": "test_case_ids",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": (
                        "{'invisible': [('has_configuration', '=', False)]}"
                    ),
                    "label": "Configuration",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "coverage",
                    "action_name": "coverage",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "keep_cache",
                    "action_name": "keep_cache",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "no_parallel",
                    "action_name": "no_parallel",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "debug",
                    "action_name": "debug",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ignore_init_check_git",
                    "action_name": "ignore_init_check_git",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "run_in_sandbox",
                    "action_name": "run_in_sandbox",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "max_process",
                    "action_name": "max_process",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Execution",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_ids",
                    "action_name": "exec_ids",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Result",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "result_ids",
                    "action_name": "result_ids",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "attrs": "{'invisible': [('summary', '=', False)]}",
                    "label": "Summary",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "summary",
                    "action_name": "summary",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Log",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_html",
                    "action_name": "log_html",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_test_plan_exec_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_test_plan_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_exec_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_test_plan_exec_graph",
                    "view_attr_string": "Devops test plan exec",
                    "m2o_model": model_devops_test_plan_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_exec_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "global_success",
                    "action_name": "global_success",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.global_success.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.global_success.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_test_plan_exec_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_test_plan_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_exec_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_test_plan_exec_pivot",
                    "view_attr_string": "Devops test plan exec",
                    "m2o_model": model_devops_test_plan_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_exec_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_test_plan_exec_search",
                    "view_attr_string": "Devops test plan exec",
                    "m2o_model": model_devops_test_plan_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_exec_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "global_success",
                    "action_name": "global_success",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_is_launched",
                    "action_name": "execution_is_launched",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "execution_is_finished",
                    "action_name": "execution_is_finished",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_test_plan_exec_tree",
                    "m2o_model": model_devops_test_plan_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_plan_exec_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_devops_action",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('has_devops_action', '=', False)]}"
                    ),
                    "action_name": "open_devops_action",
                    "button_type": "oe_highlight",
                    "label": "Run into new action",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "open_new_test_plan_execution",
                    "class_attr": "oe_highlight",
                    "action_name": "open_new_test_plan_execution",
                    "button_type": "oe_highlight",
                    "label": "Open new testplan",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_devops_action",
                    "invisible": "True",
                    "action_name": "has_devops_action",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_finish",
                    "action_name": "is_finish",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_pass",
                    "action_name": "is_pass",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_case_exec_id",
                    "action_name": "test_case_exec_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "test_plan_exec_id",
                    "action_name": "test_plan_exec_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "label": "Log",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_html",
                    "action_name": "log_html",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops_test_result_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_devops_test_result.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_result_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_test_result_graph",
                    "view_attr_string": "Devops test result",
                    "m2o_model": model_devops_test_result.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_result_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_test_result_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_test_result.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_result_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_test_result_pivot",
                    "view_attr_string": "Devops test result",
                    "m2o_model": model_devops_test_result.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_result_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_finish",
                    "context": "{'group_by':'is_finish'}",
                    "label": "Is finish",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_pass",
                    "context": "{'group_by':'is_pass'}",
                    "label": "Is pass",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops_test_result_search",
                    "view_attr_string": "Devops test result",
                    "m2o_model": model_devops_test_result.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_result_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "date_log",
                    "action_name": "date_log",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "time_duration_seconds",
                    "action_name": "time_duration_seconds",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_finish",
                    "action_name": "is_finish",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_pass",
                    "action_name": "is_pass",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops_test_result_tree",
                    "m2o_model": model_devops_test_result.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_test_result_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_plan_action_action)d",
                    "context": (
                        "{'default_root_workspace_id': id, 'default_user_id':"
                        " uid}"
                    ),
                    "class_attr": "btn btn-secondary",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True), ('is_me', '=',"
                        " False)]}"
                    ),
                    "action_name": (
                        "%(erplibre_devops.devops_plan_action_action)d"
                    ),
                    "button_type": "btn-secondary",
                    "binding_type": "action",
                    "label": "Action",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_install_workspace",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', True),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_install_workspace",
                    "button_type": "oe_highlight",
                    "label": "Install",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_install_me_workspace",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', True),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_install_me_workspace",
                    "button_type": "oe_highlight",
                    "label": "Me",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_check",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_check",
                    "button_type": "oe_highlight",
                    "label": "Status",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', '|', ('is_installed', '=',"
                        " False), ('is_running', '=', True),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_start",
                    "button_type": "oe_highlight",
                    "label": "Start",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start",
                    "class_attr": "btn-success",
                    "attrs": (
                        "{'invisible': ['|', '|', ('is_installed', '=',"
                        " False), ('is_running', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_start",
                    "button_type": "btn-success",
                    "label": "Start",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_stop",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', '|', ('is_installed', '=',"
                        " False), ('is_running', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_stop",
                    "button_type": "oe_highlight",
                    "label": "Stop",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_stop",
                    "class_attr": "btn-success",
                    "attrs": (
                        "{'invisible': ['|', '|', ('is_installed', '=',"
                        " False), ('is_running', '=', True),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_stop",
                    "button_type": "btn-success",
                    "label": "Stop",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_reboot",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_reboot",
                    "button_type": "oe_highlight",
                    "label": "Reboot",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_reboot",
                    "context": "{'default_exec_reboot_process': True}",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_reboot",
                    "button_type": "oe_highlight",
                    "label": "Hard Reboot",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_update",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_update",
                    "button_type": "oe_highlight",
                    "label": "Update",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_open_local_view",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_open_local_view",
                    "button_type": "oe_highlight",
                    "label": "Open browser",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_parse_code",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('is_installed', '=', False),"
                        " ('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "action_name": "action_parse_code",
                    "button_type": "oe_highlight",
                    "label": "Parse code",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_install_workspace",
                    "context": "{'force_reinstall_workspace': True}",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "groups": "base.group_no_one",
                    "action_name": "action_install_workspace",
                    "button_type": "oe_highlight",
                    "label": "Re-install",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_install_workspace",
                    "context": (
                        "{'force_reinstall_workspace': True,"
                        " 'install_dev_workspace': True}"
                    ),
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('is_conflict_mode_exec', '=', True)]}"
                    ),
                    "groups": "base.group_no_one",
                    "action_name": "action_install_workspace",
                    "button_type": "oe_highlight",
                    "label": "Re-install full",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_clear_error_exec",
                    "class_attr": "btn-danger",
                    "attrs": (
                        "{'invisible': ['|', ('devops_exec_error_count', '==',"
                        " 0), ('is_installed', '=', False)]}"
                    ),
                    "action_name": "action_clear_error_exec",
                    "button_type": "btn-danger",
                    "label": "Clear error exec",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "badge-pill badge-success float-right",
                    "attrs": "{'invisible': [('is_me', '=', False)]}",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "#text",
                    "inner_text": "Same instance",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_div_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "name": "button_box",
                    "class_attr": "oe_button_box",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_div_p1.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "toggle_active",
                    "class_attr": "oe_stat_button",
                    "action_name": "toggle_active",
                    "button_type": "oe_stat_button",
                    "icon": "fa-archive",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "active",
                    "widget": "boolean_button",
                    "options": '{"terminology": "archive"}',
                    "action_name": "active",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_exec_action_window)d",
                    "context": (
                        "{'search_default_devops_workspace': active_id,"
                        " 'search_default_group_devops_exec_bundle_id': 1}"
                    ),
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('devops_exec_count', '==', 0)]}",
                    "action_name": (
                        "%(erplibre_devops.devops_exec_action_window)d"
                    ),
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_count",
                    "widget": "statinfo",
                    "action_name": "devops_exec_count",
                    "label": "Executions",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_test_plan_exec_test_plan_exec_action_window)d",
                    "context": "{'search_default_workspace_id': active_id}",
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('devops_test_plan_exec_count', '==',"
                        " 0)]}"
                    ),
                    "action_name": "%(erplibre_devops.devops_test_plan_exec_test_plan_exec_action_window)d",
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_test_plan_exec_count",
                    "widget": "statinfo",
                    "action_name": "devops_test_plan_exec_count",
                    "label": "Test plan executions",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_code_todo_code_todo_action_window)d",
                    "context": "{'search_default_workspace_id': active_id}",
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('devops_code_todo_count', '==', 0)]}"
                    ),
                    "action_name": "%(erplibre_devops.devops_code_todo_code_todo_action_window)d",
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_code_todo_count",
                    "widget": "statinfo",
                    "action_name": "devops_code_todo_count",
                    "label": "Code TODO",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_test_result_test_result_action_window)d",
                    "context": "{'search_default_workspace_id': active_id}",
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('devops_test_result_count', '==',"
                        " 0)]}"
                    ),
                    "action_name": "%(erplibre_devops.devops_test_result_test_result_action_window)d",
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_test_result_count",
                    "widget": "statinfo",
                    "action_name": "devops_test_result_count",
                    "label": "Test results",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_plan_cg_plan_cg_action_window)d",
                    "context": "{'search_default_workspace_id': active_id}",
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('plan_cg_count', '==', 0)]}",
                    "action_name": "%(erplibre_devops.devops_plan_cg_plan_cg_action_window)d",
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "plan_cg_count",
                    "widget": "statinfo",
                    "action_name": "plan_cg_count",
                    "label": "Plans CG",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": (
                        "%(erplibre_devops.devops_exec_error_action_window)d"
                    ),
                    "context": (
                        "{'search_default_devops_workspace': active_id}"
                    ),
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('devops_exec_error_count', '==', 0)]}"
                    ),
                    "action_name": (
                        "%(erplibre_devops.devops_exec_error_action_window)d"
                    ),
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_error_count",
                    "widget": "statinfo",
                    "action_name": "devops_exec_error_count",
                    "label": "Errors",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": (
                        "%(erplibre_devops.devops_new_project_action_window)d"
                    ),
                    "context": (
                        "{'search_default_devops_workspace': active_id}"
                    ),
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('new_project_count', '==', 0)]}",
                    "action_name": (
                        "%(erplibre_devops.devops_new_project_action_window)d"
                    ),
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "new_project_count",
                    "widget": "statinfo",
                    "action_name": "new_project_count",
                    "label": "Generations",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": (
                        "%(erplibre_devops.devops_exec_bundle_action_window)d"
                    ),
                    "context": (
                        "{'search_default_devops_workspace': active_id}"
                    ),
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('devops_exec_bundle_count', '==',"
                        " 0)]}"
                    ),
                    "action_name": (
                        "%(erplibre_devops.devops_exec_bundle_action_window)d"
                    ),
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_bundle_count",
                    "widget": "statinfo",
                    "action_name": "devops_exec_bundle_count",
                    "label": "Bundles",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_button_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": (
                        "%(erplibre_devops.devops_exec_bundle_action_window)d"
                    ),
                    "context": (
                        "{'search_default_devops_workspace': active_id,"
                        " 'search_default_root': 1}"
                    ),
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('devops_exec_bundle_root_count',"
                        " '==', 0)]}"
                    ),
                    "action_name": (
                        "%(erplibre_devops.devops_exec_bundle_action_window)d"
                    ),
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-building-o",
                    "parent_id": view_item_body_div_p1.id,
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_button_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_bundle_root_count",
                    "widget": "statinfo",
                    "action_name": "devops_exec_bundle_root_count",
                    "label": "Bundles root",
                    "parent_id": view_item_body_button_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "html",
                    "class_attr": "bg-danger",
                    "attrs": (
                        "{'invisible': [('is_conflict_mode_exec', '=',"
                        " False)]}"
                    ),
                    "background_type": "bg-danger",
                    "label": (
                        "Cannot support this execution mode with source mode"
                        " 'docker'."
                    ),
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_conflict_mode_exec",
                    "invisible": "True",
                    "action_name": "is_conflict_mode_exec",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_installed",
                    "invisible": "True",
                    "action_name": "is_installed",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_running",
                    "invisible": "True",
                    "action_name": "is_running",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_me",
                    "invisible": "True",
                    "action_name": "is_me",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_robot",
                    "invisible": "True",
                    "action_name": "is_robot",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "mode_exec",
                    "invisible": "True",
                    "action_name": "mode_exec",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Basic",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_id",
                    "action_name": "system_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "folder",
                    "action_name": "folder",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "erplibre_mode",
                    "action_name": "erplibre_mode",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Execution",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_debug_log",
                    "action_name": "is_debug_log",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "show_error_chatter",
                    "action_name": "show_error_chatter",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "exec_reboot_process",
                    "attrs": (
                        "{'invisible': ['|', ('mode_exec', '=', 'docker'),"
                        " ('is_me', '=', False)]}"
                    ),
                    "action_name": "exec_reboot_process",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": "{'invisible': [('is_installed', '=', False)]}",
                    "label": "Network",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_network_change_port_random",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': [('exec_reboot_process', '=', False)]}"
                    ),
                    "action_name": "action_network_change_port_random",
                    "button_type": "oe_highlight",
                    "label": "Random port",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_network_change_port_default",
                    "class_attr": "oe_highlight",
                    "attrs": (
                        "{'invisible': ['|', ('exec_reboot_process', '=',"
                        " False), ('is_me', '=', False)]}"
                    ),
                    "action_name": "action_network_change_port_default",
                    "button_type": "oe_highlight",
                    "label": "Default port",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "port_http",
                    "attrs": (
                        "{'readonly': [('exec_reboot_process', '=', False)]}"
                    ),
                    "action_name": "port_http",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "port_longpolling",
                    "attrs": (
                        "{'readonly': [('exec_reboot_process', '=', False)]}"
                    ),
                    "action_name": "port_longpolling",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Git",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "git_branch",
                    "action_name": "git_branch",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "git_url",
                    "action_name": "git_url",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": "{'invisible': [('is_installed', '=', False)]}",
                    "label": "Info",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "url_instance",
                    "widget": "url",
                    "action_name": "url_instance",
                    "label": "URL",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "url_instance_database_manager",
                    "widget": "url",
                    "action_name": "url_instance_database_manager",
                    "label": "URL Database",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": "{'invisible': [('is_installed', '=', False)]}",
                    "label": "DB",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_restore_db_image",
                    "class_attr": "oe_highlight",
                    "action_name": "action_restore_db_image",
                    "button_type": "oe_highlight",
                    "label": "Restore",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "image_db_selection",
                    "action_name": "image_db_selection",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "db_name",
                    "action_name": "db_name",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "attrs": "{'invisible': [('is_installed', '=', False)]}",
                    "label": "Docker",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_docker_id",
                    "action_name": "workspace_docker_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Action",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_terminal",
                    "class_attr": "oe_highlight",
                    "action_name": "action_open_terminal",
                    "button_type": "oe_highlight",
                    "label": "Terminal",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_directory",
                    "class_attr": "oe_highlight",
                    "action_name": "action_open_directory",
                    "button_type": "oe_highlight",
                    "label": "Open directory",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "IDE",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "ide_pycharm",
                    "action_name": "ide_pycharm",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_notebook_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "notebook",
                    "attrs": "{'invisible': [('is_installed', '=', False)]}",
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item_body_notebook_p1.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "status",
                    "label": "Status",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Instance",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "db_is_restored",
                    "action_name": "db_is_restored",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "has_error_restore_db",
                    "action_name": "has_error_restore_db",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "code_generator",
                    "label": "Code",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "plan_cg_ids",
                    "action_name": "plan_cg_ids",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "makefile",
                    "label": "Makefile",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_makefile_target_ids",
                    "action_name": "log_makefile_target_ids",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "log",
                    "label": "Log",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "log_workspace",
                    "action_name": "log_workspace",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "install",
                    "label": "Install",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item_body_group_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p3.id)

            view_item_body_group_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p4.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_poetry_install",
                    "class_attr": "oe_highlight",
                    "action_name": "action_poetry_install",
                    "button_type": "oe_highlight",
                    "label": "Poetry install",
                    "parent_id": view_item_body_group_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "exec",
                    "label": "Execution",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_ids",
                    "action_name": "devops_exec_ids",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "exec_bundle",
                    "label": "Bundle exec",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_bundle_root_ids",
                    "action_name": "devops_exec_bundle_root_ids",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_page_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "page",
                    "name": "exec_error",
                    "label": "Error exec",
                    "parent_id": view_item_body_notebook_p1.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_page_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "devops_exec_error_ids",
                    "action_name": "devops_exec_error_ids",
                    "parent_id": view_item_body_page_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops.workspace form",
                    "view_attr_string": "DevOps Workspace",
                    "m2o_model": model_devops_workspace.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_conf_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "devops_workspace_graph",
                    "view_attr_string": "Devops workspace",
                    "m2o_model": model_devops_workspace.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_workspace_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_installed",
                    "action_name": "is_installed",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_me",
                    "action_name": "is_me",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_robot",
                    "action_name": "is_robot",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_running",
                    "action_name": "is_running",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.is_installed.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.is_installed.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.is_me.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.is_me.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.is_robot.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.is_robot.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "record.is_running.raw_value",
                    "class_attr": "text-success float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Ok",
                    "aria_label": "Ok",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "t_if": "!record.is_running.raw_value",
                    "class_attr": "text-danger float-right mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "i",
                    "title": "Invalid",
                    "aria_label": "Invalid",
                    "role": "img",
                    "class_attr": "fa fa-circle",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "devops_workspace_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_devops_workspace.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_workspace_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "devops_workspace_pivot",
                    "view_attr_string": "Devops workspace",
                    "m2o_model": model_devops_workspace.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "devops_workspace_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "folder",
                    "action_name": "folder",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_me",
                    "domain": "[('is_me','=',True)]",
                    "label": "Is me",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "is_robot",
                    "domain": "[('is_robot','=',True)]",
                    "label": "Is robot",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "expand": "1",
                    "label": "Group By",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "system_id",
                    "context": "{'group_by':'system_id'}",
                    "label": "System",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "folder",
                    "context": "{'group_by':'folder'}",
                    "label": "Folder",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "db_name",
                    "context": "{'group_by':'db_name'}",
                    "label": "Database name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "db_is_restored",
                    "context": "{'group_by':'db_is_restored'}",
                    "label": "DB is restored",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops.workspace search",
                    "m2o_model": model_devops_workspace.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_conf_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_method",
                    "invisible": "True",
                    "action_name": "system_method",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "folder",
                    "action_name": "folder",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "system_id",
                    "action_name": "system_id",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "erplibre_mode",
                    "action_name": "erplibre_mode",
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_me",
                    "action_name": "is_me",
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_robot",
                    "action_name": "is_robot",
                    "sequence": 7,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_installed",
                    "action_name": "is_installed",
                    "sequence": 8,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_running",
                    "action_name": "is_running",
                    "sequence": 9,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "%(erplibre_devops.devops_plan_action_action)d",
                    "context": (
                        "{'default_root_workspace_id': id, 'default_user_id':"
                        " uid}"
                    ),
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('is_me', '=', False)]}",
                    "help": "Plan action wizard",
                    "action_name": (
                        "%(erplibre_devops.devops_plan_action_action)d"
                    ),
                    "button_type": "oe_stat_button",
                    "binding_type": "action",
                    "icon": "fa-star",
                    "sequence": 10,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_update",
                    "class_attr": "oe_stat_button",
                    "attrs": "{'invisible': [('is_me', '=', False)]}",
                    "help": "Update erplibre_devops, can crash...",
                    "action_name": "action_update",
                    "button_type": "oe_stat_button",
                    "icon": "fa-level-up",
                    "sequence": 11,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_reboot",
                    "class_attr": "oe_stat_button bg-success",
                    "attrs": "{'invisible': [('is_me', '=', False)]}",
                    "help": "Soft reboot",
                    "action_name": "action_reboot",
                    "button_type": "oe_stat_button",
                    "icon": "fa-refresh",
                    "sequence": 12,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_workspace_pycharm",
                    "class_attr": "oe_stat_button",
                    "attrs": (
                        "{'invisible': [('system_method', '!=', 'local')]}"
                    ),
                    "action_name": "action_open_workspace_pycharm",
                    "button_type": "oe_stat_button",
                    "icon": "fa-code",
                    "sequence": 13,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_terminal",
                    "class_attr": "oe_stat_button",
                    "action_name": "action_open_terminal",
                    "button_type": "oe_stat_button",
                    "icon": "fa-terminal",
                    "sequence": 14,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_directory",
                    "class_attr": "oe_stat_button",
                    "action_name": "action_open_directory",
                    "button_type": "oe_stat_button",
                    "icon": "fa-folder",
                    "sequence": 15,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_open_local_view",
                    "class_attr": "oe_stat_button",
                    "action_name": "action_open_local_view",
                    "button_type": "oe_stat_button",
                    "icon": "fa-desktop",
                    "sequence": 16,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "button",
                    "name": "action_reboot",
                    "context": "{'default_exec_reboot_process': True}",
                    "class_attr": "oe_stat_button bg-danger",
                    "action_name": "action_reboot",
                    "button_type": "oe_stat_button",
                    "icon": "fa-refresh",
                    "sequence": 17,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops.workspace tree",
                    "m2o_model": model_devops_workspace.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_conf_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # HEADER
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_start_docker_compose",
                    "class_attr": "oe_highlight",
                    "action_name": "action_start_docker_compose",
                    "button_type": "oe_highlight",
                    "label": "Run docker-compose",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_stop_docker_compose",
                    "class_attr": "oe_highlight",
                    "action_name": "action_stop_docker_compose",
                    "button_type": "oe_highlight",
                    "label": "Stop docker-compose",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_open_terminal_docker",
                    "class_attr": "oe_highlight",
                    "action_name": "action_open_terminal_docker",
                    "button_type": "oe_highlight",
                    "label": "Terminal docker",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_docker_logs",
                    "class_attr": "oe_highlight",
                    "action_name": "action_docker_logs",
                    "button_type": "oe_highlight",
                    "label": "Docker logs",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_docker_install_dev_soft",
                    "class_attr": "oe_highlight",
                    "action_name": "action_docker_install_dev_soft",
                    "button_type": "oe_highlight",
                    "label": "Docker install dev",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_os_user_permission_docker",
                    "class_attr": "btn-danger",
                    "attrs": (
                        "{'invisible': [('docker_initiate_succeed', '=',"
                        " True)]}"
                    ),
                    "action_name": "action_os_user_permission_docker",
                    "button_type": "btn-danger",
                    "label": "Give docker permission",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "header",
                    "item_type": "button",
                    "name": "action_analyse_docker_image",
                    "class_attr": "oe_highlight",
                    "action_name": "action_analyse_docker_image",
                    "button_type": "oe_highlight",
                    "label": "Analyse docker image",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_initiate_succeed",
                    "invisible": "True",
                    "action_name": "docker_initiate_succeed",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Status instance",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_is_running",
                    "action_name": "docker_is_running",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Configuration",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "force_create_docker_compose",
                    "action_name": "force_create_docker_compose",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_version",
                    "action_name": "docker_version",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_cmd_extra",
                    "action_name": "docker_cmd_extra",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_nb_proc",
                    "action_name": "docker_nb_proc",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_is_behind_proxy",
                    "action_name": "docker_is_behind_proxy",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 5,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_config_gen_cg",
                    "action_name": "docker_config_gen_cg",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 6,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Log",
                    "sequence": 4,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "docker_compose_ps",
                    "action_name": "docker_compose_ps",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops.workspace.docker form",
                    "m2o_model": model_devops_workspace_docker.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_docker_conf_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops.workspace.docker search",
                    "m2o_model": model_devops_workspace_docker.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_docker_conf_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops.workspace.docker tree",
                    "m2o_model": model_devops_workspace_docker.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_docker_conf_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # TITLE
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "title",
                    "item_type": "field",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Global",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "workspace_id",
                    "action_name": "workspace_id",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_group_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "label": "Status instance",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_group_p2.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "terminal_is_running",
                    "action_name": "terminal_is_running",
                    "parent_id": view_item_body_group_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "devops.workspace.terminal form",
                    "m2o_model": model_devops_workspace_terminal.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_terminal_conf_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "devops.workspace.terminal search",
                    "m2o_model": model_devops_workspace_terminal.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_terminal_conf_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "devops.workspace.terminal tree",
                    "m2o_model": model_devops_workspace_terminal.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "view_devops_workspace_terminal_conf_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_config_path_home_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_config_path_home.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_config_path_home_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_config_path_home_graph",
                    "view_attr_string": "Erplibre config path home",
                    "m2o_model": model_erplibre_config_path_home.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_config_path_home_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_config_path_home_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_config_path_home.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_config_path_home_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_config_path_home_pivot",
                    "view_attr_string": "Erplibre config path home",
                    "m2o_model": model_erplibre_config_path_home.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_config_path_home_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_config_path_home_search",
                    "view_attr_string": "Erplibre config path home",
                    "m2o_model": model_erplibre_config_path_home.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_config_path_home_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_config_path_home_tree",
                    "m2o_model": model_erplibre_config_path_home.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_config_path_home_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_mode_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_mode.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_mode_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_mode_graph",
                    "view_attr_string": "Erplibre mode",
                    "m2o_model": model_erplibre_mode.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_mode_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_mode.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_mode_pivot",
                    "view_attr_string": "Erplibre mode",
                    "m2o_model": model_erplibre_mode.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_mode_search",
                    "view_attr_string": "Erplibre mode",
                    "m2o_model": model_erplibre_mode.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_mode_tree",
                    "m2o_model": model_erplibre_mode.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_mode_env_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_mode_env.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_mode_env_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_mode_env_graph",
                    "view_attr_string": "Erplibre mode env",
                    "m2o_model": model_erplibre_mode_env.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_env_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_mode_env_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_mode_env.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_env_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_mode_env_pivot",
                    "view_attr_string": "Erplibre mode env",
                    "m2o_model": model_erplibre_mode_env.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_env_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_mode_env_search",
                    "view_attr_string": "Erplibre mode env",
                    "m2o_model": model_erplibre_mode_env.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_env_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_mode_env_tree",
                    "m2o_model": model_erplibre_mode_env.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_env_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_mode_exec_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_mode_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_mode_exec_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_mode_exec_graph",
                    "view_attr_string": "Erplibre mode exec",
                    "m2o_model": model_erplibre_mode_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_exec_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_mode_exec_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_mode_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_exec_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_mode_exec_pivot",
                    "view_attr_string": "Erplibre mode exec",
                    "m2o_model": model_erplibre_mode_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_exec_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_mode_exec_search",
                    "view_attr_string": "Erplibre mode exec",
                    "m2o_model": model_erplibre_mode_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_exec_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_mode_exec_tree",
                    "m2o_model": model_erplibre_mode_exec.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_exec_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_mode_source_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_mode_source.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_mode_source_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_mode_source_graph",
                    "view_attr_string": "Erplibre mode source",
                    "m2o_model": model_erplibre_mode_source.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_source_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_mode_source_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_mode_source.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_source_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_mode_source_pivot",
                    "view_attr_string": "Erplibre mode source",
                    "m2o_model": model_erplibre_mode_source.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_source_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_mode_source_search",
                    "view_attr_string": "Erplibre mode source",
                    "m2o_model": model_erplibre_mode_source.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_source_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_mode_source_tree",
                    "m2o_model": model_erplibre_mode_source.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_source_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_tag",
                    "action_name": "is_tag",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_mode_version_base_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_mode_version_base.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_mode_version_base_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_mode_version_base_graph",
                    "view_attr_string": "Erplibre mode version base",
                    "m2o_model": model_erplibre_mode_version_base.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_base_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_mode_version_base_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_mode_version_base.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_base_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_mode_version_base_pivot",
                    "view_attr_string": "Erplibre mode version base",
                    "m2o_model": model_erplibre_mode_version_base.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_base_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_mode_version_base_search",
                    "view_attr_string": "Erplibre mode version base",
                    "m2o_model": model_erplibre_mode_version_base.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_base_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_tag",
                    "action_name": "is_tag",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_mode_version_base_tree",
                    "m2o_model": model_erplibre_mode_version_base.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_base_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # form view
        if True:
            lst_item_view = []
            # BODY
            view_item_body_group_p1 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "group",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_group_p1.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_tag",
                    "action_name": "is_tag",
                    "parent_id": view_item_body_group_p1.id,
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "form",
                    "view_name": "erplibre_mode_version_erplibre_form",
                    "view_attr_string": "Titre",
                    "m2o_model": model_erplibre_mode_version_erplibre.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "has_body_sheet": True,
                    "id_name": "erplibre_mode_version_erplibre_view_form",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # graph view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "graph",
                    "view_name": "erplibre_mode_version_erplibre_graph",
                    "view_attr_string": "Erplibre mode version erplibre",
                    "m2o_model": model_erplibre_mode_version_erplibre.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_erplibre_view_graph",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # kanban view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item_body_templates_p1 = env[
                "code.generator.view.item"
            ].create(
                {
                    "section_type": "body",
                    "item_type": "templates",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item_body_templates_p1.id)

            view_item_body_t_p2 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "t",
                    "t_name": "kanban-box",
                    "parent_id": view_item_body_templates_p1.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_t_p2.id)

            view_item_body_div_p3 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "t_attf_class": "oe_kanban_global_click",
                    "parent_id": view_item_body_t_p2.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p3.id)

            view_item_body_div_p4 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "div",
                    "class_attr": "oe_kanban_details",
                    "parent_id": view_item_body_div_p3.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_div_p4.id)

            view_item_body_ul_p5 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "ul",
                    "parent_id": view_item_body_div_p4.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_ul_p5.id)

            view_item_body_li_p6 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "li",
                    "class_attr": "mb4",
                    "parent_id": view_item_body_ul_p5.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_li_p6.id)

            view_item_body_strong_p7 = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "strong",
                    "parent_id": view_item_body_li_p6.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item_body_strong_p7.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "parent_id": view_item_body_strong_p7.id,
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "kanban",
                    "view_name": "erplibre_mode_version_erplibre_kanban",
                    "view_attr_class": "o_kanban_mobile",
                    "m2o_model": model_erplibre_mode_version_erplibre.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_erplibre_view_kanban",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # pivot view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "type": "row",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "pivot",
                    "view_name": "erplibre_mode_version_erplibre_pivot",
                    "view_attr_string": "Erplibre mode version erplibre",
                    "m2o_model": model_erplibre_mode_version_erplibre.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_erplibre_view_pivot",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # search view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "filter",
                    "name": "name",
                    "domain": "[('name','!=',False)]",
                    "label": "Name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "search",
                    "view_name": "erplibre_mode_version_erplibre_search",
                    "view_attr_string": "Erplibre mode version erplibre",
                    "m2o_model": model_erplibre_mode_version_erplibre.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_erplibre_view_search",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # tree view
        if True:
            lst_item_view = []
            # BODY
            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "name",
                    "action_name": "name",
                    "sequence": 1,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "value",
                    "action_name": "value",
                    "sequence": 2,
                }
            )
            lst_item_view.append(view_item.id)

            view_item = env["code.generator.view.item"].create(
                {
                    "section_type": "body",
                    "item_type": "field",
                    "name": "is_tag",
                    "action_name": "is_tag",
                    "sequence": 3,
                }
            )
            lst_item_view.append(view_item.id)

            view_code_generator = env["code.generator.view"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "view_type": "tree",
                    "view_name": "erplibre_mode_version_erplibre_tree",
                    "m2o_model": model_erplibre_mode_version_erplibre.id,
                    "view_item_ids": [(6, 0, lst_item_view)],
                    "id_name": "erplibre_mode_version_erplibre_view_tree",
                }
            )
            lst_view_id.append(view_code_generator.id)

        # act_window view
        if True:
            erplibre_devops_config_settings_action = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Settings",
                    "id_name": "erplibre_devops_config_settings_action",
                    "model_name": "res.config.settings",
                    "view_type": "form",
                    "view_mode": "form",
                    "target": "inline",
                }
            )

            devops_cg_code_generator_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code generator",
                    "id_name": "devops_cg_code_generator_action_window",
                    "model_name": "devops.cg",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_cg_module_code_generator_module_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code generator module",
                    "id_name": (
                        "devops_cg_module_code_generator_module_action_window"
                    ),
                    "model_name": "devops.cg.module",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_cg_model_code_generator_module_model_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code generator module model",
                    "id_name": "devops_cg_model_code_generator_module_model_action_window",
                    "model_name": "devops.cg.model",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_cg_field_code_generator_module_model_field_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code generator module model field",
                    "id_name": "devops_cg_field_code_generator_module_model_field_action_window",
                    "model_name": "devops.cg.field",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_new_project_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code generator new project",
                    "id_name": "devops_new_project_action_window",
                    "model_name": "devops.cg.new_project",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_ide_breakpoint_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IDE breakpoint",
                    "id_name": "devops_ide_breakpoint_action_window",
                    "model_name": "devops.ide.breakpoint",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_ide_pycharm_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IDE pycharm",
                    "id_name": "devops_ide_pycharm_action_window",
                    "model_name": "devops.ide.pycharm",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_log_makefile_target_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Db image",
                    "id_name": "devops_log_makefile_target_action_window",
                    "model_name": "devops.log.makefile.target",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_code_todo_code_todo_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code todo",
                    "id_name": "devops_code_todo_code_todo_action_window",
                    "model_name": "devops.code.todo",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_deploy_vm_exec_stage_deploy_vm_exec_stage_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Deploy vm exec stage",
                    "id_name": "devops_deploy_vm_exec_stage_deploy_vm_exec_stage_action_window",
                    "model_name": "devops.deploy.vm.exec.stage",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_cg_new_project_stage_action = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Stages",
                    "id_name": "devops_cg_new_project_stage_action",
                    "model_name": "devops.cg.new_project.stage",
                    "view_type": "form",
                    "view_mode": "tree,form",
                }
            )

            devops_db_image_db_image_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Db image",
                    "id_name": "devops_db_image_db_image_action_window",
                    "model_name": "devops.db.image",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_deploy_vm_deploy_vm_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Deploy vm",
                    "id_name": "devops_deploy_vm_deploy_vm_action_window",
                    "model_name": "devops.deploy.vm",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_deploy_vm_exec_deploy_vm_exec_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Deploy vm exec",
                    "id_name": (
                        "devops_deploy_vm_exec_deploy_vm_exec_action_window"
                    ),
                    "model_name": "devops.deploy.vm.exec",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_deploy_vm_snapshot_deploy_vm_snapshot_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Deploy vm snapshot",
                    "id_name": "devops_deploy_vm_snapshot_deploy_vm_snapshot_action_window",
                    "model_name": "devops.deploy.vm.snapshot",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_exec_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IT executions",
                    "id_name": "devops_exec_action_window",
                    "model_name": "devops.exec",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_exec_bundle_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IT executions bundle",
                    "id_name": "devops_exec_bundle_action_window",
                    "model_name": "devops.exec.bundle",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            devops_exec_error_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IT executions",
                    "id_name": "devops_exec_error_action_window",
                    "model_name": "devops.exec.error",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            erplibre_config_path_home_config_path_home_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Config path home",
                    "id_name": "erplibre_config_path_home_config_path_home_action_window",
                    "model_name": "erplibre.config.path.home",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            erplibre_mode_env_mode_env_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode env",
                    "id_name": "erplibre_mode_env_mode_env_action_window",
                    "model_name": "erplibre.mode.env",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            erplibre_mode_exec_mode_exec_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode exec",
                    "id_name": "erplibre_mode_exec_mode_exec_action_window",
                    "model_name": "erplibre.mode.exec",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            erplibre_mode_mode_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode",
                    "id_name": "erplibre_mode_mode_action_window",
                    "model_name": "erplibre.mode",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            erplibre_mode_source_mode_source_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode source",
                    "id_name": (
                        "erplibre_mode_source_mode_source_action_window"
                    ),
                    "model_name": "erplibre.mode.source",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            erplibre_mode_version_base_mode_version_base_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode version base",
                    "id_name": "erplibre_mode_version_base_mode_version_base_action_window",
                    "model_name": "erplibre.mode.version.base",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            erplibre_mode_version_erplibre_mode_version_erplibre_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode version erplibre",
                    "id_name": "erplibre_mode_version_erplibre_mode_version_erplibre_action_window",
                    "model_name": "erplibre.mode.version.erplibre",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_plan_cg_plan_cg_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Plan cg",
                    "id_name": "devops_plan_cg_plan_cg_action_window",
                    "model_name": "devops.plan.cg",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            action_devops_check_system_conf_form = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Automated devops_systems",
                    "id_name": "action_devops_check_system_conf_form",
                    "model_name": "devops.system",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_test_case_test_case_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test case",
                    "id_name": "devops_test_case_test_case_action_window",
                    "model_name": "devops.test.case",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_cg_test_case_cg_test_case_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Cg test case",
                    "id_name": (
                        "devops_cg_test_case_cg_test_case_action_window"
                    ),
                    "model_name": "devops.cg.test.case",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_test_case_exec_test_case_exec_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test case exec",
                    "id_name": (
                        "devops_test_case_exec_test_case_exec_action_window"
                    ),
                    "model_name": "devops.test.case.exec",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_test_plan_test_plan_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test plan",
                    "id_name": "devops_test_plan_test_plan_action_window",
                    "model_name": "devops.test.plan",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_test_plan_exec_test_plan_exec_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test plan exec",
                    "id_name": (
                        "devops_test_plan_exec_test_plan_exec_action_window"
                    ),
                    "model_name": "devops.test.plan.exec",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            devops_test_result_test_result_action_window = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test result",
                    "id_name": "devops_test_result_test_result_action_window",
                    "model_name": "devops.test.result",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            action_devops_check_workspace_docker_conf_form = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Automated devops_workspace_docker",
                    "id_name": (
                        "action_devops_check_workspace_docker_conf_form"
                    ),
                    "model_name": "devops.workspace.docker",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

            action_devops_check_workspace_conf_form = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Automated devops_workspaces",
                    "id_name": "action_devops_check_workspace_conf_form",
                    "model_name": "devops.workspace",
                    "view_type": "form",
                    "view_mode": "tree,kanban,pivot,graph,form",
                }
            )

            action_devops_check_workspace_terminal_conf_form = env[
                "code.generator.act_window"
            ].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Automated devops_workspace_terminal",
                    "id_name": (
                        "action_devops_check_workspace_terminal_conf_form"
                    ),
                    "model_name": "devops.workspace.terminal",
                    "view_type": "form",
                    "view_mode": "kanban,tree,pivot,graph,form",
                }
            )

        # menu view
        if True:
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Settings",
                    "id_name": "erplibre_devops_config_settings_menu_action",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_config",
                    "m2o_act_window": erplibre_devops_config_settings_action.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Build",
                    "id_name": "menu_build",
                    "sequence": 5,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code",
                    "id_name": "menu_code",
                    "sequence": 4,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "CG",
                    "id_name": "menu_code_cg",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_code",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Project",
                    "id_name": "menu_code_generator",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_code_cg",
                    "m2o_act_window": devops_cg_code_generator_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Module",
                    "id_name": "menu_code_generator_module",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_code_cg",
                    "m2o_act_window": devops_cg_module_code_generator_module_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Model",
                    "id_name": "menu_code_generator_module_model",
                    "sequence": 4,
                    "parent_id_name": "erplibre_devops.menu_code_cg",
                    "m2o_act_window": devops_cg_model_code_generator_module_model_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Field",
                    "id_name": "menu_code_generator_module_model_field",
                    "sequence": 5,
                    "parent_id_name": "erplibre_devops.menu_code_cg",
                    "m2o_act_window": devops_cg_field_code_generator_module_model_field_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "New project",
                    "id_name": "menu_code_generator_new_project",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_code_cg",
                    "m2o_act_window": devops_new_project_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IDE",
                    "id_name": "menu_code_ide",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_code",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IDE breakpoint",
                    "id_name": "menu_code_ide_breakpoint",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_code_ide",
                    "m2o_act_window": devops_ide_breakpoint_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "IDE Pycharm",
                    "id_name": "menu_code_ide_pycharm",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_code_ide",
                    "m2o_act_window": devops_ide_pycharm_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Makefile target",
                    "id_name": "menu_code_log_makefile_target",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_code",
                    "m2o_act_window": devops_log_makefile_target_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Quality",
                    "id_name": "menu_code_quality",
                    "sequence": 4,
                    "parent_id_name": "erplibre_devops.menu_code",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "TODO",
                    "id_name": "menu_code_quality_todo",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_code_quality",
                    "m2o_act_window": devops_code_todo_code_todo_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Configuration",
                    "id_name": "menu_config",
                    "sequence": 100,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "VM execution stage",
                    "id_name": "menu_config_deploy_vm_exec_stage",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_config",
                    "m2o_act_window": devops_deploy_vm_exec_stage_deploy_vm_exec_stage_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "New project Stage",
                    "id_name": "menu_config_generator_new_project_stage",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_config",
                    "m2o_act_window": devops_cg_new_project_stage_action.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Db image",
                    "id_name": "menu_db_image",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_build",
                    "m2o_act_window": devops_db_image_db_image_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Deploy",
                    "id_name": "menu_deploy",
                    "sequence": 8,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "VM",
                    "id_name": "menu_deploy_vm",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_deploy_vm_group",
                    "m2o_act_window": devops_deploy_vm_deploy_vm_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "VM execution",
                    "id_name": "menu_deploy_vm_exec",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_deploy_vm_group",
                    "m2o_act_window": devops_deploy_vm_exec_deploy_vm_exec_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "VM",
                    "id_name": "menu_deploy_vm_group",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_deploy",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "VM snapshot",
                    "id_name": "menu_deploy_vm_snapshot",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_deploy_vm_group",
                    "m2o_act_window": devops_deploy_vm_snapshot_deploy_vm_snapshot_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "DevOps",
                    "id_name": "menu_devops",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Executions",
                    "id_name": "menu_devops_exec",
                    "sequence": 5,
                    "parent_id_name": "erplibre_devops.menu_process",
                    "m2o_act_window": devops_exec_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Exec bundle",
                    "id_name": "menu_devops_exec_bundle_error",
                    "sequence": 6,
                    "parent_id_name": "erplibre_devops.menu_process",
                    "m2o_act_window": devops_exec_bundle_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Exec error",
                    "id_name": "menu_devops_exec_error",
                    "sequence": 7,
                    "parent_id_name": "erplibre_devops.menu_process",
                    "m2o_act_window": devops_exec_error_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "ERPLibre",
                    "id_name": "menu_erplibre",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Config",
                    "id_name": "menu_erplibre_config",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_erplibre",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Path home",
                    "id_name": "menu_erplibre_config_path_home",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_erplibre_config",
                    "m2o_act_window": erplibre_config_path_home_config_path_home_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Erplibre DevOps",
                    "web_icon": "erplibre_devops,static/description/icon.png",
                    "id_name": "menu_erplibre_devops",
                    "sequence": 20,
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode",
                    "id_name": "menu_erplibre_mode",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_erplibre",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Environnement",
                    "id_name": "menu_erplibre_mode_env",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_erplibre_mode",
                    "m2o_act_window": erplibre_mode_env_mode_env_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Execution",
                    "id_name": "menu_erplibre_mode_exec",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_erplibre_mode",
                    "m2o_act_window": erplibre_mode_exec_mode_exec_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Mode",
                    "id_name": "menu_erplibre_mode_mode",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_erplibre_mode",
                    "m2o_act_window": erplibre_mode_mode_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Source",
                    "id_name": "menu_erplibre_mode_source",
                    "sequence": 4,
                    "parent_id_name": "erplibre_devops.menu_erplibre_mode",
                    "m2o_act_window": erplibre_mode_source_mode_source_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Version base",
                    "id_name": "menu_erplibre_mode_version_base",
                    "sequence": 5,
                    "parent_id_name": "erplibre_devops.menu_erplibre_mode",
                    "m2o_act_window": erplibre_mode_version_base_mode_version_base_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Version ERPLibre",
                    "id_name": "menu_erplibre_mode_version_erplibre",
                    "sequence": 6,
                    "parent_id_name": "erplibre_devops.menu_erplibre_mode",
                    "m2o_act_window": erplibre_mode_version_erplibre_mode_version_erplibre_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Monitor",
                    "id_name": "menu_monitor",
                    "sequence": 10,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Operate",
                    "id_name": "menu_operate",
                    "sequence": 9,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Plan",
                    "id_name": "menu_plan",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Code generator",
                    "id_name": "menu_plan_cg",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_plan",
                    "m2o_act_window": devops_plan_cg_plan_cg_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Process",
                    "id_name": "menu_process",
                    "sequence": 5,
                    "parent_id_name": "erplibre_devops.menu_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Release",
                    "id_name": "menu_release",
                    "sequence": 7,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "System",
                    "id_name": "menu_system_item",
                    "sequence": 4,
                    "parent_id_name": "erplibre_devops.menu_devops",
                    "m2o_act_window": action_devops_check_system_conf_form.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test",
                    "id_name": "menu_test",
                    "sequence": 6,
                    "parent_id_name": "erplibre_devops.menu_erplibre_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test case",
                    "id_name": "menu_test_case",
                    "sequence": 3,
                    "parent_id_name": "erplibre_devops.menu_test",
                    "m2o_act_window": devops_test_case_test_case_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test case CG",
                    "id_name": "menu_test_case_cg",
                    "sequence": 6,
                    "parent_id_name": "erplibre_devops.menu_test",
                    "m2o_act_window": devops_cg_test_case_cg_test_case_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test case exec",
                    "id_name": "menu_test_case_exec",
                    "sequence": 4,
                    "parent_id_name": "erplibre_devops.menu_test",
                    "m2o_act_window": devops_test_case_exec_test_case_exec_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test plan",
                    "id_name": "menu_test_plan",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_test",
                    "m2o_act_window": devops_test_plan_test_plan_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test plan exec",
                    "id_name": "menu_test_plan_exec",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_test",
                    "m2o_act_window": devops_test_plan_exec_test_plan_exec_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Test result",
                    "id_name": "menu_test_result",
                    "sequence": 5,
                    "parent_id_name": "erplibre_devops.menu_test",
                    "m2o_act_window": devops_test_result_test_result_action_window.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Workspace docker",
                    "id_name": "menu_workspace_docker_item",
                    "sequence": 2,
                    "parent_id_name": "erplibre_devops.menu_workspace_sub",
                    "m2o_act_window": action_devops_check_workspace_docker_conf_form.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Workspace",
                    "id_name": "menu_workspace_item",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_devops",
                    "m2o_act_window": action_devops_check_workspace_conf_form.id,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Workspace misc",
                    "id_name": "menu_workspace_sub",
                    "sequence": 6,
                    "parent_id_name": "erplibre_devops.menu_devops",
                    "ignore_act_window": True,
                }
            )
            env["code.generator.menu"].create(
                {
                    "code_generator_id": code_generator_id.id,
                    "name": "Workspace terminal",
                    "id_name": "menu_workspace_terminal_item",
                    "sequence": 1,
                    "parent_id_name": "erplibre_devops.menu_workspace_sub",
                    "m2o_act_window": action_devops_check_workspace_terminal_conf_form.id,
                }
            )

        # Action generate view
        wizard_view = env["code.generator.generate.views.wizard"].create(
            {
                "code_generator_id": code_generator_id.id,
                "enable_generate_all": False,
                "disable_generate_access": True,
                "code_generator_view_ids": [(6, 0, lst_view_id)],
            }
        )

        wizard_view.button_generate_views()

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_cg Access User types / Internal User",
                "model_id": model_devops_cg.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_cg_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_cg_field Access User types / Internal User",
                "model_id": model_devops_cg_field.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_cg_field_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_cg_model Access User types / Internal User",
                "model_id": model_devops_cg_model.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_cg_model_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_cg_module Access User types / Internal User",
                "model_id": model_devops_cg_module.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_cg_module_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_cg_new_project Access User types / Internal User"
                ),
                "model_id": model_devops_cg_new_project.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_cg_new_project_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_cg_new_project_stage Access User types / Internal"
                    " User"
                ),
                "model_id": model_devops_cg_new_project_stage.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_cg_new_project_stage_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_cg_test_case Access User types / Internal User"
                ),
                "model_id": model_devops_cg_test_case.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_cg_test_case_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_code_todo Access User types / Internal User",
                "model_id": model_devops_code_todo.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_code_todo_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_db_image Access User types / Internal User",
                "model_id": model_devops_db_image.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_db_image_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_deploy_vm Access User types / Internal User",
                "model_id": model_devops_deploy_vm.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_deploy_vm_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_deploy_vm_exec Access User types / Internal User"
                ),
                "model_id": model_devops_deploy_vm_exec.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_deploy_vm_exec_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_deploy_vm_exec_stage Access User types / Internal"
                    " User"
                ),
                "model_id": model_devops_deploy_vm_exec_stage.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_deploy_vm_exec_stage_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_deploy_vm_snapshot Access User types / Internal"
                    " User"
                ),
                "model_id": model_devops_deploy_vm_snapshot.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_deploy_vm_snapshot_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_exec Access User types / Internal User",
                "model_id": model_devops_exec.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_exec_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_exec_bundle Access User types / Internal User",
                "model_id": model_devops_exec_bundle.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_exec_bundle_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_exec_error Access User types / Internal User",
                "model_id": model_devops_exec_error.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_exec_error_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_ide_breakpoint Access User types / Internal User"
                ),
                "model_id": model_devops_ide_breakpoint.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_ide_breakpoint_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_ide_pycharm Access User types / Internal User",
                "model_id": model_devops_ide_pycharm.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_ide_pycharm_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_ide_pycharm_configuration Access User types /"
                    " Internal User"
                ),
                "model_id": model_devops_ide_pycharm_configuration.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_ide_pycharm_configuration_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_log_error Access User types / Internal User",
                "model_id": model_devops_log_error.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_log_error_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_log_makefile_target Access User types / Internal"
                    " User"
                ),
                "model_id": model_devops_log_makefile_target.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_log_makefile_target_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_log_warning Access User types / Internal User",
                "model_id": model_devops_log_warning.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_log_warning_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_plan_cg Access User types / Internal User",
                "model_id": model_devops_plan_cg.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_plan_cg_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_system Access User types / Internal User",
                "model_id": model_devops_system.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_system_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_test_case Access User types / Internal User",
                "model_id": model_devops_test_case.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_test_case_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_test_case_exec Access User types / Internal User"
                ),
                "model_id": model_devops_test_case_exec.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_test_case_exec_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_test_plan Access User types / Internal User",
                "model_id": model_devops_test_plan.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_test_plan_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_test_plan_exec Access User types / Internal User"
                ),
                "model_id": model_devops_test_plan_exec.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_test_plan_exec_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_test_result Access User types / Internal User",
                "model_id": model_devops_test_result.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_test_result_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "devops_workspace Access User types / Internal User",
                "model_id": model_devops_workspace.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_workspace_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_workspace_docker Access User types / Internal User"
                ),
                "model_id": model_devops_workspace_docker.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "devops_workspace_docker_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "devops_workspace_terminal Access User types / Internal"
                    " User"
                ),
                "model_id": model_devops_workspace_terminal.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "devops_workspace_terminal_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "erplibre_config_path_home Access User types / Internal"
                    " User"
                ),
                "model_id": model_erplibre_config_path_home.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "erplibre_config_path_home_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "erplibre_mode Access User types / Internal User",
                "model_id": model_erplibre_mode.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "erplibre_mode_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "erplibre_mode_env Access User types / Internal User",
                "model_id": model_erplibre_mode_env.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "erplibre_mode_env_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": "erplibre_mode_exec Access User types / Internal User",
                "model_id": model_erplibre_mode_exec.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "erplibre_mode_exec_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "erplibre_mode_source Access User types / Internal User"
                ),
                "model_id": model_erplibre_mode_source.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": (
                    "erplibre_mode_source_access_user_types_/_internal_user"
                ),
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "erplibre_mode_version_base Access User types / Internal"
                    " User"
                ),
                "model_id": model_erplibre_mode_version_base.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "erplibre_mode_version_base_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate access
        lang = "en_US"
        group_id = env.ref("base.group_user").with_context(lang=lang)
        access_id = env["ir.model.access"].create(
            {
                "name": (
                    "erplibre_mode_version_erplibre Access User types /"
                    " Internal User"
                ),
                "model_id": model_erplibre_mode_version_erplibre.id,
                "group_id": group_id.id,
                "perm_read": True,
                "perm_create": True,
                "perm_write": True,
                "perm_unlink": True,
            }
        )

        env["ir.model.data"].create(
            {
                "name": "erplibre_mode_version_erplibre_access_user_types_/_internal_user",
                "model": "ir.model.access",
                "module": MODULE_NAME,
                "res_id": access_id.id,
            }
        )

        # Generate module
        value = {"code_generator_ids": code_generator_id.ids}
        env["code.generator.writer"].create(value)


def uninstall_hook(cr, e):
    with api.Environment.manage():
        env = api.Environment(cr, SUPERUSER_ID, {})
        code_generator_id = env["code.generator.module"].search(
            [("name", "=", MODULE_NAME)]
        )
        if code_generator_id:
            code_generator_id.unlink()
